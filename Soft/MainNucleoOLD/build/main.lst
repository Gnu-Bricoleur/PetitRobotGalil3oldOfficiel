ARM GAS  /tmp/ccFmTS3Q.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB130:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccFmTS3Q.s 			page 2


  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** #include "assert.h"
  47:Src/main.c    **** /* USER CODE END Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PTD */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PTD */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PD */
  56:Src/main.c    **** #define DEBUG 1
  57:Src/main.c    **** /* USER CODE END PD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PM */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** TIM_HandleTypeDef htim2;
  66:Src/main.c    **** TIM_HandleTypeDef htim3;
  67:Src/main.c    **** TIM_HandleTypeDef htim4;
  68:Src/main.c    **** TIM_HandleTypeDef htim5;
  69:Src/main.c    **** 
  70:Src/main.c    **** UART_HandleTypeDef huart2;
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE BEGIN PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE END PV */
  75:Src/main.c    **** 
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** void SystemClock_Config(void);
  78:Src/main.c    **** static void MX_GPIO_Init(void);
  79:Src/main.c    **** static void MX_USART2_UART_Init(void);
  80:Src/main.c    **** static void MX_TIM2_Init(void);
  81:Src/main.c    **** static void MX_TIM3_Init(void);
  82:Src/main.c    **** static void MX_TIM4_Init(void);
  83:Src/main.c    **** static void MX_TIM5_Init(void);
  84:Src/main.c    **** /* USER CODE BEGIN PFP */
  85:Src/main.c    **** void moteurDroit(int PWM);
  86:Src/main.c    **** void moteurGauche(int PWM);
  87:Src/main.c    **** /* USER CODE END PFP */
  88:Src/main.c    **** 
ARM GAS  /tmp/ccFmTS3Q.s 			page 3


  89:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  90:Src/main.c    **** /* USER CODE BEGIN 0 */
  91:Src/main.c    **** double positionX = 0.0;
  92:Src/main.c    **** double positionY = 0.0;
  93:Src/main.c    **** double angle = 0.0;
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE END 0 */
  96:Src/main.c    **** 
  97:Src/main.c    **** /**
  98:Src/main.c    ****   * @brief  The application entry point.
  99:Src/main.c    ****   * @retval int
 100:Src/main.c    ****   */
 101:Src/main.c    **** int main(void)
 102:Src/main.c    **** {
 103:Src/main.c    ****   /* USER CODE BEGIN 1 */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE END 1 */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 110:Src/main.c    ****   HAL_Init();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN Init */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END Init */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Configure the system clock */
 117:Src/main.c    ****   SystemClock_Config();
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* USER CODE END SysInit */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Initialize all configured peripherals */
 124:Src/main.c    ****   MX_GPIO_Init();
 125:Src/main.c    ****   MX_USART2_UART_Init();
 126:Src/main.c    ****   MX_TIM2_Init();
 127:Src/main.c    ****   MX_TIM3_Init();
 128:Src/main.c    ****   MX_TIM4_Init();
 129:Src/main.c    ****   MX_TIM5_Init();
 130:Src/main.c    ****   /* USER CODE BEGIN 2 */
 131:Src/main.c    ****   HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_2);
 132:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 133:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 134:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 135:Src/main.c    ****   /* USER CODE END 2 */
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* Infinite loop */
 138:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 139:Src/main.c    ****   HAL_UART_Transmit(&huart2, "Atttenzion, zest barti !", sizeof("Atttenzion, zest barti !"), HAL_MA
 140:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick();
 141:Src/main.c    ****   int debug = 0;
 142:Src/main.c    ****   char buffer[50] = "";
 143:Src/main.c    ****   TIM4->CNT = 30000;
 144:Src/main.c    ****   TIM5->CNT = 30000;
 145:Src/main.c    ****   double tim4 = 0;
ARM GAS  /tmp/ccFmTS3Q.s 			page 4


 146:Src/main.c    ****   double tim5 = 0;
 147:Src/main.c    ****   double tim4tot = 0;
 148:Src/main.c    ****   double tim5tot = 0;
 149:Src/main.c    ****   while (1)
 150:Src/main.c    ****   {
 151:Src/main.c    ****     //htim2.Instance->CCR2 = 1000;
 152:Src/main.c    ****     //htim3.Instance->CCR1 = 1000;
 153:Src/main.c    ****     //HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 154:Src/main.c    ****     //HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_SET);
 155:Src/main.c    ****     //HAL_Delay(50);
 156:Src/main.c    ****     //HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 157:Src/main.c    ****     //HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 158:Src/main.c    ****     moteurDroit(2000);
 159:Src/main.c    ****     //HAL_Delay(5000);
 160:Src/main.c    ****     //moteurDroit(2000, 1);
 161:Src/main.c    ****     //HAL_Delay(5000);
 162:Src/main.c    ****     //char buffer[16] = "";
 163:Src/main.c    ****     //sprintf(buffer, "%d;%d\n", TIM4->CNT, TIM5->CNT);
 164:Src/main.c    ****     //HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 165:Src/main.c    ****     while(HAL_GetTick() - oldTicks < 50)
 166:Src/main.c    ****     {}
 167:Src/main.c    ****     oldTicks = HAL_GetTick();
 168:Src/main.c    ****     tim4 = (TIM4->CNT)-30000;
 169:Src/main.c    ****     tim5 = -(TIM5->CNT)+30000;
 170:Src/main.c    ****     tim4 = 10;
 171:Src/main.c    ****     tim5 = 10;
 172:Src/main.c    ****     updatePos(tim4, tim5, &positionX, &positionY, &angle);
 173:Src/main.c    ****     //TIM4->CNT = 30000;
 174:Src/main.c    ****     //TIM5->CNT = 30000;
 175:Src/main.c    ****     tim4tot += tim4;
 176:Src/main.c    ****     tim5tot += tim5;
 177:Src/main.c    ****     
 178:Src/main.c    ****     debug += 1;
 179:Src/main.c    ****     if (DEBUG)
 180:Src/main.c    ****     {
 181:Src/main.c    ****         if (debug == 1)
 182:Src/main.c    ****         {
 183:Src/main.c    ****             sprintf(buffer, "\n%d / %d / %d\n_____________", (int)positionX, (int)positionY, (int)(
 184:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 185:Src/main.c    ****             sprintf(buffer, "\n%d / %d\n___________________", tim4, tim5);
 186:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 187:Src/main.c    ****             debug = 0;
 188:Src/main.c    ****         }
 189:Src/main.c    ****     }
 190:Src/main.c    ****     
 191:Src/main.c    ****     
 192:Src/main.c    ****     /* USER CODE END WHILE */
 193:Src/main.c    **** 
 194:Src/main.c    ****     /* USER CODE BEGIN 3 */
 195:Src/main.c    ****   }
 196:Src/main.c    ****   /* USER CODE END 3 */
 197:Src/main.c    **** }
 198:Src/main.c    **** 
 199:Src/main.c    **** /**
 200:Src/main.c    ****   * @brief System Clock Configuration
 201:Src/main.c    ****   * @retval None
 202:Src/main.c    ****   */
ARM GAS  /tmp/ccFmTS3Q.s 			page 5


 203:Src/main.c    **** void SystemClock_Config(void)
 204:Src/main.c    **** {
 205:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 206:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 207:Src/main.c    **** 
 208:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 209:Src/main.c    ****   */
 210:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 211:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 212:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 213:Src/main.c    ****   */
 214:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 215:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 216:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 217:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 220:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 221:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 222:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 223:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 224:Src/main.c    ****   {
 225:Src/main.c    ****     Error_Handler();
 226:Src/main.c    ****   }
 227:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 228:Src/main.c    ****   */
 229:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 230:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 231:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 232:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 233:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 234:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 235:Src/main.c    **** 
 236:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 239:Src/main.c    ****   }
 240:Src/main.c    **** }
 241:Src/main.c    **** 
 242:Src/main.c    **** /**
 243:Src/main.c    ****   * @brief TIM2 Initialization Function
 244:Src/main.c    ****   * @param None
 245:Src/main.c    ****   * @retval None
 246:Src/main.c    ****   */
 247:Src/main.c    **** static void MX_TIM2_Init(void)
 248:Src/main.c    **** {
 249:Src/main.c    **** 
 250:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 251:Src/main.c    **** 
 252:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 253:Src/main.c    **** 
 254:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 255:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 256:Src/main.c    **** 
 257:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 258:Src/main.c    **** 
 259:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
ARM GAS  /tmp/ccFmTS3Q.s 			page 6


 260:Src/main.c    ****   htim2.Instance = TIM2;
 261:Src/main.c    ****   htim2.Init.Prescaler = 0;
 262:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 263:Src/main.c    ****   htim2.Init.Period = 10000;
 264:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 265:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 266:Src/main.c    ****   {
 267:Src/main.c    ****     Error_Handler();
 268:Src/main.c    ****   }
 269:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 270:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 271:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 272:Src/main.c    ****   {
 273:Src/main.c    ****     Error_Handler();
 274:Src/main.c    ****   }
 275:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 276:Src/main.c    ****   sConfigOC.Pulse = 0;
 277:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 278:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 279:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 280:Src/main.c    ****   {
 281:Src/main.c    ****     Error_Handler();
 282:Src/main.c    ****   }
 283:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 284:Src/main.c    **** 
 285:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 286:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 287:Src/main.c    **** 
 288:Src/main.c    **** }
 289:Src/main.c    **** 
 290:Src/main.c    **** /**
 291:Src/main.c    ****   * @brief TIM3 Initialization Function
 292:Src/main.c    ****   * @param None
 293:Src/main.c    ****   * @retval None
 294:Src/main.c    ****   */
 295:Src/main.c    **** static void MX_TIM3_Init(void)
 296:Src/main.c    **** {
 297:Src/main.c    **** 
 298:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 299:Src/main.c    **** 
 300:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 301:Src/main.c    **** 
 302:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 303:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 304:Src/main.c    **** 
 305:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 306:Src/main.c    **** 
 307:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 308:Src/main.c    ****   htim3.Instance = TIM3;
 309:Src/main.c    ****   htim3.Init.Prescaler = 0;
 310:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 311:Src/main.c    ****   htim3.Init.Period = 10000;
 312:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 313:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 314:Src/main.c    ****   {
 315:Src/main.c    ****     Error_Handler();
 316:Src/main.c    ****   }
ARM GAS  /tmp/ccFmTS3Q.s 			page 7


 317:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 318:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 319:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 320:Src/main.c    ****   {
 321:Src/main.c    ****     Error_Handler();
 322:Src/main.c    ****   }
 323:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 324:Src/main.c    ****   sConfigOC.Pulse = 0;
 325:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 326:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 327:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 328:Src/main.c    ****   {
 329:Src/main.c    ****     Error_Handler();
 330:Src/main.c    ****   }
 331:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 332:Src/main.c    **** 
 333:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 334:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 335:Src/main.c    **** 
 336:Src/main.c    **** }
 337:Src/main.c    **** 
 338:Src/main.c    **** /**
 339:Src/main.c    ****   * @brief TIM4 Initialization Function
 340:Src/main.c    ****   * @param None
 341:Src/main.c    ****   * @retval None
 342:Src/main.c    ****   */
 343:Src/main.c    **** static void MX_TIM4_Init(void)
 344:Src/main.c    **** {
 345:Src/main.c    **** 
 346:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 347:Src/main.c    **** 
 348:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 349:Src/main.c    **** 
 350:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 351:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 352:Src/main.c    **** 
 353:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 354:Src/main.c    **** 
 355:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 356:Src/main.c    ****   htim4.Instance = TIM4;
 357:Src/main.c    ****   htim4.Init.Prescaler = 0;
 358:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 359:Src/main.c    ****   htim4.Init.Period = 0xffff;
 360:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 361:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 362:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 363:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 364:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 365:Src/main.c    ****   sConfig.IC1Filter = 0;
 366:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 367:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 368:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 369:Src/main.c    ****   sConfig.IC2Filter = 0;
 370:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 371:Src/main.c    ****   {
 372:Src/main.c    ****     Error_Handler();
 373:Src/main.c    ****   }
ARM GAS  /tmp/ccFmTS3Q.s 			page 8


 374:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 375:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 376:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 377:Src/main.c    ****   {
 378:Src/main.c    ****     Error_Handler();
 379:Src/main.c    ****   }
 380:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 383:Src/main.c    **** 
 384:Src/main.c    **** }
 385:Src/main.c    **** 
 386:Src/main.c    **** /**
 387:Src/main.c    ****   * @brief TIM5 Initialization Function
 388:Src/main.c    ****   * @param None
 389:Src/main.c    ****   * @retval None
 390:Src/main.c    ****   */
 391:Src/main.c    **** static void MX_TIM5_Init(void)
 392:Src/main.c    **** {
 393:Src/main.c    **** 
 394:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 0 */
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* USER CODE END TIM5_Init 0 */
 397:Src/main.c    **** 
 398:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 399:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 400:Src/main.c    **** 
 401:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 1 */
 402:Src/main.c    **** 
 403:Src/main.c    ****   /* USER CODE END TIM5_Init 1 */
 404:Src/main.c    ****   htim5.Instance = TIM5;
 405:Src/main.c    ****   htim5.Init.Prescaler = 0;
 406:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 407:Src/main.c    ****   htim5.Init.Period = 0xffff;
 408:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 409:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 410:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 411:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 412:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 413:Src/main.c    ****   sConfig.IC1Filter = 0;
 414:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 415:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 416:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 417:Src/main.c    ****   sConfig.IC2Filter = 0;
 418:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 419:Src/main.c    ****   {
 420:Src/main.c    ****     Error_Handler();
 421:Src/main.c    ****   }
 422:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 423:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 424:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 425:Src/main.c    ****   {
 426:Src/main.c    ****     Error_Handler();
 427:Src/main.c    ****   }
 428:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 2 */
 429:Src/main.c    **** 
 430:Src/main.c    ****   /* USER CODE END TIM5_Init 2 */
ARM GAS  /tmp/ccFmTS3Q.s 			page 9


 431:Src/main.c    **** 
 432:Src/main.c    **** }
 433:Src/main.c    **** 
 434:Src/main.c    **** /**
 435:Src/main.c    ****   * @brief USART2 Initialization Function
 436:Src/main.c    ****   * @param None
 437:Src/main.c    ****   * @retval None
 438:Src/main.c    ****   */
 439:Src/main.c    **** static void MX_USART2_UART_Init(void)
 440:Src/main.c    **** {
 441:Src/main.c    **** 
 442:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 443:Src/main.c    **** 
 444:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 445:Src/main.c    **** 
 446:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 447:Src/main.c    **** 
 448:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 449:Src/main.c    ****   huart2.Instance = USART2;
 450:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 451:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 452:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 453:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 454:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 455:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 456:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 457:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 458:Src/main.c    ****   {
 459:Src/main.c    ****     Error_Handler();
 460:Src/main.c    ****   }
 461:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 462:Src/main.c    **** 
 463:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 464:Src/main.c    **** 
 465:Src/main.c    **** }
 466:Src/main.c    **** 
 467:Src/main.c    **** /**
 468:Src/main.c    ****   * @brief GPIO Initialization Function
 469:Src/main.c    ****   * @param None
 470:Src/main.c    ****   * @retval None
 471:Src/main.c    ****   */
 472:Src/main.c    **** static void MX_GPIO_Init(void)
 473:Src/main.c    **** {
  28              		.loc 1 473 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 8BB0     		sub	sp, sp, #44
  41              	.LCFI1:
ARM GAS  /tmp/ccFmTS3Q.s 			page 10


  42              		.cfi_def_cfa_offset 64
 474:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 474 0
  44 0004 0024     		movs	r4, #0
  45 0006 0594     		str	r4, [sp, #20]
  46 0008 0694     		str	r4, [sp, #24]
  47 000a 0794     		str	r4, [sp, #28]
  48 000c 0894     		str	r4, [sp, #32]
  49 000e 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 475:Src/main.c    **** 
 476:Src/main.c    ****   /* GPIO Ports Clock Enable */
 477:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  51              		.loc 1 477 0
  52 0010 0194     		str	r4, [sp, #4]
  53 0012 2A4B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57 001c 1A6B     		ldr	r2, [r3, #48]
  58 001e 02F00402 		and	r2, r2, #4
  59 0022 0192     		str	r2, [sp, #4]
  60 0024 019A     		ldr	r2, [sp, #4]
  61              	.LBE2:
  62              	.LBB3:
 478:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  63              		.loc 1 478 0
  64 0026 0294     		str	r4, [sp, #8]
  65 0028 1A6B     		ldr	r2, [r3, #48]
  66 002a 42F08002 		orr	r2, r2, #128
  67 002e 1A63     		str	r2, [r3, #48]
  68 0030 1A6B     		ldr	r2, [r3, #48]
  69 0032 02F08002 		and	r2, r2, #128
  70 0036 0292     		str	r2, [sp, #8]
  71 0038 029A     		ldr	r2, [sp, #8]
  72              	.LBE3:
  73              	.LBB4:
 479:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  74              		.loc 1 479 0
  75 003a 0394     		str	r4, [sp, #12]
  76 003c 1A6B     		ldr	r2, [r3, #48]
  77 003e 42F00102 		orr	r2, r2, #1
  78 0042 1A63     		str	r2, [r3, #48]
  79 0044 1A6B     		ldr	r2, [r3, #48]
  80 0046 02F00102 		and	r2, r2, #1
  81 004a 0392     		str	r2, [sp, #12]
  82 004c 039A     		ldr	r2, [sp, #12]
  83              	.LBE4:
  84              	.LBB5:
 480:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  85              		.loc 1 480 0
  86 004e 0494     		str	r4, [sp, #16]
  87 0050 1A6B     		ldr	r2, [r3, #48]
  88 0052 42F00202 		orr	r2, r2, #2
  89 0056 1A63     		str	r2, [r3, #48]
  90 0058 1B6B     		ldr	r3, [r3, #48]
  91 005a 03F00203 		and	r3, r3, #2
ARM GAS  /tmp/ccFmTS3Q.s 			page 11


  92 005e 0493     		str	r3, [sp, #16]
  93 0060 049B     		ldr	r3, [sp, #16]
  94              	.LBE5:
 481:Src/main.c    **** 
 482:Src/main.c    ****   /*Configure GPIO pin Output Level */
 483:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR1_Pin, GPIO_PIN_RESET);
  95              		.loc 1 483 0
  96 0062 174F     		ldr	r7, .L3+4
  97 0064 3846     		mov	r0, r7
  98 0066 4FF48461 		mov	r1, #1056
  99 006a 2246     		mov	r2, r4
 100 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
 484:Src/main.c    **** 
 485:Src/main.c    ****   /*Configure GPIO pin Output Level */
 486:Src/main.c    ****   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 102              		.loc 1 486 0
 103 0070 144D     		ldr	r5, .L3+8
 104 0072 2846     		mov	r0, r5
 105 0074 2021     		movs	r1, #32
 106 0076 2246     		mov	r2, r4
 107 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL1:
 487:Src/main.c    **** 
 488:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 489:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 109              		.loc 1 489 0
 110 007c 4FF40053 		mov	r3, #8192
 111 0080 0593     		str	r3, [sp, #20]
 490:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 112              		.loc 1 490 0
 113 0082 114B     		ldr	r3, .L3+12
 114 0084 0693     		str	r3, [sp, #24]
 491:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 115              		.loc 1 491 0
 116 0086 0794     		str	r4, [sp, #28]
 492:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 117              		.loc 1 492 0
 118 0088 1048     		ldr	r0, .L3+16
 119 008a 05A9     		add	r1, sp, #20
 120 008c FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL2:
 493:Src/main.c    **** 
 494:Src/main.c    ****   /*Configure GPIO pins : LD2_Pin DIR1_Pin */
 495:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin|DIR1_Pin;
 122              		.loc 1 495 0
 123 0090 4FF48463 		mov	r3, #1056
 124 0094 0593     		str	r3, [sp, #20]
 496:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 125              		.loc 1 496 0
 126 0096 0126     		movs	r6, #1
 127 0098 0696     		str	r6, [sp, #24]
 497:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 497 0
 129 009a 0794     		str	r4, [sp, #28]
 498:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 130              		.loc 1 498 0
ARM GAS  /tmp/ccFmTS3Q.s 			page 12


 131 009c 0894     		str	r4, [sp, #32]
 499:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 132              		.loc 1 499 0
 133 009e 3846     		mov	r0, r7
 134 00a0 05A9     		add	r1, sp, #20
 135 00a2 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL3:
 500:Src/main.c    **** 
 501:Src/main.c    ****   /*Configure GPIO pin : DIR2_Pin */
 502:Src/main.c    ****   GPIO_InitStruct.Pin = DIR2_Pin;
 137              		.loc 1 502 0
 138 00a6 2023     		movs	r3, #32
 139 00a8 0593     		str	r3, [sp, #20]
 503:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 140              		.loc 1 503 0
 141 00aa 0696     		str	r6, [sp, #24]
 504:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 142              		.loc 1 504 0
 143 00ac 0794     		str	r4, [sp, #28]
 505:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 144              		.loc 1 505 0
 145 00ae 0894     		str	r4, [sp, #32]
 506:Src/main.c    ****   HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 146              		.loc 1 506 0
 147 00b0 2846     		mov	r0, r5
 148 00b2 05A9     		add	r1, sp, #20
 149 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
 150              	.LVL4:
 507:Src/main.c    **** 
 508:Src/main.c    **** }
 151              		.loc 1 508 0
 152 00b8 0BB0     		add	sp, sp, #44
 153              	.LCFI2:
 154              		.cfi_def_cfa_offset 20
 155              		@ sp needed
 156 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 157              	.L4:
 158              		.align	2
 159              	.L3:
 160 00bc 00380240 		.word	1073887232
 161 00c0 00000240 		.word	1073872896
 162 00c4 00040240 		.word	1073873920
 163 00c8 00002110 		.word	270598144
 164 00cc 00080240 		.word	1073874944
 165              		.cfi_endproc
 166              	.LFE130:
 168              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 169              		.align	2
 170              		.thumb
 171              		.thumb_func
 173              	MX_USART2_UART_Init:
 174              	.LFB129:
 440:Src/main.c    **** 
 175              		.loc 1 440 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccFmTS3Q.s 			page 13


 179 0000 08B5     		push	{r3, lr}
 180              	.LCFI3:
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 3, -8
 183              		.cfi_offset 14, -4
 449:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 184              		.loc 1 449 0
 185 0002 0848     		ldr	r0, .L7
 186 0004 084B     		ldr	r3, .L7+4
 187 0006 0360     		str	r3, [r0]
 450:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 188              		.loc 1 450 0
 189 0008 4FF4E133 		mov	r3, #115200
 190 000c 4360     		str	r3, [r0, #4]
 451:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 191              		.loc 1 451 0
 192 000e 0023     		movs	r3, #0
 193 0010 8360     		str	r3, [r0, #8]
 452:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 194              		.loc 1 452 0
 195 0012 C360     		str	r3, [r0, #12]
 453:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 196              		.loc 1 453 0
 197 0014 0361     		str	r3, [r0, #16]
 454:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 198              		.loc 1 454 0
 199 0016 0C22     		movs	r2, #12
 200 0018 4261     		str	r2, [r0, #20]
 455:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 201              		.loc 1 455 0
 202 001a 8361     		str	r3, [r0, #24]
 456:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 203              		.loc 1 456 0
 204 001c C361     		str	r3, [r0, #28]
 457:Src/main.c    ****   {
 205              		.loc 1 457 0
 206 001e FFF7FEFF 		bl	HAL_UART_Init
 207              	.LVL5:
 208 0022 08BD     		pop	{r3, pc}
 209              	.L8:
 210              		.align	2
 211              	.L7:
 212 0024 00000000 		.word	huart2
 213 0028 00440040 		.word	1073759232
 214              		.cfi_endproc
 215              	.LFE129:
 217              		.section	.text.MX_TIM2_Init,"ax",%progbits
 218              		.align	2
 219              		.thumb
 220              		.thumb_func
 222              	MX_TIM2_Init:
 223              	.LFB125:
 248:Src/main.c    **** 
 224              		.loc 1 248 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 40
 227              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccFmTS3Q.s 			page 14


 228 0000 30B5     		push	{r4, r5, lr}
 229              	.LCFI4:
 230              		.cfi_def_cfa_offset 12
 231              		.cfi_offset 4, -12
 232              		.cfi_offset 5, -8
 233              		.cfi_offset 14, -4
 234 0002 8BB0     		sub	sp, sp, #44
 235              	.LCFI5:
 236              		.cfi_def_cfa_offset 56
 254:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 237              		.loc 1 254 0
 238 0004 0024     		movs	r4, #0
 239 0006 0894     		str	r4, [sp, #32]
 240 0008 0994     		str	r4, [sp, #36]
 255:Src/main.c    **** 
 241              		.loc 1 255 0
 242 000a 0194     		str	r4, [sp, #4]
 243 000c 0294     		str	r4, [sp, #8]
 244 000e 0394     		str	r4, [sp, #12]
 245 0010 0494     		str	r4, [sp, #16]
 246 0012 0594     		str	r4, [sp, #20]
 247 0014 0694     		str	r4, [sp, #24]
 248 0016 0794     		str	r4, [sp, #28]
 260:Src/main.c    ****   htim2.Init.Prescaler = 0;
 249              		.loc 1 260 0
 250 0018 104D     		ldr	r5, .L11
 251 001a 4FF08043 		mov	r3, #1073741824
 252 001e 2B60     		str	r3, [r5]
 261:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 253              		.loc 1 261 0
 254 0020 6C60     		str	r4, [r5, #4]
 262:Src/main.c    ****   htim2.Init.Period = 10000;
 255              		.loc 1 262 0
 256 0022 AC60     		str	r4, [r5, #8]
 263:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 257              		.loc 1 263 0
 258 0024 42F21073 		movw	r3, #10000
 259 0028 EB60     		str	r3, [r5, #12]
 264:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 260              		.loc 1 264 0
 261 002a 2C61     		str	r4, [r5, #16]
 265:Src/main.c    ****   {
 262              		.loc 1 265 0
 263 002c 2846     		mov	r0, r5
 264 002e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 265              	.LVL6:
 269:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 266              		.loc 1 269 0
 267 0032 0894     		str	r4, [sp, #32]
 270:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 268              		.loc 1 270 0
 269 0034 0994     		str	r4, [sp, #36]
 271:Src/main.c    ****   {
 270              		.loc 1 271 0
 271 0036 2846     		mov	r0, r5
 272 0038 08A9     		add	r1, sp, #32
 273 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccFmTS3Q.s 			page 15


 274              	.LVL7:
 275:Src/main.c    ****   sConfigOC.Pulse = 0;
 275              		.loc 1 275 0
 276 003e 6023     		movs	r3, #96
 277 0040 0193     		str	r3, [sp, #4]
 276:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 278              		.loc 1 276 0
 279 0042 0294     		str	r4, [sp, #8]
 277:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 280              		.loc 1 277 0
 281 0044 0394     		str	r4, [sp, #12]
 278:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 282              		.loc 1 278 0
 283 0046 0594     		str	r4, [sp, #20]
 279:Src/main.c    ****   {
 284              		.loc 1 279 0
 285 0048 2846     		mov	r0, r5
 286 004a 01A9     		add	r1, sp, #4
 287 004c 0422     		movs	r2, #4
 288 004e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 289              	.LVL8:
 286:Src/main.c    **** 
 290              		.loc 1 286 0
 291 0052 2846     		mov	r0, r5
 292 0054 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 293              	.LVL9:
 288:Src/main.c    **** 
 294              		.loc 1 288 0
 295 0058 0BB0     		add	sp, sp, #44
 296              	.LCFI6:
 297              		.cfi_def_cfa_offset 12
 298              		@ sp needed
 299 005a 30BD     		pop	{r4, r5, pc}
 300              	.L12:
 301              		.align	2
 302              	.L11:
 303 005c 00000000 		.word	htim2
 304              		.cfi_endproc
 305              	.LFE125:
 307              		.section	.text.MX_TIM3_Init,"ax",%progbits
 308              		.align	2
 309              		.thumb
 310              		.thumb_func
 312              	MX_TIM3_Init:
 313              	.LFB126:
 296:Src/main.c    **** 
 314              		.loc 1 296 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 40
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318 0000 30B5     		push	{r4, r5, lr}
 319              	.LCFI7:
 320              		.cfi_def_cfa_offset 12
 321              		.cfi_offset 4, -12
 322              		.cfi_offset 5, -8
 323              		.cfi_offset 14, -4
 324 0002 8BB0     		sub	sp, sp, #44
ARM GAS  /tmp/ccFmTS3Q.s 			page 16


 325              	.LCFI8:
 326              		.cfi_def_cfa_offset 56
 302:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 327              		.loc 1 302 0
 328 0004 0024     		movs	r4, #0
 329 0006 0894     		str	r4, [sp, #32]
 330 0008 0994     		str	r4, [sp, #36]
 303:Src/main.c    **** 
 331              		.loc 1 303 0
 332 000a 0194     		str	r4, [sp, #4]
 333 000c 0294     		str	r4, [sp, #8]
 334 000e 0394     		str	r4, [sp, #12]
 335 0010 0494     		str	r4, [sp, #16]
 336 0012 0594     		str	r4, [sp, #20]
 337 0014 0694     		str	r4, [sp, #24]
 338 0016 0794     		str	r4, [sp, #28]
 308:Src/main.c    ****   htim3.Init.Prescaler = 0;
 339              		.loc 1 308 0
 340 0018 104D     		ldr	r5, .L15
 341 001a 114B     		ldr	r3, .L15+4
 342 001c 2B60     		str	r3, [r5]
 309:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 343              		.loc 1 309 0
 344 001e 6C60     		str	r4, [r5, #4]
 310:Src/main.c    ****   htim3.Init.Period = 10000;
 345              		.loc 1 310 0
 346 0020 AC60     		str	r4, [r5, #8]
 311:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 347              		.loc 1 311 0
 348 0022 42F21073 		movw	r3, #10000
 349 0026 EB60     		str	r3, [r5, #12]
 312:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 350              		.loc 1 312 0
 351 0028 2C61     		str	r4, [r5, #16]
 313:Src/main.c    ****   {
 352              		.loc 1 313 0
 353 002a 2846     		mov	r0, r5
 354 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 355              	.LVL10:
 317:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 356              		.loc 1 317 0
 357 0030 0894     		str	r4, [sp, #32]
 318:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 358              		.loc 1 318 0
 359 0032 0994     		str	r4, [sp, #36]
 319:Src/main.c    ****   {
 360              		.loc 1 319 0
 361 0034 2846     		mov	r0, r5
 362 0036 08A9     		add	r1, sp, #32
 363 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 364              	.LVL11:
 323:Src/main.c    ****   sConfigOC.Pulse = 0;
 365              		.loc 1 323 0
 366 003c 6023     		movs	r3, #96
 367 003e 0193     		str	r3, [sp, #4]
 324:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 368              		.loc 1 324 0
ARM GAS  /tmp/ccFmTS3Q.s 			page 17


 369 0040 0294     		str	r4, [sp, #8]
 325:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 370              		.loc 1 325 0
 371 0042 0394     		str	r4, [sp, #12]
 326:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 372              		.loc 1 326 0
 373 0044 0594     		str	r4, [sp, #20]
 327:Src/main.c    ****   {
 374              		.loc 1 327 0
 375 0046 2846     		mov	r0, r5
 376 0048 01A9     		add	r1, sp, #4
 377 004a 2246     		mov	r2, r4
 378 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 379              	.LVL12:
 334:Src/main.c    **** 
 380              		.loc 1 334 0
 381 0050 2846     		mov	r0, r5
 382 0052 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 383              	.LVL13:
 336:Src/main.c    **** 
 384              		.loc 1 336 0
 385 0056 0BB0     		add	sp, sp, #44
 386              	.LCFI9:
 387              		.cfi_def_cfa_offset 12
 388              		@ sp needed
 389 0058 30BD     		pop	{r4, r5, pc}
 390              	.L16:
 391 005a 00BF     		.align	2
 392              	.L15:
 393 005c 00000000 		.word	htim3
 394 0060 00040040 		.word	1073742848
 395              		.cfi_endproc
 396              	.LFE126:
 398              		.section	.text.MX_TIM4_Init,"ax",%progbits
 399              		.align	2
 400              		.thumb
 401              		.thumb_func
 403              	MX_TIM4_Init:
 404              	.LFB127:
 344:Src/main.c    **** 
 405              		.loc 1 344 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 48
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409 0000 30B5     		push	{r4, r5, lr}
 410              	.LCFI10:
 411              		.cfi_def_cfa_offset 12
 412              		.cfi_offset 4, -12
 413              		.cfi_offset 5, -8
 414              		.cfi_offset 14, -4
 415 0002 8DB0     		sub	sp, sp, #52
 416              	.LCFI11:
 417              		.cfi_def_cfa_offset 64
 350:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 418              		.loc 1 350 0
 419 0004 0024     		movs	r4, #0
 420 0006 0494     		str	r4, [sp, #16]
ARM GAS  /tmp/ccFmTS3Q.s 			page 18


 421 0008 0694     		str	r4, [sp, #24]
 422 000a 0794     		str	r4, [sp, #28]
 423 000c 0894     		str	r4, [sp, #32]
 424 000e 0A94     		str	r4, [sp, #40]
 425 0010 0B94     		str	r4, [sp, #44]
 351:Src/main.c    **** 
 426              		.loc 1 351 0
 427 0012 0194     		str	r4, [sp, #4]
 428 0014 0294     		str	r4, [sp, #8]
 356:Src/main.c    ****   htim4.Init.Prescaler = 0;
 429              		.loc 1 356 0
 430 0016 0D4D     		ldr	r5, .L19
 431 0018 0D4B     		ldr	r3, .L19+4
 432 001a 2B60     		str	r3, [r5]
 357:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 433              		.loc 1 357 0
 434 001c 6C60     		str	r4, [r5, #4]
 358:Src/main.c    ****   htim4.Init.Period = 0xffff;
 435              		.loc 1 358 0
 436 001e AC60     		str	r4, [r5, #8]
 359:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 437              		.loc 1 359 0
 438 0020 4FF6FF73 		movw	r3, #65535
 439 0024 EB60     		str	r3, [r5, #12]
 360:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 440              		.loc 1 360 0
 441 0026 2C61     		str	r4, [r5, #16]
 361:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 442              		.loc 1 361 0
 443 0028 0323     		movs	r3, #3
 444 002a 0393     		str	r3, [sp, #12]
 363:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 445              		.loc 1 363 0
 446 002c 0123     		movs	r3, #1
 447 002e 0593     		str	r3, [sp, #20]
 367:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 448              		.loc 1 367 0
 449 0030 0993     		str	r3, [sp, #36]
 370:Src/main.c    ****   {
 450              		.loc 1 370 0
 451 0032 2846     		mov	r0, r5
 452 0034 03A9     		add	r1, sp, #12
 453 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 454              	.LVL14:
 374:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 455              		.loc 1 374 0
 456 003a 0194     		str	r4, [sp, #4]
 375:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 457              		.loc 1 375 0
 458 003c 0294     		str	r4, [sp, #8]
 376:Src/main.c    ****   {
 459              		.loc 1 376 0
 460 003e 2846     		mov	r0, r5
 461 0040 01A9     		add	r1, sp, #4
 462 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 463              	.LVL15:
 384:Src/main.c    **** 
ARM GAS  /tmp/ccFmTS3Q.s 			page 19


 464              		.loc 1 384 0
 465 0046 0DB0     		add	sp, sp, #52
 466              	.LCFI12:
 467              		.cfi_def_cfa_offset 12
 468              		@ sp needed
 469 0048 30BD     		pop	{r4, r5, pc}
 470              	.L20:
 471 004a 00BF     		.align	2
 472              	.L19:
 473 004c 00000000 		.word	htim4
 474 0050 00080040 		.word	1073743872
 475              		.cfi_endproc
 476              	.LFE127:
 478              		.section	.text.MX_TIM5_Init,"ax",%progbits
 479              		.align	2
 480              		.thumb
 481              		.thumb_func
 483              	MX_TIM5_Init:
 484              	.LFB128:
 392:Src/main.c    **** 
 485              		.loc 1 392 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 48
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489 0000 30B5     		push	{r4, r5, lr}
 490              	.LCFI13:
 491              		.cfi_def_cfa_offset 12
 492              		.cfi_offset 4, -12
 493              		.cfi_offset 5, -8
 494              		.cfi_offset 14, -4
 495 0002 8DB0     		sub	sp, sp, #52
 496              	.LCFI14:
 497              		.cfi_def_cfa_offset 64
 398:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 498              		.loc 1 398 0
 499 0004 0024     		movs	r4, #0
 500 0006 0494     		str	r4, [sp, #16]
 501 0008 0694     		str	r4, [sp, #24]
 502 000a 0794     		str	r4, [sp, #28]
 503 000c 0894     		str	r4, [sp, #32]
 504 000e 0A94     		str	r4, [sp, #40]
 505 0010 0B94     		str	r4, [sp, #44]
 399:Src/main.c    **** 
 506              		.loc 1 399 0
 507 0012 0194     		str	r4, [sp, #4]
 508 0014 0294     		str	r4, [sp, #8]
 404:Src/main.c    ****   htim5.Init.Prescaler = 0;
 509              		.loc 1 404 0
 510 0016 0D4D     		ldr	r5, .L23
 511 0018 0D4B     		ldr	r3, .L23+4
 512 001a 2B60     		str	r3, [r5]
 405:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 513              		.loc 1 405 0
 514 001c 6C60     		str	r4, [r5, #4]
 406:Src/main.c    ****   htim5.Init.Period = 0xffff;
 515              		.loc 1 406 0
 516 001e AC60     		str	r4, [r5, #8]
ARM GAS  /tmp/ccFmTS3Q.s 			page 20


 407:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 517              		.loc 1 407 0
 518 0020 4FF6FF73 		movw	r3, #65535
 519 0024 EB60     		str	r3, [r5, #12]
 408:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 520              		.loc 1 408 0
 521 0026 2C61     		str	r4, [r5, #16]
 409:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 522              		.loc 1 409 0
 523 0028 0323     		movs	r3, #3
 524 002a 0393     		str	r3, [sp, #12]
 411:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 525              		.loc 1 411 0
 526 002c 0123     		movs	r3, #1
 527 002e 0593     		str	r3, [sp, #20]
 415:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 528              		.loc 1 415 0
 529 0030 0993     		str	r3, [sp, #36]
 418:Src/main.c    ****   {
 530              		.loc 1 418 0
 531 0032 2846     		mov	r0, r5
 532 0034 03A9     		add	r1, sp, #12
 533 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 534              	.LVL16:
 422:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 535              		.loc 1 422 0
 536 003a 0194     		str	r4, [sp, #4]
 423:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 537              		.loc 1 423 0
 538 003c 0294     		str	r4, [sp, #8]
 424:Src/main.c    ****   {
 539              		.loc 1 424 0
 540 003e 2846     		mov	r0, r5
 541 0040 01A9     		add	r1, sp, #4
 542 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 543              	.LVL17:
 432:Src/main.c    **** 
 544              		.loc 1 432 0
 545 0046 0DB0     		add	sp, sp, #52
 546              	.LCFI15:
 547              		.cfi_def_cfa_offset 12
 548              		@ sp needed
 549 0048 30BD     		pop	{r4, r5, pc}
 550              	.L24:
 551 004a 00BF     		.align	2
 552              	.L23:
 553 004c 00000000 		.word	htim5
 554 0050 000C0040 		.word	1073744896
 555              		.cfi_endproc
 556              	.LFE128:
 558              		.section	.text.SystemClock_Config,"ax",%progbits
 559              		.align	2
 560              		.global	SystemClock_Config
 561              		.thumb
 562              		.thumb_func
 564              	SystemClock_Config:
 565              	.LFB124:
ARM GAS  /tmp/ccFmTS3Q.s 			page 21


 204:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 566              		.loc 1 204 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 80
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570 0000 30B5     		push	{r4, r5, lr}
 571              	.LCFI16:
 572              		.cfi_def_cfa_offset 12
 573              		.cfi_offset 4, -12
 574              		.cfi_offset 5, -8
 575              		.cfi_offset 14, -4
 576 0002 95B0     		sub	sp, sp, #84
 577              	.LCFI17:
 578              		.cfi_def_cfa_offset 96
 205:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 579              		.loc 1 205 0
 580 0004 0024     		movs	r4, #0
 581 0006 0894     		str	r4, [sp, #32]
 582 0008 0994     		str	r4, [sp, #36]
 583 000a 0A94     		str	r4, [sp, #40]
 584 000c 0B94     		str	r4, [sp, #44]
 585 000e 0C94     		str	r4, [sp, #48]
 586 0010 0D94     		str	r4, [sp, #52]
 587 0012 0E94     		str	r4, [sp, #56]
 588 0014 0F94     		str	r4, [sp, #60]
 589 0016 1094     		str	r4, [sp, #64]
 590 0018 1194     		str	r4, [sp, #68]
 591 001a 1294     		str	r4, [sp, #72]
 592 001c 1394     		str	r4, [sp, #76]
 206:Src/main.c    **** 
 593              		.loc 1 206 0
 594 001e 0394     		str	r4, [sp, #12]
 595 0020 0494     		str	r4, [sp, #16]
 596 0022 0594     		str	r4, [sp, #20]
 597 0024 0694     		str	r4, [sp, #24]
 598 0026 0794     		str	r4, [sp, #28]
 599              	.LBB6:
 210:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 600              		.loc 1 210 0
 601 0028 0194     		str	r4, [sp, #4]
 602 002a 1C4B     		ldr	r3, .L27
 603 002c 1A6C     		ldr	r2, [r3, #64]
 604 002e 42F08052 		orr	r2, r2, #268435456
 605 0032 1A64     		str	r2, [r3, #64]
 606 0034 1B6C     		ldr	r3, [r3, #64]
 607 0036 03F08053 		and	r3, r3, #268435456
 608 003a 0193     		str	r3, [sp, #4]
 609 003c 019B     		ldr	r3, [sp, #4]
 610              	.LBE6:
 611              	.LBB7:
 211:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 612              		.loc 1 211 0
 613 003e 0294     		str	r4, [sp, #8]
 614 0040 174A     		ldr	r2, .L27+4
 615 0042 1368     		ldr	r3, [r2]
 616 0044 23F44043 		bic	r3, r3, #49152
 617 0048 43F40043 		orr	r3, r3, #32768
ARM GAS  /tmp/ccFmTS3Q.s 			page 22


 618 004c 1360     		str	r3, [r2]
 619 004e 1368     		ldr	r3, [r2]
 620 0050 03F44043 		and	r3, r3, #49152
 621 0054 0293     		str	r3, [sp, #8]
 622 0056 029B     		ldr	r3, [sp, #8]
 623              	.LBE7:
 214:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 624              		.loc 1 214 0
 625 0058 0225     		movs	r5, #2
 626 005a 0895     		str	r5, [sp, #32]
 215:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 627              		.loc 1 215 0
 628 005c 0123     		movs	r3, #1
 629 005e 0B93     		str	r3, [sp, #44]
 216:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 630              		.loc 1 216 0
 631 0060 1023     		movs	r3, #16
 632 0062 0C93     		str	r3, [sp, #48]
 217:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 633              		.loc 1 217 0
 634 0064 0E95     		str	r5, [sp, #56]
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 635              		.loc 1 218 0
 636 0066 0F94     		str	r4, [sp, #60]
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 637              		.loc 1 219 0
 638 0068 1093     		str	r3, [sp, #64]
 220:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 639              		.loc 1 220 0
 640 006a 4FF4A873 		mov	r3, #336
 641 006e 1193     		str	r3, [sp, #68]
 221:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 642              		.loc 1 221 0
 643 0070 0423     		movs	r3, #4
 644 0072 1293     		str	r3, [sp, #72]
 222:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 645              		.loc 1 222 0
 646 0074 0723     		movs	r3, #7
 647 0076 1393     		str	r3, [sp, #76]
 223:Src/main.c    ****   {
 648              		.loc 1 223 0
 649 0078 08A8     		add	r0, sp, #32
 650 007a FFF7FEFF 		bl	HAL_RCC_OscConfig
 651              	.LVL18:
 229:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 652              		.loc 1 229 0
 653 007e 0F23     		movs	r3, #15
 654 0080 0393     		str	r3, [sp, #12]
 231:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 655              		.loc 1 231 0
 656 0082 0495     		str	r5, [sp, #16]
 232:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 657              		.loc 1 232 0
 658 0084 0594     		str	r4, [sp, #20]
 233:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 659              		.loc 1 233 0
 660 0086 4FF48053 		mov	r3, #4096
ARM GAS  /tmp/ccFmTS3Q.s 			page 23


 661 008a 0693     		str	r3, [sp, #24]
 234:Src/main.c    **** 
 662              		.loc 1 234 0
 663 008c 0794     		str	r4, [sp, #28]
 236:Src/main.c    ****   {
 664              		.loc 1 236 0
 665 008e 03A8     		add	r0, sp, #12
 666 0090 2946     		mov	r1, r5
 667 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 668              	.LVL19:
 240:Src/main.c    **** 
 669              		.loc 1 240 0
 670 0096 15B0     		add	sp, sp, #84
 671              	.LCFI18:
 672              		.cfi_def_cfa_offset 12
 673              		@ sp needed
 674 0098 30BD     		pop	{r4, r5, pc}
 675              	.L28:
 676 009a 00BF     		.align	2
 677              	.L27:
 678 009c 00380240 		.word	1073887232
 679 00a0 00700040 		.word	1073770496
 680              		.cfi_endproc
 681              	.LFE124:
 683              		.section	.text.moteurDroit,"ax",%progbits
 684              		.align	2
 685              		.global	moteurDroit
 686              		.thumb
 687              		.thumb_func
 689              	moteurDroit:
 690              	.LFB131:
 509:Src/main.c    **** 
 510:Src/main.c    **** /* USER CODE BEGIN 4 */
 511:Src/main.c    **** void moteurDroit(int PWM)
 512:Src/main.c    **** {
 691              		.loc 1 512 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              	.LVL20:
 696 0000 10B5     		push	{r4, lr}
 697              	.LCFI19:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 4, -8
 700              		.cfi_offset 14, -4
 513:Src/main.c    ****     if(PWM == abs(PWM))
 701              		.loc 1 513 0
 702 0002 80EAE074 		eor	r4, r0, r0, asr #31
 703 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 704 000a 8442     		cmp	r4, r0
 705 000c 06D1     		bne	.L30
 514:Src/main.c    ****     {
 515:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 706              		.loc 1 515 0
 707 000e 0848     		ldr	r0, .L33
 708              	.LVL21:
 709 0010 4FF48061 		mov	r1, #1024
ARM GAS  /tmp/ccFmTS3Q.s 			page 24


 710 0014 0022     		movs	r2, #0
 711 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 712              	.LVL22:
 713 001a 05E0     		b	.L31
 714              	.LVL23:
 715              	.L30:
 516:Src/main.c    ****     }
 517:Src/main.c    ****     else
 518:Src/main.c    ****     {
 519:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 716              		.loc 1 519 0
 717 001c 0448     		ldr	r0, .L33
 718              	.LVL24:
 719 001e 4FF48061 		mov	r1, #1024
 720 0022 0122     		movs	r2, #1
 721 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 722              	.LVL25:
 723              	.L31:
 520:Src/main.c    ****     }
 521:Src/main.c    ****     htim2.Instance->CCR2 = abs(PWM);
 724              		.loc 1 521 0
 725 0028 024B     		ldr	r3, .L33+4
 726 002a 1B68     		ldr	r3, [r3]
 727 002c 9C63     		str	r4, [r3, #56]
 728 002e 10BD     		pop	{r4, pc}
 729              	.L34:
 730              		.align	2
 731              	.L33:
 732 0030 00000240 		.word	1073872896
 733 0034 00000000 		.word	htim2
 734              		.cfi_endproc
 735              	.LFE131:
 737              		.global	__aeabi_dmul
 738              		.global	__aeabi_d2iz
 739              		.section	.text.main,"ax",%progbits
 740              		.align	2
 741              		.global	main
 742              		.thumb
 743              		.thumb_func
 745              	main:
 746              	.LFB123:
 102:Src/main.c    ****   /* USER CODE BEGIN 1 */
 747              		.loc 1 102 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 56
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 752              	.LCFI20:
 753              		.cfi_def_cfa_offset 24
 754              		.cfi_offset 4, -24
 755              		.cfi_offset 5, -20
 756              		.cfi_offset 6, -16
 757              		.cfi_offset 7, -12
 758              		.cfi_offset 8, -8
 759              		.cfi_offset 14, -4
 760 0004 90B0     		sub	sp, sp, #64
 761              	.LCFI21:
ARM GAS  /tmp/ccFmTS3Q.s 			page 25


 762              		.cfi_def_cfa_offset 88
 110:Src/main.c    **** 
 763              		.loc 1 110 0
 764 0006 FFF7FEFF 		bl	HAL_Init
 765              	.LVL26:
 117:Src/main.c    **** 
 766              		.loc 1 117 0
 767 000a FFF7FEFF 		bl	SystemClock_Config
 768              	.LVL27:
 124:Src/main.c    ****   MX_USART2_UART_Init();
 769              		.loc 1 124 0
 770 000e FFF7FEFF 		bl	MX_GPIO_Init
 771              	.LVL28:
 125:Src/main.c    ****   MX_TIM2_Init();
 772              		.loc 1 125 0
 773 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 774              	.LVL29:
 126:Src/main.c    ****   MX_TIM3_Init();
 775              		.loc 1 126 0
 776 0016 FFF7FEFF 		bl	MX_TIM2_Init
 777              	.LVL30:
 127:Src/main.c    ****   MX_TIM4_Init();
 778              		.loc 1 127 0
 779 001a FFF7FEFF 		bl	MX_TIM3_Init
 780              	.LVL31:
 128:Src/main.c    ****   MX_TIM5_Init();
 781              		.loc 1 128 0
 782 001e FFF7FEFF 		bl	MX_TIM4_Init
 783              	.LVL32:
 129:Src/main.c    ****   /* USER CODE BEGIN 2 */
 784              		.loc 1 129 0
 785 0022 FFF7FEFF 		bl	MX_TIM5_Init
 786              	.LVL33:
 131:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 787              		.loc 1 131 0
 788 0026 4048     		ldr	r0, .L39
 789 0028 0421     		movs	r1, #4
 790 002a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 791              	.LVL34:
 132:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 792              		.loc 1 132 0
 793 002e 3F48     		ldr	r0, .L39+4
 794 0030 0021     		movs	r1, #0
 795 0032 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 796              	.LVL35:
 133:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 797              		.loc 1 133 0
 798 0036 3E48     		ldr	r0, .L39+8
 799 0038 1821     		movs	r1, #24
 800 003a FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 801              	.LVL36:
 134:Src/main.c    ****   /* USER CODE END 2 */
 802              		.loc 1 134 0
 803 003e 3D48     		ldr	r0, .L39+12
 804 0040 1821     		movs	r1, #24
 805 0042 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 806              	.LVL37:
ARM GAS  /tmp/ccFmTS3Q.s 			page 26


 139:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick();
 807              		.loc 1 139 0
 808 0046 3C48     		ldr	r0, .L39+16
 809 0048 3C49     		ldr	r1, .L39+20
 810 004a 1922     		movs	r2, #25
 811 004c 4FF0FF33 		mov	r3, #-1
 812 0050 FFF7FEFF 		bl	HAL_UART_Transmit
 813              	.LVL38:
 140:Src/main.c    ****   int debug = 0;
 814              		.loc 1 140 0
 815 0054 FFF7FEFF 		bl	HAL_GetTick
 816              	.LVL39:
 817 0058 0446     		mov	r4, r0
 818              	.LVL40:
 142:Src/main.c    ****   TIM4->CNT = 30000;
 819              		.loc 1 142 0
 820 005a 0023     		movs	r3, #0
 821 005c 0393     		str	r3, [sp, #12]
 822 005e 0493     		str	r3, [sp, #16]
 823 0060 0593     		str	r3, [sp, #20]
 824 0062 0693     		str	r3, [sp, #24]
 825 0064 0793     		str	r3, [sp, #28]
 826 0066 0893     		str	r3, [sp, #32]
 827 0068 0993     		str	r3, [sp, #36]
 828 006a 0A93     		str	r3, [sp, #40]
 829 006c 0B93     		str	r3, [sp, #44]
 830 006e 0C93     		str	r3, [sp, #48]
 831 0070 0D93     		str	r3, [sp, #52]
 832 0072 0E93     		str	r3, [sp, #56]
 833 0074 ADF83C30 		strh	r3, [sp, #60]	@ movhi
 143:Src/main.c    ****   TIM5->CNT = 30000;
 834              		.loc 1 143 0
 835 0078 47F23053 		movw	r3, #30000
 836 007c 304A     		ldr	r2, .L39+24
 837 007e 5362     		str	r3, [r2, #36]
 144:Src/main.c    ****   double tim4 = 0;
 838              		.loc 1 144 0
 839 0080 02F58062 		add	r2, r2, #1024
 840 0084 5362     		str	r3, [r2, #36]
 841              	.LVL41:
 842              	.L37:
 158:Src/main.c    ****     //HAL_Delay(5000);
 843              		.loc 1 158 0
 844 0086 4FF4FA60 		mov	r0, #2000
 845 008a FFF7FEFF 		bl	moteurDroit
 846              	.LVL42:
 847              	.L36:
 165:Src/main.c    ****     {}
 848              		.loc 1 165 0 discriminator 1
 849 008e FFF7FEFF 		bl	HAL_GetTick
 850              	.LVL43:
 851 0092 001B     		subs	r0, r0, r4
 852 0094 3128     		cmp	r0, #49
 853 0096 FAD9     		bls	.L36
 167:Src/main.c    ****     tim4 = (TIM4->CNT)-30000;
 854              		.loc 1 167 0
 855 0098 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccFmTS3Q.s 			page 27


 856              	.LVL44:
 857 009c 0446     		mov	r4, r0
 858              	.LVL45:
 168:Src/main.c    ****     tim5 = -(TIM5->CNT)+30000;
 859              		.loc 1 168 0
 860 009e 284B     		ldr	r3, .L39+24
 861 00a0 5B6A     		ldr	r3, [r3, #36]
 169:Src/main.c    ****     tim4 = 10;
 862              		.loc 1 169 0
 863 00a2 284B     		ldr	r3, .L39+28
 864 00a4 5B6A     		ldr	r3, [r3, #36]
 865              	.LVL46:
 172:Src/main.c    ****     //TIM4->CNT = 30000;
 866              		.loc 1 172 0
 867 00a6 DFF8B880 		ldr	r8, .L39+56
 868 00aa 274D     		ldr	r5, .L39+32
 869 00ac 274E     		ldr	r6, .L39+36
 870 00ae 0096     		str	r6, [sp]
 871 00b0 0A20     		movs	r0, #10
 872              	.LVL47:
 873 00b2 0146     		mov	r1, r0
 874 00b4 4246     		mov	r2, r8
 875 00b6 2B46     		mov	r3, r5
 876 00b8 FFF7FEFF 		bl	updatePos
 877              	.LVL48:
 183:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 878              		.loc 1 183 0
 879 00bc D6E90001 		ldrd	r0, [r6]
 880 00c0 0022     		movs	r2, #0
 881 00c2 234B     		ldr	r3, .L39+40
 882 00c4 FFF7FEFF 		bl	__aeabi_dmul
 883              	.LVL49:
 884 00c8 0646     		mov	r6, r0
 885 00ca 0F46     		mov	r7, r1
 886 00cc D8E90001 		ldrd	r0, [r8]
 887 00d0 FFF7FEFF 		bl	__aeabi_d2iz
 888              	.LVL50:
 889 00d4 8046     		mov	r8, r0
 890 00d6 D5E90001 		ldrd	r0, [r5]
 891 00da FFF7FEFF 		bl	__aeabi_d2iz
 892              	.LVL51:
 893 00de 0546     		mov	r5, r0
 894 00e0 3046     		mov	r0, r6
 895 00e2 3946     		mov	r1, r7
 896 00e4 FFF7FEFF 		bl	__aeabi_d2iz
 897              	.LVL52:
 898 00e8 0090     		str	r0, [sp]
 899 00ea 03A8     		add	r0, sp, #12
 900 00ec 1949     		ldr	r1, .L39+44
 901 00ee 4246     		mov	r2, r8
 902 00f0 2B46     		mov	r3, r5
 903 00f2 FFF7FEFF 		bl	sprintf
 904              	.LVL53:
 184:Src/main.c    ****             sprintf(buffer, "\n%d / %d\n___________________", tim4, tim5);
 905              		.loc 1 184 0
 906 00f6 104D     		ldr	r5, .L39+16
 907 00f8 2846     		mov	r0, r5
ARM GAS  /tmp/ccFmTS3Q.s 			page 28


 908 00fa 03A9     		add	r1, sp, #12
 909 00fc 3222     		movs	r2, #50
 910 00fe 4FF0FF33 		mov	r3, #-1
 911 0102 FFF7FEFF 		bl	HAL_UART_Transmit
 912              	.LVL54:
 185:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 913              		.loc 1 185 0
 914 0106 0022     		movs	r2, #0
 915 0108 134B     		ldr	r3, .L39+48
 916 010a CDE90023 		strd	r2, [sp]
 917 010e 03A8     		add	r0, sp, #12
 918 0110 1249     		ldr	r1, .L39+52
 919 0112 FFF7FEFF 		bl	sprintf
 920              	.LVL55:
 186:Src/main.c    ****             debug = 0;
 921              		.loc 1 186 0
 922 0116 2846     		mov	r0, r5
 923 0118 03A9     		add	r1, sp, #12
 924 011a 3222     		movs	r2, #50
 925 011c 4FF0FF33 		mov	r3, #-1
 926 0120 FFF7FEFF 		bl	HAL_UART_Transmit
 927              	.LVL56:
 928 0124 AFE7     		b	.L37
 929              	.L40:
 930 0126 00BF     		.align	2
 931              	.L39:
 932 0128 00000000 		.word	htim2
 933 012c 00000000 		.word	htim3
 934 0130 00000000 		.word	htim4
 935 0134 00000000 		.word	htim5
 936 0138 00000000 		.word	huart2
 937 013c 00000000 		.word	.LC0
 938 0140 00080040 		.word	1073743872
 939 0144 000C0040 		.word	1073744896
 940 0148 00000000 		.word	.LANCHOR1
 941 014c 00000000 		.word	.LANCHOR2
 942 0150 00408F40 		.word	1083129856
 943 0154 1C000000 		.word	.LC1
 944 0158 00002440 		.word	1076101120
 945 015c 38000000 		.word	.LC2
 946 0160 00000000 		.word	.LANCHOR0
 947              		.cfi_endproc
 948              	.LFE123:
 950              		.section	.text.moteurGauche,"ax",%progbits
 951              		.align	2
 952              		.global	moteurGauche
 953              		.thumb
 954              		.thumb_func
 956              	moteurGauche:
 957              	.LFB132:
 522:Src/main.c    **** }
 523:Src/main.c    **** 
 524:Src/main.c    **** 
 525:Src/main.c    **** void moteurGauche(int PWM)
 526:Src/main.c    **** {
 958              		.loc 1 526 0
 959              		.cfi_startproc
ARM GAS  /tmp/ccFmTS3Q.s 			page 29


 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              	.LVL57:
 963 0000 10B5     		push	{r4, lr}
 964              	.LCFI22:
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 4, -8
 967              		.cfi_offset 14, -4
 527:Src/main.c    ****     if(PWM == abs(PWM))
 968              		.loc 1 527 0
 969 0002 80EAE074 		eor	r4, r0, r0, asr #31
 970 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 971 000a 8442     		cmp	r4, r0
 972 000c 05D1     		bne	.L42
 528:Src/main.c    ****     {
 529:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_SET);
 973              		.loc 1 529 0
 974 000e 0748     		ldr	r0, .L45
 975              	.LVL58:
 976 0010 2021     		movs	r1, #32
 977 0012 0122     		movs	r2, #1
 978 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 979              	.LVL59:
 980 0018 04E0     		b	.L43
 981              	.LVL60:
 982              	.L42:
 530:Src/main.c    ****     }
 531:Src/main.c    ****     else
 532:Src/main.c    ****     {
 533:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 983              		.loc 1 533 0
 984 001a 0448     		ldr	r0, .L45
 985              	.LVL61:
 986 001c 2021     		movs	r1, #32
 987 001e 0022     		movs	r2, #0
 988 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 989              	.LVL62:
 990              	.L43:
 534:Src/main.c    ****     }
 535:Src/main.c    ****     htim3.Instance->CCR1 = abs(PWM);
 991              		.loc 1 535 0
 992 0024 024B     		ldr	r3, .L45+4
 993 0026 1B68     		ldr	r3, [r3]
 994 0028 5C63     		str	r4, [r3, #52]
 995 002a 10BD     		pop	{r4, pc}
 996              	.L46:
 997              		.align	2
 998              	.L45:
 999 002c 00040240 		.word	1073873920
 1000 0030 00000000 		.word	htim3
 1001              		.cfi_endproc
 1002              	.LFE132:
 1004              		.section	.text.Error_Handler,"ax",%progbits
 1005              		.align	2
 1006              		.global	Error_Handler
 1007              		.thumb
 1008              		.thumb_func
ARM GAS  /tmp/ccFmTS3Q.s 			page 30


 1010              	Error_Handler:
 1011              	.LFB133:
 536:Src/main.c    **** }
 537:Src/main.c    **** 
 538:Src/main.c    **** /* USER CODE END 4 */
 539:Src/main.c    **** 
 540:Src/main.c    **** /**
 541:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 542:Src/main.c    ****   * @retval None
 543:Src/main.c    ****   */
 544:Src/main.c    **** void Error_Handler(void)
 545:Src/main.c    **** {
 1012              		.loc 1 545 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 0
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016              		@ link register save eliminated.
 1017 0000 7047     		bx	lr
 1018              		.cfi_endproc
 1019              	.LFE133:
 1021              		.global	angle
 1022              		.global	positionY
 1023              		.global	positionX
 1024              		.comm	huart2,64,4
 1025              		.comm	htim5,60,4
 1026              		.comm	htim4,60,4
 1027              		.comm	htim3,60,4
 1028              		.comm	htim2,60,4
 1029 0002 00BF     		.section	.bss.positionX,"aw",%nobits
 1030              		.align	3
 1031              		.set	.LANCHOR0,. + 0
 1034              	positionX:
 1035 0000 00000000 		.space	8
 1035      00000000 
 1036              		.section	.bss.positionY,"aw",%nobits
 1037              		.align	3
 1038              		.set	.LANCHOR1,. + 0
 1041              	positionY:
 1042 0000 00000000 		.space	8
 1042      00000000 
 1043              		.section	.rodata.str1.4,"aMS",%progbits,1
 1044              		.align	2
 1045              	.LC0:
 1046 0000 41747474 		.ascii	"Atttenzion, zest barti !\000"
 1046      656E7A69 
 1046      6F6E2C20 
 1046      7A657374 
 1046      20626172 
 1047 0019 000000   		.space	3
 1048              	.LC1:
 1049 001c 0A256420 		.ascii	"\012%d / %d / %d\012_____________\000"
 1049      2F202564 
 1049      202F2025 
 1049      640A5F5F 
 1049      5F5F5F5F 
 1050              	.LC2:
 1051 0038 0A256420 		.ascii	"\012%d / %d\012___________________\000"
ARM GAS  /tmp/ccFmTS3Q.s 			page 31


 1051      2F202564 
 1051      0A5F5F5F 
 1051      5F5F5F5F 
 1051      5F5F5F5F 
 1052              		.section	.bss.angle,"aw",%nobits
 1053              		.align	3
 1054              		.set	.LANCHOR2,. + 0
 1057              	angle:
 1058 0000 00000000 		.space	8
 1058      00000000 
 1059              		.text
 1060              	.Letext0:
 1061              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1062              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1063              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1064              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1065              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1066              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1067              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1068              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1069              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1070              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1071              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1072              		.file 13 "<built-in>"
 1073              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 1074              		.file 15 "Inc/main.h"
 1075              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1076              		.file 17 "Inc/assert.h"
 1077              		.file 18 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccFmTS3Q.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFmTS3Q.s:21     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccFmTS3Q.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccFmTS3Q.s:160    .text.MX_GPIO_Init:00000000000000bc $d
     /tmp/ccFmTS3Q.s:169    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccFmTS3Q.s:173    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccFmTS3Q.s:212    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccFmTS3Q.s:218    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccFmTS3Q.s:222    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccFmTS3Q.s:303    .text.MX_TIM2_Init:000000000000005c $d
                            *COM*:000000000000003c htim2
     /tmp/ccFmTS3Q.s:308    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccFmTS3Q.s:312    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccFmTS3Q.s:393    .text.MX_TIM3_Init:000000000000005c $d
                            *COM*:000000000000003c htim3
     /tmp/ccFmTS3Q.s:399    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccFmTS3Q.s:403    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccFmTS3Q.s:473    .text.MX_TIM4_Init:000000000000004c $d
                            *COM*:000000000000003c htim4
     /tmp/ccFmTS3Q.s:479    .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccFmTS3Q.s:483    .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccFmTS3Q.s:553    .text.MX_TIM5_Init:000000000000004c $d
                            *COM*:000000000000003c htim5
     /tmp/ccFmTS3Q.s:559    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFmTS3Q.s:564    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFmTS3Q.s:678    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccFmTS3Q.s:684    .text.moteurDroit:0000000000000000 $t
     /tmp/ccFmTS3Q.s:689    .text.moteurDroit:0000000000000000 moteurDroit
     /tmp/ccFmTS3Q.s:732    .text.moteurDroit:0000000000000030 $d
     /tmp/ccFmTS3Q.s:740    .text.main:0000000000000000 $t
     /tmp/ccFmTS3Q.s:745    .text.main:0000000000000000 main
     /tmp/ccFmTS3Q.s:932    .text.main:0000000000000128 $d
     /tmp/ccFmTS3Q.s:951    .text.moteurGauche:0000000000000000 $t
     /tmp/ccFmTS3Q.s:956    .text.moteurGauche:0000000000000000 moteurGauche
     /tmp/ccFmTS3Q.s:999    .text.moteurGauche:000000000000002c $d
     /tmp/ccFmTS3Q.s:1005   .text.Error_Handler:0000000000000000 $t
     /tmp/ccFmTS3Q.s:1010   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccFmTS3Q.s:1057   .bss.angle:0000000000000000 angle
     /tmp/ccFmTS3Q.s:1041   .bss.positionY:0000000000000000 positionY
     /tmp/ccFmTS3Q.s:1034   .bss.positionX:0000000000000000 positionX
     /tmp/ccFmTS3Q.s:1030   .bss.positionX:0000000000000000 $d
     /tmp/ccFmTS3Q.s:1037   .bss.positionY:0000000000000000 $d
     /tmp/ccFmTS3Q.s:1044   .rodata.str1.4:0000000000000000 $d
     /tmp/ccFmTS3Q.s:1053   .bss.angle:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_TIM_Encoder_Init
ARM GAS  /tmp/ccFmTS3Q.s 			page 33


HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_dmul
__aeabi_d2iz
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_Encoder_Start
HAL_UART_Transmit
HAL_GetTick
updatePos
sprintf
