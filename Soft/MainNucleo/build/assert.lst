ARM GAS  /tmp/ccV43cAp.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"assert.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	__aeabi_f2d
  21              		.global	__aeabi_ddiv
  22              		.global	__aeabi_dadd
  23              		.global	__aeabi_dmul
  24              		.section	.text.updatePos,"ax",%progbits
  25              		.align	2
  26              		.global	updatePos
  27              		.thumb
  28              		.thumb_func
  30              	updatePos:
  31              	.LFB123:
  32              		.file 1 "Src/assert.c"
   1:Src/assert.c  **** #include "assert.h"
   2:Src/assert.c  **** 
   3:Src/assert.c  **** #define Kp_Droite 10
   4:Src/assert.c  **** #define Ki_Droite 0
   5:Src/assert.c  **** #define Kd_Droite 0
   6:Src/assert.c  **** 
   7:Src/assert.c  **** 
   8:Src/assert.c  **** #define Kp_Gauche 10
   9:Src/assert.c  **** #define Ki_Gauche 0
  10:Src/assert.c  **** #define Kd_Gauche 0
  11:Src/assert.c  **** 
  12:Src/assert.c  **** #define Kp_Angle 1000
  13:Src/assert.c  **** 
  14:Src/assert.c  **** /*
  15:Src/assert.c  **** //Homo  90deg = 1.85     11cm = 100
  16:Src/assert.c  **** char consignes[] = {'M', 'A',  'M',  'A',  'M',   'E'};
  17:Src/assert.c  **** double val1[] = {   300, -1.7, 200, -1.7,  200,  0  };
  18:Src/assert.c  **** double val2[] = {   0,   0,     1 ,   0,    0,    0 };
  19:Src/assert.c  **** */
  20:Src/assert.c  **** 
  21:Src/assert.c  **** //cote jaune
  22:Src/assert.c  **** char consignes[] = {'M',	'A',	'M',	'A',	'M',	'M',	'A',	'M',	'A',	'B',	'M',	'B',	'M',	'A',	'S',	'M',
  23:Src/assert.c  **** double val1[] = {	600,	1.75,	300,	-1.75,	200,	1300,	1.75,	200,	-1.75,	2500,	260,	1500,	350,	1.75,	0
  24:Src/assert.c  **** double val2[] = {	0,		0,		0,		0,		1,		0,		0 ,		0,		0,		0,		0,		0,		0,		0,		0,		0,		0,		1,		0,		0,		
  25:Src/assert.c  **** 
  26:Src/assert.c  **** /*
ARM GAS  /tmp/ccV43cAp.s 			page 2


  27:Src/assert.c  **** //cote violet
  28:Src/assert.c  **** char consignes[] = {'M',	'A',	'M',	'A',	'M',	'M',	'A',	'M',	'A',	'B',	'M',	'B',	'M',	'A',	'S',	'M',
  29:Src/assert.c  **** double val1[] = {	600,	-1.75,	300,	1.75,	200,	1300,	-1.75,	200,	1.75,	1000,	260,	1500,	350,	-1.75,	
  30:Src/assert.c  **** double val2[] = {	0,		0,		0,		0,		1,		0,		0,		0,		0,		0,		0,		0,		0,		0,		0,		0,		0,		1,		0,		0,		0
  31:Src/assert.c  **** */
  32:Src/assert.c  **** 
  33:Src/assert.c  **** 
  34:Src/assert.c  **** 
  35:Src/assert.c  **** /*
  36:Src/assert.c  **** //test angles
  37:Src/assert.c  **** char consignes[] = {'A', 'T', 'A',  'T',  'A', 'T', 'A', 'E'};
  38:Src/assert.c  **** double val1[] = {    1.75, 1000, 1.75, 1000,  -1.75, 1000, -1.75, 0 };
  39:Src/assert.c  **** double val2[] = {    0,   0,   0 ,   0,   0,   0 , 0, 0, 0};
  40:Src/assert.c  **** */
  41:Src/assert.c  **** /*//test servo
  42:Src/assert.c  **** char consignes[] = {'B', 'T',  'B',  'T',  'B',   'E'};
  43:Src/assert.c  **** double val1[] = {   1000, 1000, 1500, 1000,  2500,  0  };
  44:Src/assert.c  **** double val2[] = {   0,   0,     0 ,   0,    0,    0 };
  45:Src/assert.c  **** */
  46:Src/assert.c  **** int endOfMvt = 0;
  47:Src/assert.c  **** 
  48:Src/assert.c  **** 
  49:Src/assert.c  **** void updatePos(int tickRight, int tickGauche, double* positionX, double* positionY, double* angle)
  50:Src/assert.c  **** { 
  33              		.loc 1 50 0
  34              		.cfi_startproc
  35              		@ args = 4, pretend = 0, frame = 0
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              	.LVL0:
  38 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 32
  41              		.cfi_offset 4, -32
  42              		.cfi_offset 5, -28
  43              		.cfi_offset 6, -24
  44              		.cfi_offset 7, -20
  45              		.cfi_offset 8, -16
  46              		.cfi_offset 9, -12
  47              		.cfi_offset 10, -8
  48              		.cfi_offset 14, -4
  49 0004 2DED028B 		fstmfdd	sp!, {d8}
  50              	.LCFI1:
  51              		.cfi_def_cfa_offset 40
  52              		.cfi_offset 80, -40
  53              		.cfi_offset 81, -36
  54 0008 8046     		mov	r8, r0
  55 000a 8A46     		mov	r10, r1
  56 000c 1546     		mov	r5, r2
  57 000e 1C46     		mov	r4, r3
  58 0010 DDF82890 		ldr	r9, [sp, #40]
  51:Src/assert.c  ****   // instant angle and distance
  52:Src/assert.c  ****   double dDist = (tickRight + tickGauche) / 2.0f;
  59              		.loc 1 52 0
  60 0014 4318     		adds	r3, r0, r1
  61              	.LVL1:
  62 0016 07EE903A 		fmsr	s15, r3	@ int
  63 001a F8EEE77A 		fsitos	s15, s15
ARM GAS  /tmp/ccV43cAp.s 			page 3


  64 001e B6EE008A 		fconsts	s16, #96
  65 0022 67EE887A 		fmuls	s15, s15, s16
  66 0026 17EE900A 		fmrs	r0, s15
  67              	.LVL2:
  68 002a FFF7FEFF 		bl	__aeabi_f2d
  69              	.LVL3:
  70 002e 0646     		mov	r6, r0
  71 0030 0F46     		mov	r7, r1
  72              	.LVL4:
  53:Src/assert.c  ****   double dTheta = (tickRight - tickGauche) / 2.0f;
  73              		.loc 1 53 0
  74 0032 CAEB0808 		rsb	r8, r10, r8
  75              	.LVL5:
  76 0036 07EE908A 		fmsr	s15, r8	@ int
  77 003a F8EEE77A 		fsitos	s15, s15
  78 003e 67EE887A 		fmuls	s15, s15, s16
  79 0042 17EE900A 		fmrs	r0, s15
  80 0046 FFF7FEFF 		bl	__aeabi_f2d
  81              	.LVL6:
  54:Src/assert.c  **** 
  55:Src/assert.c  ****   // new angle
  56:Src/assert.c  ****   *angle += dTheta / ((AXISLENGTH*TICKSPERMM)/2);
  82              		.loc 1 56 0
  83 004a 24A3     		adr	r3, .L3+4
  84 004c D3E90023 		ldrd	r2, [r3]
  85 0050 FFF7FEFF 		bl	__aeabi_ddiv
  86              	.LVL7:
  87 0054 D9E90023 		ldrd	r2, [r9]
  88 0058 FFF7FEFF 		bl	__aeabi_dadd
  89              	.LVL8:
  90 005c 41EC180B 		fmdrr	d8, r0, r1
  91 0060 C9E90001 		strd	r0, [r9]
  57:Src/assert.c  **** 
  58:Src/assert.c  ****   // New X Y
  59:Src/assert.c  ****   double dX = dDist * cos(*angle);
  92              		.loc 1 59 0
  93 0064 41EC100B 		fmdrr	d0, r0, r1
  94 0068 FFF7FEFF 		bl	cos
  95              	.LVL9:
  96 006c 51EC100B 		fmrrd	r0, r1, d0
  97 0070 3246     		mov	r2, r6
  98 0072 3B46     		mov	r3, r7
  99 0074 FFF7FEFF 		bl	__aeabi_dmul
 100              	.LVL10:
 101 0078 8046     		mov	r8, r0
 102 007a 8946     		mov	r9, r1
 103              	.LVL11:
  60:Src/assert.c  ****   double dY = dDist * sin(*angle);
 104              		.loc 1 60 0
 105 007c B0EE480A 		fcpys	s0, s16
 106 0080 F0EE680A 		fcpys	s1, s17
 107 0084 FFF7FEFF 		bl	sin
 108              	.LVL12:
 109 0088 51EC100B 		fmrrd	r0, r1, d0
 110 008c 3246     		mov	r2, r6
 111 008e 3B46     		mov	r3, r7
 112 0090 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccV43cAp.s 			page 4


 113              	.LVL13:
 114 0094 0646     		mov	r6, r0
 115              	.LVL14:
 116 0096 0F46     		mov	r7, r1
 117              	.LVL15:
  61:Src/assert.c  ****   *positionX += dX / TICKSPERMM;
 118              		.loc 1 61 0
 119 0098 4046     		mov	r0, r8
 120 009a 4946     		mov	r1, r9
 121 009c 0022     		movs	r2, #0
 122 009e 0E4B     		ldr	r3, .L3
 123 00a0 FFF7FEFF 		bl	__aeabi_ddiv
 124              	.LVL16:
 125 00a4 0246     		mov	r2, r0
 126 00a6 0B46     		mov	r3, r1
 127 00a8 D5E90001 		ldrd	r0, [r5]
 128 00ac FFF7FEFF 		bl	__aeabi_dadd
 129              	.LVL17:
 130 00b0 C5E90001 		strd	r0, [r5]
  62:Src/assert.c  ****   *positionY += dY / TICKSPERMM;
 131              		.loc 1 62 0
 132 00b4 3046     		mov	r0, r6
 133 00b6 3946     		mov	r1, r7
 134 00b8 0022     		movs	r2, #0
 135 00ba 074B     		ldr	r3, .L3
 136 00bc FFF7FEFF 		bl	__aeabi_ddiv
 137              	.LVL18:
 138 00c0 0246     		mov	r2, r0
 139 00c2 0B46     		mov	r3, r1
 140 00c4 D4E90001 		ldrd	r0, [r4]
 141 00c8 FFF7FEFF 		bl	__aeabi_dadd
 142              	.LVL19:
 143 00cc C4E90001 		strd	r0, [r4]
  63:Src/assert.c  **** }
 144              		.loc 1 63 0
 145 00d0 BDEC028B 		fldmfdd	sp!, {d8}
 146              	.LCFI2:
 147              		.cfi_restore 80
 148              		.cfi_restore 81
 149              		.cfi_def_cfa_offset 32
 150 00d4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 151              	.LVL20:
 152              	.L4:
 153              		.align	3
 154              	.L3:
 155 00d8 00003440 		.word	1077149696
 156 00dc 00000000 		.word	0
 157 00e0 00C89940 		.word	1083820032
 158              		.cfi_endproc
 159              	.LFE123:
 161              		.global	__aeabi_dcmpgt
 162              		.global	__aeabi_dcmplt
 163              		.section	.text.turn,"ax",%progbits
 164              		.align	2
 165              		.global	turn
 166              		.thumb
 167              		.thumb_func
ARM GAS  /tmp/ccV43cAp.s 			page 5


 169              	turn:
 170              	.LFB125:
  64:Src/assert.c  **** 
  65:Src/assert.c  **** 
  66:Src/assert.c  **** 
  67:Src/assert.c  **** void stateMachine(int* consigneDroit, int* consigneGauche, double positionX, double positionY, doub
  68:Src/assert.c  **** {
  69:Src/assert.c  ****     static int state = 0;
  70:Src/assert.c  ****     
  71:Src/assert.c  ****     if (endOfMvt == 1)
  72:Src/assert.c  ****     {
  73:Src/assert.c  ****         endOfMvt = 0;
  74:Src/assert.c  ****         state += 1;
  75:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Fin de l'action\n", sizeof("Fin de l'action\n"), HAL_MAX_DELAY)
  76:Src/assert.c  ****         //resetPos();
  77:Src/assert.c  ****     }
  78:Src/assert.c  ****     
  79:Src/assert.c  ****     switch(consignes[state])
  80:Src/assert.c  ****     {
  81:Src/assert.c  ****       case 'M':
  82:Src/assert.c  ****         move(consigneDroit, consigneGauche, positionX, positionY, angle, val1[state], val2[state], 
  83:Src/assert.c  ****         //char buffer[50] = "";
  84:Src/assert.c  **** 		//sprintf(buffer, " move %d / %d blbl\n",(int)val1[state], (int)val2[state]);
  85:Src/assert.c  **** 		//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
  86:Src/assert.c  ****         break;
  87:Src/assert.c  ****         
  88:Src/assert.c  ****       case 'A':
  89:Src/assert.c  **** 		turn(consigneDroit, consigneGauche, positionX, positionY, angle, val1[state], val2[state], tim4, 
  90:Src/assert.c  **** 		break;
  91:Src/assert.c  ****         
  92:Src/assert.c  ****       case 'T':
  93:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Let's wait !\n", sizeof("Let's wait !\n"), HAL_MAX_DELAY);
  94:Src/assert.c  ****         HAL_Delay(val1[state]);
  95:Src/assert.c  ****         endOfMvt = 1;
  96:Src/assert.c  **** 		break;
  97:Src/assert.c  ****         
  98:Src/assert.c  ****       case 'S': //Suck
  99:Src/assert.c  ****         HAL_GPIO_WritePin(VaccumPump1_GPIO_Port, VaccumPump1_Pin, GPIO_PIN_SET);
 100:Src/assert.c  ****         endOfMvt = 1;
 101:Src/assert.c  ****         break;
 102:Src/assert.c  ****       
 103:Src/assert.c  ****       case 'R': //release
 104:Src/assert.c  ****         HAL_GPIO_WritePin(VaccumPump1_GPIO_Port, VaccumPump1_Pin, GPIO_PIN_RESET);
 105:Src/assert.c  ****         endOfMvt = 1;
 106:Src/assert.c  ****         break;
 107:Src/assert.c  ****         
 108:Src/assert.c  ****       case 'B'://Baffe sur l'accelerateur avec le servo
 109:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Cerveau\n", sizeof("Cerveau\n"), HAL_MAX_DELAY);
 110:Src/assert.c  ****         servoPos(val1[state]);
 111:Src/assert.c  ****         endOfMvt = 1;
 112:Src/assert.c  ****         break;
 113:Src/assert.c  **** 
 114:Src/assert.c  ****       case 'E':  //end of the match
 115:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Fin de match\n", sizeof("Fin de match\n"), HAL_MAX_DELAY);
 116:Src/assert.c  ****         while(1){}
 117:Src/assert.c  ****         break;
 118:Src/assert.c  **** }
ARM GAS  /tmp/ccV43cAp.s 			page 6


 119:Src/assert.c  **** }
 120:Src/assert.c  **** 
 121:Src/assert.c  **** 
 122:Src/assert.c  **** void turn(int* consigneDroit, int* consigneGauche, double positionX, double positionY, double angle
 123:Src/assert.c  **** {
 171              		.loc 1 123 0
 172              		.cfi_startproc
 173              		@ args = 64, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL21:
 176 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 177              	.LCFI3:
 178              		.cfi_def_cfa_offset 32
 179              		.cfi_offset 3, -32
 180              		.cfi_offset 4, -28
 181              		.cfi_offset 5, -24
 182              		.cfi_offset 6, -20
 183              		.cfi_offset 7, -16
 184              		.cfi_offset 8, -12
 185              		.cfi_offset 9, -8
 186              		.cfi_offset 14, -4
 187 0004 8046     		mov	r8, r0
 188 0006 8946     		mov	r9, r1
 189 0008 57EC126B 		fmrrd	r6, r7, d2
 190 000c 55EC134B 		fmrrd	r4, r5, d3
 124:Src/assert.c  **** 	//char buffer[50] = "";
 125:Src/assert.c  **** 	//sprintf(buffer, "%g / %g / %g\n",targetX, angle, absPerso(angle - targetX));
 126:Src/assert.c  **** 	//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 127:Src/assert.c  **** 	
 128:Src/assert.c  **** 	static double angleInit = 0.0;
 129:Src/assert.c  ****     
 130:Src/assert.c  ****     static int firstLoopPass = 1;
 131:Src/assert.c  ****     
 132:Src/assert.c  ****     if (firstLoopPass == 1)
 191              		.loc 1 132 0
 192 0010 294B     		ldr	r3, .L21
 193              	.LVL22:
 194 0012 1B68     		ldr	r3, [r3]
 195 0014 012B     		cmp	r3, #1
 196 0016 05D1     		bne	.L6
 133:Src/assert.c  ****     {
 134:Src/assert.c  ****         angleInit = angle;
 197              		.loc 1 134 0
 198 0018 284B     		ldr	r3, .L21+4
 199 001a 83ED002B 		fstd	d2, [r3]
 135:Src/assert.c  ****         firstLoopPass = 0;
 200              		.loc 1 135 0
 201 001e 0022     		movs	r2, #0
 202              	.LVL23:
 203 0020 254B     		ldr	r3, .L21
 204 0022 1A60     		str	r2, [r3]
 205              	.LVL24:
 206              	.L6:
 136:Src/assert.c  ****     }
 137:Src/assert.c  ****     
 138:Src/assert.c  **** 	
 139:Src/assert.c  **** 	if (targetX > 0 /*absPerso(angle) < absPerso(targetX)*/)
ARM GAS  /tmp/ccV43cAp.s 			page 7


 207              		.loc 1 139 0
 208 0024 2046     		mov	r0, r4
 209              	.LVL25:
 210 0026 2946     		mov	r1, r5
 211              	.LVL26:
 212 0028 0022     		movs	r2, #0
 213 002a 0023     		movs	r3, #0
 214 002c FFF7FEFF 		bl	__aeabi_dcmpgt
 215              	.LVL27:
 216 0030 08B3     		cbz	r0, .L17
 140:Src/assert.c  ****     {
 141:Src/assert.c  **** 		if(targetX + angleInit > angle)
 217              		.loc 1 141 0
 218 0032 2046     		mov	r0, r4
 219 0034 2946     		mov	r1, r5
 220 0036 214B     		ldr	r3, .L21+4
 221 0038 D3E90023 		ldrd	r2, [r3]
 222 003c FFF7FEFF 		bl	__aeabi_dadd
 223              	.LVL28:
 224 0040 3246     		mov	r2, r6
 225 0042 3B46     		mov	r3, r7
 226 0044 FFF7FEFF 		bl	__aeabi_dcmpgt
 227              	.LVL29:
 228 0048 48B1     		cbz	r0, .L18
 142:Src/assert.c  **** 		{
 143:Src/assert.c  **** 			*consigneGauche = 800;
 229              		.loc 1 143 0
 230 004a 4FF44873 		mov	r3, #800
 231 004e C9F80030 		str	r3, [r9]
 144:Src/assert.c  **** 			*consigneDroit = -800;
 232              		.loc 1 144 0
 233 0052 A3F5C863 		sub	r3, r3, #1600
 234 0056 C8F80030 		str	r3, [r8]
 235 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 236              	.LVL30:
 237              	.L18:
 145:Src/assert.c  **** 		}
 146:Src/assert.c  **** 		else
 147:Src/assert.c  **** 		{
 148:Src/assert.c  **** 			*consigneGauche = 0;
 238              		.loc 1 148 0
 239 005e 0023     		movs	r3, #0
 240 0060 C9F80030 		str	r3, [r9]
 149:Src/assert.c  **** 			*consigneDroit = 0;
 241              		.loc 1 149 0
 242 0064 C8F80030 		str	r3, [r8]
 150:Src/assert.c  **** 			endOfMvt = 1;
 243              		.loc 1 150 0
 244 0068 0123     		movs	r3, #1
 245 006a 154A     		ldr	r2, .L21+8
 246 006c 1360     		str	r3, [r2]
 151:Src/assert.c  **** 			firstLoopPass = 1;
 247              		.loc 1 151 0
 248 006e 124A     		ldr	r2, .L21
 249 0070 1360     		str	r3, [r2]
 250 0072 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 251              	.LVL31:
ARM GAS  /tmp/ccV43cAp.s 			page 8


 252              	.L17:
 152:Src/assert.c  **** 		}
 153:Src/assert.c  **** 	}
 154:Src/assert.c  **** 	else
 155:Src/assert.c  **** 	{
 156:Src/assert.c  **** 		if(targetX + angleInit < angle)
 253              		.loc 1 156 0
 254 0076 2046     		mov	r0, r4
 255 0078 2946     		mov	r1, r5
 256 007a 104B     		ldr	r3, .L21+4
 257 007c D3E90023 		ldrd	r2, [r3]
 258 0080 FFF7FEFF 		bl	__aeabi_dadd
 259              	.LVL32:
 260 0084 3246     		mov	r2, r6
 261 0086 3B46     		mov	r3, r7
 262 0088 FFF7FEFF 		bl	__aeabi_dcmplt
 263              	.LVL33:
 264 008c 40B1     		cbz	r0, .L19
 157:Src/assert.c  **** 		{
 158:Src/assert.c  **** 			*consigneGauche = -800;
 265              		.loc 1 158 0
 266 008e 0D4B     		ldr	r3, .L21+12
 267 0090 C9F80030 		str	r3, [r9]
 159:Src/assert.c  **** 			*consigneDroit = 800;
 268              		.loc 1 159 0
 269 0094 4FF44873 		mov	r3, #800
 270 0098 C8F80030 		str	r3, [r8]
 271 009c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 272              	.LVL34:
 273              	.L19:
 160:Src/assert.c  **** 			}
 161:Src/assert.c  **** 		else
 162:Src/assert.c  **** 		{
 163:Src/assert.c  **** 			*consigneGauche = 0;
 274              		.loc 1 163 0
 275 00a0 0023     		movs	r3, #0
 276 00a2 C9F80030 		str	r3, [r9]
 164:Src/assert.c  **** 			*consigneDroit = 0;
 277              		.loc 1 164 0
 278 00a6 C8F80030 		str	r3, [r8]
 165:Src/assert.c  **** 			endOfMvt = 1;
 279              		.loc 1 165 0
 280 00aa 0123     		movs	r3, #1
 281 00ac 044A     		ldr	r2, .L21+8
 282 00ae 1360     		str	r3, [r2]
 166:Src/assert.c  **** 			firstLoopPass = 1;
 283              		.loc 1 166 0
 284 00b0 014A     		ldr	r2, .L21
 285 00b2 1360     		str	r3, [r2]
 286 00b4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 287              	.LVL35:
 288              	.L22:
 289              		.align	2
 290              	.L21:
 291 00b8 00000000 		.word	.LANCHOR0
 292 00bc 00000000 		.word	.LANCHOR1
 293 00c0 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccV43cAp.s 			page 9


 294 00c4 E0FCFFFF 		.word	-800
 295              		.cfi_endproc
 296              	.LFE125:
 298              		.global	__aeabi_dsub
 299              		.global	__aeabi_dcmpeq
 300              		.global	__aeabi_i2d
 301              		.global	__aeabi_d2iz
 302              		.section	.text.move,"ax",%progbits
 303              		.align	2
 304              		.global	move
 305              		.thumb
 306              		.thumb_func
 308              	move:
 309              	.LFB126:
 167:Src/assert.c  **** 		}
 168:Src/assert.c  ****     }
 169:Src/assert.c  **** }
 170:Src/assert.c  **** 
 171:Src/assert.c  **** 
 172:Src/assert.c  **** void move(int* consigneDroit, int* consigneGauche, double positionX, double positionY, double angle
 173:Src/assert.c  **** {
 310              		.loc 1 173 0
 311              		.cfi_startproc
 312              		@ args = 64, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              	.LVL36:
 315 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 316              	.LCFI4:
 317              		.cfi_def_cfa_offset 40
 318              		.cfi_offset 3, -40
 319              		.cfi_offset 4, -36
 320              		.cfi_offset 5, -32
 321              		.cfi_offset 6, -28
 322              		.cfi_offset 7, -24
 323              		.cfi_offset 8, -20
 324              		.cfi_offset 9, -16
 325              		.cfi_offset 10, -12
 326              		.cfi_offset 11, -8
 327              		.cfi_offset 14, -4
 328 0004 2DED048B 		fstmfdd	sp!, {d8, d9}
 329              	.LCFI5:
 330              		.cfi_def_cfa_offset 56
 331              		.cfi_offset 80, -56
 332              		.cfi_offset 81, -52
 333              		.cfi_offset 82, -48
 334              		.cfi_offset 83, -44
 335 0008 8046     		mov	r8, r0
 336 000a 0D46     		mov	r5, r1
 337 000c 51EC100B 		fmrrd	r0, r1, d0
 338              	.LVL37:
 339 0010 5BEC11AB 		fmrrd	r10, fp, d1
 340 0014 B0EE428A 		fcpys	s16, s4
 341 0018 F0EE628A 		fcpys	s17, s5
 342 001c B0EE449A 		fcpys	s18, s8
 343 0020 F0EE649A 		fcpys	s19, s9
 344 0024 9146     		mov	r9, r2
 345 0026 1C46     		mov	r4, r3
ARM GAS  /tmp/ccV43cAp.s 			page 10


 174:Src/assert.c  ****     static int isMvtDone = 0;
 175:Src/assert.c  ****     static int oldErrorDroite = 0;
 176:Src/assert.c  ****     static int errorSumDroite = 0;
 177:Src/assert.c  ****     static int oldErrorGauche = 0;
 178:Src/assert.c  ****     static int errorSumGauche = 0;
 179:Src/assert.c  ****     static double angleInit = 0.0;
 180:Src/assert.c  ****     static double positionXInit = 0.0;
 181:Src/assert.c  ****     static double positionYInit = 0.0;
 182:Src/assert.c  ****     static double distanceTravelled = 0.0;
 183:Src/assert.c  ****     static double distanceTarget = 0.0;
 184:Src/assert.c  ****     
 185:Src/assert.c  ****     static int firstLoopPass = 1;
 186:Src/assert.c  ****     
 187:Src/assert.c  ****     if (firstLoopPass == 1)
 346              		.loc 1 187 0
 347 0028 524B     		ldr	r3, .L36
 348              	.LVL38:
 349 002a 1B68     		ldr	r3, [r3]
 350 002c 012B     		cmp	r3, #1
 351 002e 13D1     		bne	.L24
 188:Src/assert.c  ****     {
 189:Src/assert.c  ****         angleInit = angle;
 352              		.loc 1 189 0
 353 0030 514B     		ldr	r3, .L36+4
 354 0032 83ED002B 		fstd	d2, [r3]
 190:Src/assert.c  ****         positionXInit = positionX;
 355              		.loc 1 190 0
 356 0036 514B     		ldr	r3, .L36+8
 357 0038 83ED000B 		fstd	d0, [r3]
 191:Src/assert.c  ****         positionYInit = positionY;
 358              		.loc 1 191 0
 359 003c 504B     		ldr	r3, .L36+12
 360 003e 83ED001B 		fstd	d1, [r3]
 192:Src/assert.c  ****         distanceTarget = targetX;//sqrt((targetX)*(targetX) + (targetY)*(targetY));
 361              		.loc 1 192 0
 362 0042 504B     		ldr	r3, .L36+16
 363 0044 83ED003B 		fstd	d3, [r3]
 193:Src/assert.c  ****         //distanceTarget = sqrt((targetX - positionX)*(targetX - positionX) + (targetY- positionY)*
 194:Src/assert.c  ****         firstLoopPass = 0;
 364              		.loc 1 194 0
 365 0048 0022     		movs	r2, #0
 366              	.LVL39:
 367 004a 4A4B     		ldr	r3, .L36
 368 004c 1A60     		str	r2, [r3]
 195:Src/assert.c  ****         distanceTravelled = 0.0;
 369              		.loc 1 195 0
 370 004e 0026     		movs	r6, #0
 371 0050 0027     		movs	r7, #0
 372 0052 4D4B     		ldr	r3, .L36+20
 373 0054 C3E90067 		strd	r6, [r3]
 374              	.LVL40:
 375              	.L24:
 196:Src/assert.c  ****     }
 197:Src/assert.c  ****     
 198:Src/assert.c  ****     distanceTravelled = sqrt((positionX - positionXInit)*(positionX - positionXInit) + (positionY- 
 376              		.loc 1 198 0
 377 0058 484B     		ldr	r3, .L36+8
ARM GAS  /tmp/ccV43cAp.s 			page 11


 378 005a D3E90023 		ldrd	r2, [r3]
 379 005e FFF7FEFF 		bl	__aeabi_dsub
 380              	.LVL41:
 381 0062 0246     		mov	r2, r0
 382 0064 0B46     		mov	r3, r1
 383 0066 FFF7FEFF 		bl	__aeabi_dmul
 384              	.LVL42:
 385 006a 0646     		mov	r6, r0
 386 006c 0F46     		mov	r7, r1
 387 006e 5046     		mov	r0, r10
 388 0070 5946     		mov	r1, fp
 389 0072 434B     		ldr	r3, .L36+12
 390 0074 D3E90023 		ldrd	r2, [r3]
 391 0078 FFF7FEFF 		bl	__aeabi_dsub
 392              	.LVL43:
 393 007c 0246     		mov	r2, r0
 394 007e 0B46     		mov	r3, r1
 395 0080 FFF7FEFF 		bl	__aeabi_dmul
 396              	.LVL44:
 397 0084 8246     		mov	r10, r0
 398              	.LVL45:
 399 0086 8B46     		mov	fp, r1
 400 0088 3046     		mov	r0, r6
 401 008a 3946     		mov	r1, r7
 402 008c 5246     		mov	r2, r10
 403 008e 5B46     		mov	r3, fp
 404 0090 FFF7FEFF 		bl	__aeabi_dadd
 405              	.LVL46:
 406 0094 41EC100B 		fmdrr	d0, r0, r1
 407 0098 FFF7FEFF 		bl	sqrt
 408              	.LVL47:
 409 009c 5BEC10AB 		fmrrd	r10, fp, d0
 410 00a0 394B     		ldr	r3, .L36+20
 411 00a2 83ED000B 		fstd	d0, [r3]
 199:Src/assert.c  ****     angle = angle-angleInit;
 412              		.loc 1 199 0
 413 00a6 51EC180B 		fmrrd	r0, r1, d8
 414 00aa 334B     		ldr	r3, .L36+4
 415 00ac D3E90023 		ldrd	r2, [r3]
 416 00b0 FFF7FEFF 		bl	__aeabi_dsub
 417              	.LVL48:
 418 00b4 0646     		mov	r6, r0
 419 00b6 0F46     		mov	r7, r1
 420              	.LVL49:
 200:Src/assert.c  ****     
 201:Src/assert.c  ****     
 202:Src/assert.c  ****     if (distanceTravelled > distanceTarget/*(absPerso(positionX - targetX) < 50) && (absPerso(posit
 421              		.loc 1 202 0
 422 00b8 5046     		mov	r0, r10
 423 00ba 5946     		mov	r1, fp
 424 00bc 314B     		ldr	r3, .L36+16
 425 00be D3E90023 		ldrd	r2, [r3]
 426 00c2 FFF7FEFF 		bl	__aeabi_dcmpgt
 427              	.LVL50:
 428 00c6 18B1     		cbz	r0, .L25
 203:Src/assert.c  ****     {
 204:Src/assert.c  **** 		//char buffer[50] = "";
ARM GAS  /tmp/ccV43cAp.s 			page 12


 205:Src/assert.c  **** 		//sprintf(buffer, "%d / %d\n",(int)targetX, (int)absPerso(positionY - targetY));
 206:Src/assert.c  **** 		//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 207:Src/assert.c  ****         isMvtDone += 1;
 429              		.loc 1 207 0
 430 00c8 304A     		ldr	r2, .L36+24
 431 00ca 1368     		ldr	r3, [r2]
 432 00cc 0133     		adds	r3, r3, #1
 433 00ce 1360     		str	r3, [r2]
 434              	.L25:
 208:Src/assert.c  ****     }
 209:Src/assert.c  ****     if(isMvtDone > 5)
 435              		.loc 1 209 0
 436 00d0 2E4B     		ldr	r3, .L36+24
 437 00d2 1B68     		ldr	r3, [r3]
 438 00d4 052B     		cmp	r3, #5
 439 00d6 0BDD     		ble	.L27
 210:Src/assert.c  ****     {
 211:Src/assert.c  ****         isMvtDone = 0;
 440              		.loc 1 211 0
 441 00d8 0023     		movs	r3, #0
 442 00da 2C4A     		ldr	r2, .L36+24
 443 00dc 1360     		str	r3, [r2]
 212:Src/assert.c  ****         endOfMvt = 1;
 444              		.loc 1 212 0
 445 00de 0122     		movs	r2, #1
 446 00e0 2B49     		ldr	r1, .L36+28
 447 00e2 0A60     		str	r2, [r1]
 213:Src/assert.c  ****         *consigneDroit = 0;
 448              		.loc 1 213 0
 449 00e4 C8F80030 		str	r3, [r8]
 214:Src/assert.c  ****         *consigneGauche = 0;
 450              		.loc 1 214 0
 451 00e8 2B60     		str	r3, [r5]
 215:Src/assert.c  ****         firstLoopPass = 1;
 452              		.loc 1 215 0
 453 00ea 224B     		ldr	r3, .L36
 454 00ec 1A60     		str	r2, [r3]
 455 00ee 3CE0     		b	.L23
 456              	.L27:
 457              	.LVL51:
 458              	.LBB2:
 216:Src/assert.c  ****     }
 217:Src/assert.c  ****     else
 218:Src/assert.c  ****     {
 219:Src/assert.c  **** 		//No ramps for the time being :/ refer to MainNucleoOLD for implementation
 220:Src/assert.c  **** 		
 221:Src/assert.c  **** 		
 222:Src/assert.c  **** 		//need to modify the target sppeed for positionning
 223:Src/assert.c  **** 		int targetSpeed = 170; //tick per ms
 224:Src/assert.c  **** 		
 225:Src/assert.c  **** 		if(targetY == 0)//		avance ou recule
 459              		.loc 1 225 0
 460 00f0 51EC190B 		fmrrd	r0, r1, d9
 461 00f4 0022     		movs	r2, #0
 462 00f6 0023     		movs	r3, #0
 463 00f8 FFF7FEFF 		bl	__aeabi_dcmpeq
 464              	.LVL52:
ARM GAS  /tmp/ccV43cAp.s 			page 13


 465 00fc 08B1     		cbz	r0, .L34
 226:Src/assert.c  **** 		{targetSpeed = 170;}
 466              		.loc 1 226 0
 467 00fe AA20     		movs	r0, #170
 468 0100 01E0     		b	.L29
 469              	.L34:
 227:Src/assert.c  **** 		else
 228:Src/assert.c  **** 		{targetSpeed = -170;}
 470              		.loc 1 228 0
 471 0102 6FF0A900 		mvn	r0, #169
 472              	.L29:
 473              	.LVL53:
 229:Src/assert.c  **** 		
 230:Src/assert.c  **** 		
 231:Src/assert.c  **** 		int errorDroite = targetSpeed - tim5;
 474              		.loc 1 231 0
 475 0106 031B     		subs	r3, r0, r4
 476              	.LVL54:
 232:Src/assert.c  **** 		errorSumDroite += errorDroite;
 477              		.loc 1 232 0
 478 0108 2249     		ldr	r1, .L36+32
 479 010a 0A68     		ldr	r2, [r1]
 480 010c 1A44     		add	r2, r2, r3
 481 010e 0A60     		str	r2, [r1]
 482              	.LVL55:
 233:Src/assert.c  **** 		/*//circular buffer
 234:Src/assert.c  **** 		int errorSumDroite = 0;
 235:Src/assert.c  **** 		static int indexBuffer = 0;
 236:Src/assert.c  **** 		static int circularBuffer[100] = {0};
 237:Src/assert.c  **** 		for (int i = 0; i < 100; i++) {errorSumDroite += circularBuffer[i];}
 238:Src/assert.c  **** 		circularBuffer[indexBuffer] = errorDroite;
 239:Src/assert.c  **** 		indexBuffer += 1;
 240:Src/assert.c  **** 		if(indexBuffer > 100){indexBuffer = 0;}
 241:Src/assert.c  **** 		*/
 242:Src/assert.c  **** 		int errorVariationDroite = errorDroite - oldErrorDroite;
 243:Src/assert.c  **** 		//*consigneDroit = Kp_Droite * errorDroite + Ki_Droite * errorSumDroite + Kd_Droite * errorVariat
 244:Src/assert.c  **** 		oldErrorDroite = errorDroite;
 483              		.loc 1 244 0
 484 0110 214A     		ldr	r2, .L36+36
 485 0112 1360     		str	r3, [r2]
 245:Src/assert.c  **** 		
 246:Src/assert.c  **** 		
 247:Src/assert.c  **** 		int errorGauche = targetSpeed - tim4;
 486              		.loc 1 247 0
 487 0114 C9EB0004 		rsb	r4, r9, r0
 488              	.LVL56:
 248:Src/assert.c  **** 		errorSumGauche += errorGauche;
 489              		.loc 1 248 0
 490 0118 2049     		ldr	r1, .L36+40
 491 011a 0A68     		ldr	r2, [r1]
 492 011c 2244     		add	r2, r2, r4
 493 011e 0A60     		str	r2, [r1]
 494              	.LVL57:
 249:Src/assert.c  **** 		int errorVariationGauche = errorGauche - oldErrorGauche;
 250:Src/assert.c  **** 		//*consigneGauche = Kp_Gauche * errorGauche + Ki_Gauche * errorSumGauche + Kd_Gauche * errorVaria
 251:Src/assert.c  **** 		oldErrorGauche = errorGauche;
 495              		.loc 1 251 0
ARM GAS  /tmp/ccV43cAp.s 			page 14


 496 0120 1F4A     		ldr	r2, .L36+44
 497 0122 1460     		str	r4, [r2]
 252:Src/assert.c  **** 		
 253:Src/assert.c  **** 		
 254:Src/assert.c  **** 		/*if(targetY == 0)//si on avance
 255:Src/assert.c  **** 		{*/
 256:Src/assert.c  **** 			*consigneDroit = Kp_Droite * errorDroite + Ki_Droite * errorSumDroite + Kd_Droite * errorVariati
 498              		.loc 1 256 0
 499 0124 03EB8309 		add	r9, r3, r3, lsl #2
 500              	.LVL58:
 501 0128 4FEA4909 		lsl	r9, r9, #1
 502 012c 3046     		mov	r0, r6
 503              	.LVL59:
 504 012e 3946     		mov	r1, r7
 505 0130 0022     		movs	r2, #0
 506 0132 1C4B     		ldr	r3, .L36+48
 507              	.LVL60:
 508 0134 FFF7FEFF 		bl	__aeabi_dmul
 509              	.LVL61:
 510 0138 0646     		mov	r6, r0
 511              	.LVL62:
 512 013a 0F46     		mov	r7, r1
 513 013c 4846     		mov	r0, r9
 514 013e FFF7FEFF 		bl	__aeabi_i2d
 515              	.LVL63:
 516 0142 3246     		mov	r2, r6
 517 0144 3B46     		mov	r3, r7
 518 0146 FFF7FEFF 		bl	__aeabi_dadd
 519              	.LVL64:
 520 014a FFF7FEFF 		bl	__aeabi_d2iz
 521              	.LVL65:
 522 014e C8F80000 		str	r0, [r8]
 257:Src/assert.c  **** 			*consigneGauche = Kp_Gauche * errorGauche + Ki_Gauche * errorSumGauche + Kd_Gauche * errorVariat
 523              		.loc 1 257 0
 524 0152 04EB8400 		add	r0, r4, r4, lsl #2
 525 0156 4000     		lsls	r0, r0, #1
 526 0158 FFF7FEFF 		bl	__aeabi_i2d
 527              	.LVL66:
 528 015c 3246     		mov	r2, r6
 529 015e 3B46     		mov	r3, r7
 530 0160 FFF7FEFF 		bl	__aeabi_dsub
 531              	.LVL67:
 532 0164 FFF7FEFF 		bl	__aeabi_d2iz
 533              	.LVL68:
 534 0168 2860     		str	r0, [r5]
 535              	.LVL69:
 536              	.L23:
 537              	.LBE2:
 258:Src/assert.c  **** 		/*}
 259:Src/assert.c  **** 		else
 260:Src/assert.c  **** 		{
 261:Src/assert.c  **** 			*consigneDroit = -(Kp_Droite * errorDroite + Ki_Droite * errorSumDroite + Kd_Droite * errorVaria
 262:Src/assert.c  **** 			*consigneGauche = -(Kp_Gauche * errorGauche + Ki_Gauche * errorSumGauche + Kd_Gauche * errorVari
 263:Src/assert.c  **** 		}*/
 264:Src/assert.c  **** 	}
 265:Src/assert.c  ****     
 266:Src/assert.c  **** }
ARM GAS  /tmp/ccV43cAp.s 			page 15


 538              		.loc 1 266 0
 539 016a BDEC048B 		fldmfdd	sp!, {d8-d9}
 540              	.LCFI6:
 541              		.cfi_restore 82
 542              		.cfi_restore 83
 543              		.cfi_restore 80
 544              		.cfi_restore 81
 545              		.cfi_def_cfa_offset 40
 546              	.LVL70:
 547 016e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 548              	.LVL71:
 549              	.L37:
 550 0172 00BF     		.align	2
 551              	.L36:
 552 0174 00000000 		.word	.LANCHOR3
 553 0178 00000000 		.word	.LANCHOR4
 554 017c 00000000 		.word	.LANCHOR5
 555 0180 00000000 		.word	.LANCHOR6
 556 0184 00000000 		.word	.LANCHOR7
 557 0188 00000000 		.word	.LANCHOR8
 558 018c 00000000 		.word	.LANCHOR9
 559 0190 00000000 		.word	.LANCHOR2
 560 0194 00000000 		.word	.LANCHOR10
 561 0198 00000000 		.word	.LANCHOR11
 562 019c 00000000 		.word	.LANCHOR12
 563 01a0 00000000 		.word	.LANCHOR13
 564 01a4 00408F40 		.word	1083129856
 565              		.cfi_endproc
 566              	.LFE126:
 568              		.global	__aeabi_d2uiz
 569              		.section	.text.stateMachine,"ax",%progbits
 570              		.align	2
 571              		.global	stateMachine
 572              		.thumb
 573              		.thumb_func
 575              	stateMachine:
 576              	.LFB124:
  68:Src/assert.c  ****     static int state = 0;
 577              		.loc 1 68 0
 578              		.cfi_startproc
 579              		@ args = 64, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              	.LVL72:
 582 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 583              	.LCFI7:
 584              		.cfi_def_cfa_offset 28
 585              		.cfi_offset 4, -28
 586              		.cfi_offset 5, -24
 587              		.cfi_offset 6, -20
 588              		.cfi_offset 7, -16
 589              		.cfi_offset 8, -12
 590              		.cfi_offset 9, -8
 591              		.cfi_offset 14, -4
 592 0004 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 593              	.LCFI8:
 594              		.cfi_def_cfa_offset 52
 595              		.cfi_offset 80, -52
ARM GAS  /tmp/ccV43cAp.s 			page 16


 596              		.cfi_offset 81, -48
 597              		.cfi_offset 82, -44
 598              		.cfi_offset 83, -40
 599              		.cfi_offset 84, -36
 600              		.cfi_offset 85, -32
 601 0008 91B0     		sub	sp, sp, #68
 602              	.LCFI9:
 603              		.cfi_def_cfa_offset 120
 604 000a 8146     		mov	r9, r0
 605 000c 8846     		mov	r8, r1
 606 000e B0EE40AA 		fcpys	s20, s0
 607 0012 F0EE60AA 		fcpys	s21, s1
 608 0016 B0EE419A 		fcpys	s18, s2
 609 001a F0EE619A 		fcpys	s19, s3
 610 001e B0EE428A 		fcpys	s16, s4
 611 0022 F0EE628A 		fcpys	s17, s5
 612 0026 1746     		mov	r7, r2
 613 0028 1E46     		mov	r6, r3
  71:Src/assert.c  ****     {
 614              		.loc 1 71 0
 615 002a 604B     		ldr	r3, .L51
 616              	.LVL73:
 617 002c 1B68     		ldr	r3, [r3]
 618 002e 012B     		cmp	r3, #1
 619 0030 0DD1     		bne	.L39
  73:Src/assert.c  ****         state += 1;
 620              		.loc 1 73 0
 621 0032 0022     		movs	r2, #0
 622              	.LVL74:
 623 0034 5D4B     		ldr	r3, .L51
 624 0036 1A60     		str	r2, [r3]
  74:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Fin de l'action\n", sizeof("Fin de l'action\n"), HAL_MAX_DELAY)
 625              		.loc 1 74 0
 626 0038 5D4A     		ldr	r2, .L51+4
 627 003a 1368     		ldr	r3, [r2]
 628 003c 0133     		adds	r3, r3, #1
 629 003e 1360     		str	r3, [r2]
  75:Src/assert.c  ****         //resetPos();
 630              		.loc 1 75 0
 631 0040 1EA8     		add	r0, sp, #120
 632              	.LVL75:
 633 0042 5C49     		ldr	r1, .L51+8
 634              	.LVL76:
 635 0044 1122     		movs	r2, #17
 636 0046 4FF0FF33 		mov	r3, #-1
 637 004a FFF7FEFF 		bl	HAL_UART_Transmit
 638              	.LVL77:
 639              	.L39:
  79:Src/assert.c  ****     {
 640              		.loc 1 79 0
 641 004e 584B     		ldr	r3, .L51+4
 642 0050 1B68     		ldr	r3, [r3]
 643 0052 594A     		ldr	r2, .L51+12
 644 0054 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 645 0056 413A     		subs	r2, r2, #65
 646 0058 132A     		cmp	r2, #19
 647 005a 00F2A280 		bhi	.L38
ARM GAS  /tmp/ccV43cAp.s 			page 17


 648 005e DFE802F0 		tbb	[pc, r2]
 649              	.L42:
 650 0062 32       		.byte	(.L41-.L42)/2
 651 0063 82       		.byte	(.L43-.L42)/2
 652 0064 A0       		.byte	(.L38-.L42)/2
 653 0065 A0       		.byte	(.L38-.L42)/2
 654 0066 98       		.byte	(.L44-.L42)/2
 655 0067 A0       		.byte	(.L38-.L42)/2
 656 0068 A0       		.byte	(.L38-.L42)/2
 657 0069 A0       		.byte	(.L38-.L42)/2
 658 006a A0       		.byte	(.L38-.L42)/2
 659 006b A0       		.byte	(.L38-.L42)/2
 660 006c A0       		.byte	(.L38-.L42)/2
 661 006d A0       		.byte	(.L38-.L42)/2
 662 006e 0A       		.byte	(.L45-.L42)/2
 663 006f A0       		.byte	(.L38-.L42)/2
 664 0070 A0       		.byte	(.L38-.L42)/2
 665 0071 A0       		.byte	(.L38-.L42)/2
 666 0072 A0       		.byte	(.L38-.L42)/2
 667 0073 79       		.byte	(.L46-.L42)/2
 668 0074 70       		.byte	(.L47-.L42)/2
 669 0075 5A       		.byte	(.L48-.L42)/2
 670              		.p2align 1
 671              	.L45:
  82:Src/assert.c  ****         //char buffer[50] = "";
 672              		.loc 1 82 0
 673 0076 DB00     		lsls	r3, r3, #3
 674 0078 504A     		ldr	r2, .L51+16
 675 007a 1A44     		add	r2, r2, r3
 676 007c 92ED003B 		fldd	d3, [r2]
 677 0080 4F4A     		ldr	r2, .L51+20
 678 0082 1344     		add	r3, r3, r2
 679 0084 93ED004B 		fldd	d4, [r3]
 680 0088 6C46     		mov	r4, sp
 681 008a 1EAD     		add	r5, sp, #120
 682 008c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 683 008e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 684 0090 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 685 0092 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 686 0094 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 687 0096 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 688 0098 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 689 009c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 690 00a0 4846     		mov	r0, r9
 691 00a2 4146     		mov	r1, r8
 692 00a4 B0EE4A0A 		fcpys	s0, s20
 693 00a8 F0EE6A0A 		fcpys	s1, s21
 694 00ac B0EE491A 		fcpys	s2, s18
 695 00b0 F0EE691A 		fcpys	s3, s19
 696 00b4 B0EE482A 		fcpys	s4, s16
 697 00b8 F0EE682A 		fcpys	s5, s17
 698 00bc 3A46     		mov	r2, r7
 699 00be 3346     		mov	r3, r6
 700 00c0 FFF7FEFF 		bl	move
 701              	.LVL78:
  86:Src/assert.c  ****         
 702              		.loc 1 86 0
ARM GAS  /tmp/ccV43cAp.s 			page 18


 703 00c4 6DE0     		b	.L38
 704              	.L41:
  89:Src/assert.c  **** 		break;
 705              		.loc 1 89 0
 706 00c6 DB00     		lsls	r3, r3, #3
 707 00c8 3C4A     		ldr	r2, .L51+16
 708 00ca 1A44     		add	r2, r2, r3
 709 00cc 92ED003B 		fldd	d3, [r2]
 710 00d0 3B4A     		ldr	r2, .L51+20
 711 00d2 1344     		add	r3, r3, r2
 712 00d4 93ED004B 		fldd	d4, [r3]
 713 00d8 6C46     		mov	r4, sp
 714 00da 1EAD     		add	r5, sp, #120
 715 00dc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 716 00de 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 717 00e0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 718 00e2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 719 00e4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 720 00e6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 721 00e8 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 722 00ec 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 723 00f0 4846     		mov	r0, r9
 724 00f2 4146     		mov	r1, r8
 725 00f4 B0EE4A0A 		fcpys	s0, s20
 726 00f8 F0EE6A0A 		fcpys	s1, s21
 727 00fc B0EE491A 		fcpys	s2, s18
 728 0100 F0EE691A 		fcpys	s3, s19
 729 0104 B0EE482A 		fcpys	s4, s16
 730 0108 F0EE682A 		fcpys	s5, s17
 731 010c 3A46     		mov	r2, r7
 732 010e 3346     		mov	r3, r6
 733 0110 FFF7FEFF 		bl	turn
 734              	.LVL79:
  90:Src/assert.c  ****         
 735              		.loc 1 90 0
 736 0114 45E0     		b	.L38
 737              	.L48:
  93:Src/assert.c  ****         HAL_Delay(val1[state]);
 738              		.loc 1 93 0
 739 0116 1EA8     		add	r0, sp, #120
 740 0118 2A49     		ldr	r1, .L51+24
 741 011a 0E22     		movs	r2, #14
 742 011c 4FF0FF33 		mov	r3, #-1
 743 0120 FFF7FEFF 		bl	HAL_UART_Transmit
 744              	.LVL80:
  94:Src/assert.c  ****         endOfMvt = 1;
 745              		.loc 1 94 0
 746 0124 224B     		ldr	r3, .L51+4
 747 0126 1A68     		ldr	r2, [r3]
 748 0128 244B     		ldr	r3, .L51+16
 749 012a 03EBC203 		add	r3, r3, r2, lsl #3
 750 012e D3E90001 		ldrd	r0, [r3]
 751 0132 FFF7FEFF 		bl	__aeabi_d2uiz
 752              	.LVL81:
 753 0136 FFF7FEFF 		bl	HAL_Delay
 754              	.LVL82:
  95:Src/assert.c  **** 		break;
ARM GAS  /tmp/ccV43cAp.s 			page 19


 755              		.loc 1 95 0
 756 013a 0122     		movs	r2, #1
 757 013c 1B4B     		ldr	r3, .L51
 758 013e 1A60     		str	r2, [r3]
  96:Src/assert.c  ****         
 759              		.loc 1 96 0
 760 0140 2FE0     		b	.L38
 761              	.L47:
  99:Src/assert.c  ****         endOfMvt = 1;
 762              		.loc 1 99 0
 763 0142 2148     		ldr	r0, .L51+28
 764 0144 0221     		movs	r1, #2
 765 0146 0122     		movs	r2, #1
 766 0148 FFF7FEFF 		bl	HAL_GPIO_WritePin
 767              	.LVL83:
 100:Src/assert.c  ****         break;
 768              		.loc 1 100 0
 769 014c 0122     		movs	r2, #1
 770 014e 174B     		ldr	r3, .L51
 771 0150 1A60     		str	r2, [r3]
 101:Src/assert.c  ****       
 772              		.loc 1 101 0
 773 0152 26E0     		b	.L38
 774              	.L46:
 104:Src/assert.c  ****         endOfMvt = 1;
 775              		.loc 1 104 0
 776 0154 1C48     		ldr	r0, .L51+28
 777 0156 0221     		movs	r1, #2
 778 0158 0022     		movs	r2, #0
 779 015a FFF7FEFF 		bl	HAL_GPIO_WritePin
 780              	.LVL84:
 105:Src/assert.c  ****         break;
 781              		.loc 1 105 0
 782 015e 0122     		movs	r2, #1
 783 0160 124B     		ldr	r3, .L51
 784 0162 1A60     		str	r2, [r3]
 106:Src/assert.c  ****         
 785              		.loc 1 106 0
 786 0164 1DE0     		b	.L38
 787              	.L43:
 109:Src/assert.c  ****         servoPos(val1[state]);
 788              		.loc 1 109 0
 789 0166 1EA8     		add	r0, sp, #120
 790 0168 1849     		ldr	r1, .L51+32
 791 016a 0922     		movs	r2, #9
 792 016c 4FF0FF33 		mov	r3, #-1
 793 0170 FFF7FEFF 		bl	HAL_UART_Transmit
 794              	.LVL85:
 110:Src/assert.c  ****         endOfMvt = 1;
 795              		.loc 1 110 0
 796 0174 0E4B     		ldr	r3, .L51+4
 797 0176 1A68     		ldr	r2, [r3]
 798 0178 104B     		ldr	r3, .L51+16
 799 017a 03EBC203 		add	r3, r3, r2, lsl #3
 800 017e D3E90001 		ldrd	r0, [r3]
 801 0182 FFF7FEFF 		bl	__aeabi_d2iz
 802              	.LVL86:
ARM GAS  /tmp/ccV43cAp.s 			page 20


 803 0186 FFF7FEFF 		bl	servoPos
 804              	.LVL87:
 111:Src/assert.c  ****         break;
 805              		.loc 1 111 0
 806 018a 0122     		movs	r2, #1
 807 018c 074B     		ldr	r3, .L51
 808 018e 1A60     		str	r2, [r3]
 112:Src/assert.c  **** 
 809              		.loc 1 112 0
 810 0190 07E0     		b	.L38
 811              	.L44:
 115:Src/assert.c  ****         while(1){}
 812              		.loc 1 115 0
 813 0192 1EA8     		add	r0, sp, #120
 814 0194 0E49     		ldr	r1, .L51+36
 815 0196 0E22     		movs	r2, #14
 816 0198 4FF0FF33 		mov	r3, #-1
 817 019c FFF7FEFF 		bl	HAL_UART_Transmit
 818              	.LVL88:
 819              	.L49:
 116:Src/assert.c  ****         break;
 820              		.loc 1 116 0 discriminator 1
 821 01a0 FEE7     		b	.L49
 822              	.L38:
 119:Src/assert.c  **** 
 823              		.loc 1 119 0
 824 01a2 11B0     		add	sp, sp, #68
 825              	.LCFI10:
 826              		.cfi_def_cfa_offset 52
 827              		@ sp needed
 828 01a4 BDEC068B 		fldmfdd	sp!, {d8-d10}
 829              	.LCFI11:
 830              		.cfi_restore 84
 831              		.cfi_restore 85
 832              		.cfi_restore 82
 833              		.cfi_restore 83
 834              		.cfi_restore 80
 835              		.cfi_restore 81
 836              		.cfi_def_cfa_offset 28
 837              	.LVL89:
 838 01a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 839              	.LVL90:
 840              	.L52:
 841              		.align	2
 842              	.L51:
 843 01ac 00000000 		.word	.LANCHOR2
 844 01b0 00000000 		.word	.LANCHOR14
 845 01b4 00000000 		.word	.LC0
 846 01b8 00000000 		.word	.LANCHOR15
 847 01bc 00000000 		.word	.LANCHOR16
 848 01c0 00000000 		.word	.LANCHOR17
 849 01c4 14000000 		.word	.LC1
 850 01c8 00080240 		.word	1073874944
 851 01cc 24000000 		.word	.LC2
 852 01d0 30000000 		.word	.LC3
 853              		.cfi_endproc
 854              	.LFE124:
ARM GAS  /tmp/ccV43cAp.s 			page 21


 856              		.section	.text.absPerso,"ax",%progbits
 857              		.align	2
 858              		.global	absPerso
 859              		.thumb
 860              		.thumb_func
 862              	absPerso:
 863              	.LFB127:
 267:Src/assert.c  **** 
 268:Src/assert.c  **** double absPerso(double x)
 269:Src/assert.c  **** {
 864              		.loc 1 269 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868              	.LVL91:
 869 0000 38B5     		push	{r3, r4, r5, lr}
 870              	.LCFI12:
 871              		.cfi_def_cfa_offset 16
 872              		.cfi_offset 3, -16
 873              		.cfi_offset 4, -12
 874              		.cfi_offset 5, -8
 875              		.cfi_offset 14, -4
 876 0002 55EC104B 		fmrrd	r4, r5, d0
 270:Src/assert.c  **** 	if(x < 0) x = -x; 
 877              		.loc 1 270 0
 878 0006 10EE100A 		fmrs	r0, s0	@ int
 879 000a 2946     		mov	r1, r5
 880 000c 0022     		movs	r2, #0
 881 000e 0023     		movs	r3, #0
 882 0010 FFF7FEFF 		bl	__aeabi_dcmplt
 883              	.LVL92:
 884 0014 10B1     		cbz	r0, .L54
 885              		.loc 1 270 0 is_stmt 0 discriminator 1
 886 0016 05F10043 		add	r3, r5, #-2147483648
 887 001a 1D46     		mov	r5, r3
 888              	.LVL93:
 889              	.L54:
 271:Src/assert.c  **** 	return x;
 272:Src/assert.c  **** }
 890              		.loc 1 272 0 is_stmt 1
 891 001c 45EC104B 		fmdrr	d0, r4, r5
 892 0020 38BD     		pop	{r3, r4, r5, pc}
 893              		.cfi_endproc
 894              	.LFE127:
 896              		.global	endOfMvt
 897              		.global	val2
 898              		.global	val1
 899              		.global	consignes
 900 0022 00BF     		.section	.bss.oldErrorDroite.7963,"aw",%nobits
 901              		.align	2
 902              		.set	.LANCHOR11,. + 0
 905              	oldErrorDroite.7963:
 906 0000 00000000 		.space	4
 907              		.section	.bss.angleInit.7948,"aw",%nobits
 908              		.align	3
 909              		.set	.LANCHOR1,. + 0
 912              	angleInit.7948:
ARM GAS  /tmp/ccV43cAp.s 			page 22


 913 0000 00000000 		.space	8
 913      00000000 
 914              		.section	.bss.errorSumDroite.7964,"aw",%nobits
 915              		.align	2
 916              		.set	.LANCHOR10,. + 0
 919              	errorSumDroite.7964:
 920 0000 00000000 		.space	4
 921              		.section	.data.firstLoopPass.7949,"aw",%progbits
 922              		.align	2
 923              		.set	.LANCHOR0,. + 0
 926              	firstLoopPass.7949:
 927 0000 01000000 		.word	1
 928              		.section	.data.val1,"aw",%progbits
 929              		.align	3
 930              		.set	.LANCHOR16,. + 0
 933              	val1:
 934 0000 00000000 		.word	0
 935 0004 00C08240 		.word	1082310656
 936 0008 00000000 		.word	0
 937 000c 0000FC3F 		.word	1073479680
 938 0010 00000000 		.word	0
 939 0014 00C07240 		.word	1081262080
 940 0018 00000000 		.word	0
 941 001c 0000FCBF 		.word	-1074003968
 942 0020 00000000 		.word	0
 943 0024 00006940 		.word	1080623104
 944 0028 00000000 		.word	0
 945 002c 00509440 		.word	1083461632
 946 0030 00000000 		.word	0
 947 0034 0000FC3F 		.word	1073479680
 948 0038 00000000 		.word	0
 949 003c 00006940 		.word	1080623104
 950 0040 00000000 		.word	0
 951 0044 0000FCBF 		.word	-1074003968
 952 0048 00000000 		.word	0
 953 004c 0088A340 		.word	1084459008
 954 0050 00000000 		.word	0
 955 0054 00407040 		.word	1081098240
 956 0058 00000000 		.word	0
 957 005c 00709740 		.word	1083666432
 958 0060 00000000 		.word	0
 959 0064 00E07540 		.word	1081466880
 960 0068 00000000 		.word	0
 961 006c 0000FC3F 		.word	1073479680
 962 0070 00000000 		.word	0
 963 0074 00000000 		.word	0
 964 0078 00000000 		.word	0
 965 007c 00006940 		.word	1080623104
 966 0080 00000000 		.word	0
 967 0084 0070A740 		.word	1084715008
 968 0088 00000000 		.word	0
 969 008c 00006940 		.word	1080623104
 970 0090 00000000 		.word	0
 971 0094 0000FC3F 		.word	1073479680
 972 0098 00000000 		.word	0
 973 009c 00208C40 		.word	1082925056
 974 00a0 00000000 		.word	0
ARM GAS  /tmp/ccV43cAp.s 			page 23


 975 00a4 0000FC3F 		.word	1073479680
 976 00a8 00000000 		.word	0
 977 00ac 00509440 		.word	1083461632
 978 00b0 00000000 		.word	0
 979 00b4 00000000 		.word	0
 980 00b8 00000000 		.word	0
 981 00bc 00000000 		.word	0
 982              		.section	.data.val2,"aw",%progbits
 983              		.align	3
 984              		.set	.LANCHOR17,. + 0
 987              	val2:
 988 0000 00000000 		.word	0
 989 0004 00000000 		.word	0
 990 0008 00000000 		.word	0
 991 000c 00000000 		.word	0
 992 0010 00000000 		.word	0
 993 0014 00000000 		.word	0
 994 0018 00000000 		.word	0
 995 001c 00000000 		.word	0
 996 0020 00000000 		.word	0
 997 0024 0000F03F 		.word	1072693248
 998 0028 00000000 		.word	0
 999 002c 00000000 		.word	0
 1000 0030 00000000 		.word	0
 1001 0034 00000000 		.word	0
 1002 0038 00000000 		.word	0
 1003 003c 00000000 		.word	0
 1004 0040 00000000 		.word	0
 1005 0044 00000000 		.word	0
 1006 0048 00000000 		.word	0
 1007 004c 00000000 		.word	0
 1008 0050 00000000 		.word	0
 1009 0054 00000000 		.word	0
 1010 0058 00000000 		.word	0
 1011 005c 00000000 		.word	0
 1012 0060 00000000 		.word	0
 1013 0064 00000000 		.word	0
 1014 0068 00000000 		.word	0
 1015 006c 00000000 		.word	0
 1016 0070 00000000 		.word	0
 1017 0074 00000000 		.word	0
 1018 0078 00000000 		.word	0
 1019 007c 00000000 		.word	0
 1020 0080 00000000 		.word	0
 1021 0084 00000000 		.word	0
 1022 0088 00000000 		.word	0
 1023 008c 0000F03F 		.word	1072693248
 1024 0090 00000000 		.word	0
 1025 0094 00000000 		.word	0
 1026 0098 00000000 		.word	0
 1027 009c 00000000 		.word	0
 1028 00a0 00000000 		.word	0
 1029 00a4 00000000 		.word	0
 1030 00a8 00000000 		.word	0
 1031 00ac 00000000 		.word	0
 1032 00b0 00000000 		.word	0
 1033 00b4 00000000 		.word	0
ARM GAS  /tmp/ccV43cAp.s 			page 24


 1034 00b8 00000000 		.word	0
 1035 00bc 00000000 		.word	0
 1036              		.section	.bss.angleInit.7967,"aw",%nobits
 1037              		.align	3
 1038              		.set	.LANCHOR4,. + 0
 1041              	angleInit.7967:
 1042 0000 00000000 		.space	8
 1042      00000000 
 1043              		.section	.data.firstLoopPass.7972,"aw",%progbits
 1044              		.align	2
 1045              		.set	.LANCHOR3,. + 0
 1048              	firstLoopPass.7972:
 1049 0000 01000000 		.word	1
 1050              		.section	.bss.errorSumGauche.7966,"aw",%nobits
 1051              		.align	2
 1052              		.set	.LANCHOR12,. + 0
 1055              	errorSumGauche.7966:
 1056 0000 00000000 		.space	4
 1057              		.section	.rodata.str1.4,"aMS",%progbits,1
 1058              		.align	2
 1059              	.LC0:
 1060 0000 46696E20 		.ascii	"Fin de l'action\012\000"
 1060      6465206C 
 1060      27616374 
 1060      696F6E0A 
 1060      00
 1061 0011 000000   		.space	3
 1062              	.LC1:
 1063 0014 4C657427 		.ascii	"Let's wait !\012\000"
 1063      73207761 
 1063      69742021 
 1063      0A00
 1064 0022 0000     		.space	2
 1065              	.LC2:
 1066 0024 43657276 		.ascii	"Cerveau\012\000"
 1066      6561750A 
 1066      00
 1067 002d 000000   		.space	3
 1068              	.LC3:
 1069 0030 46696E20 		.ascii	"Fin de match\012\000"
 1069      6465206D 
 1069      61746368 
 1069      0A00
 1070              		.section	.bss.state.7926,"aw",%nobits
 1071              		.align	2
 1072              		.set	.LANCHOR14,. + 0
 1075              	state.7926:
 1076 0000 00000000 		.space	4
 1077              		.section	.bss.distanceTarget.7971,"aw",%nobits
 1078              		.align	3
 1079              		.set	.LANCHOR7,. + 0
 1082              	distanceTarget.7971:
 1083 0000 00000000 		.space	8
 1083      00000000 
 1084              		.section	.bss.isMvtDone.7962,"aw",%nobits
 1085              		.align	2
 1086              		.set	.LANCHOR9,. + 0
ARM GAS  /tmp/ccV43cAp.s 			page 25


 1089              	isMvtDone.7962:
 1090 0000 00000000 		.space	4
 1091              		.section	.bss.endOfMvt,"aw",%nobits
 1092              		.align	2
 1093              		.set	.LANCHOR2,. + 0
 1096              	endOfMvt:
 1097 0000 00000000 		.space	4
 1098              		.section	.bss.positionXInit.7968,"aw",%nobits
 1099              		.align	3
 1100              		.set	.LANCHOR5,. + 0
 1103              	positionXInit.7968:
 1104 0000 00000000 		.space	8
 1104      00000000 
 1105              		.section	.bss.positionYInit.7969,"aw",%nobits
 1106              		.align	3
 1107              		.set	.LANCHOR6,. + 0
 1110              	positionYInit.7969:
 1111 0000 00000000 		.space	8
 1111      00000000 
 1112              		.section	.bss.oldErrorGauche.7965,"aw",%nobits
 1113              		.align	2
 1114              		.set	.LANCHOR13,. + 0
 1117              	oldErrorGauche.7965:
 1118 0000 00000000 		.space	4
 1119              		.section	.bss.distanceTravelled.7970,"aw",%nobits
 1120              		.align	3
 1121              		.set	.LANCHOR8,. + 0
 1124              	distanceTravelled.7970:
 1125 0000 00000000 		.space	8
 1125      00000000 
 1126              		.section	.data.consignes,"aw",%progbits
 1127              		.align	2
 1128              		.set	.LANCHOR15,. + 0
 1131              	consignes:
 1132 0000 4D       		.byte	77
 1133 0001 41       		.byte	65
 1134 0002 4D       		.byte	77
 1135 0003 41       		.byte	65
 1136 0004 4D       		.byte	77
 1137 0005 4D       		.byte	77
 1138 0006 41       		.byte	65
 1139 0007 4D       		.byte	77
 1140 0008 41       		.byte	65
 1141 0009 42       		.byte	66
 1142 000a 4D       		.byte	77
 1143 000b 42       		.byte	66
 1144 000c 4D       		.byte	77
 1145 000d 41       		.byte	65
 1146 000e 53       		.byte	83
 1147 000f 4D       		.byte	77
 1148 0010 54       		.byte	84
 1149 0011 4D       		.byte	77
 1150 0012 41       		.byte	65
 1151 0013 4D       		.byte	77
 1152 0014 41       		.byte	65
 1153 0015 4D       		.byte	77
 1154 0016 52       		.byte	82
ARM GAS  /tmp/ccV43cAp.s 			page 26


 1155 0017 45       		.byte	69
 1156              		.text
 1157              	.Letext0:
 1158              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1159              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1160              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1161              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1162              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1163              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1164              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1165              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 1166              		.file 10 "/usr/include/newlib/math.h"
 1167              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1168              		.file 12 "Inc/main.h"
ARM GAS  /tmp/ccV43cAp.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 assert.c
     /tmp/ccV43cAp.s:25     .text.updatePos:0000000000000000 $t
     /tmp/ccV43cAp.s:30     .text.updatePos:0000000000000000 updatePos
     /tmp/ccV43cAp.s:155    .text.updatePos:00000000000000d8 $d
     /tmp/ccV43cAp.s:164    .text.turn:0000000000000000 $t
     /tmp/ccV43cAp.s:169    .text.turn:0000000000000000 turn
     /tmp/ccV43cAp.s:291    .text.turn:00000000000000b8 $d
     /tmp/ccV43cAp.s:303    .text.move:0000000000000000 $t
     /tmp/ccV43cAp.s:308    .text.move:0000000000000000 move
     /tmp/ccV43cAp.s:552    .text.move:0000000000000174 $d
     /tmp/ccV43cAp.s:570    .text.stateMachine:0000000000000000 $t
     /tmp/ccV43cAp.s:575    .text.stateMachine:0000000000000000 stateMachine
     /tmp/ccV43cAp.s:650    .text.stateMachine:0000000000000062 $d
     /tmp/ccV43cAp.s:670    .text.stateMachine:0000000000000076 $t
     /tmp/ccV43cAp.s:843    .text.stateMachine:00000000000001ac $d
     /tmp/ccV43cAp.s:857    .text.absPerso:0000000000000000 $t
     /tmp/ccV43cAp.s:862    .text.absPerso:0000000000000000 absPerso
     /tmp/ccV43cAp.s:1096   .bss.endOfMvt:0000000000000000 endOfMvt
     /tmp/ccV43cAp.s:987    .data.val2:0000000000000000 val2
     /tmp/ccV43cAp.s:933    .data.val1:0000000000000000 val1
     /tmp/ccV43cAp.s:1131   .data.consignes:0000000000000000 consignes
     /tmp/ccV43cAp.s:901    .bss.oldErrorDroite.7963:0000000000000000 $d
     /tmp/ccV43cAp.s:905    .bss.oldErrorDroite.7963:0000000000000000 oldErrorDroite.7963
     /tmp/ccV43cAp.s:908    .bss.angleInit.7948:0000000000000000 $d
     /tmp/ccV43cAp.s:912    .bss.angleInit.7948:0000000000000000 angleInit.7948
     /tmp/ccV43cAp.s:915    .bss.errorSumDroite.7964:0000000000000000 $d
     /tmp/ccV43cAp.s:919    .bss.errorSumDroite.7964:0000000000000000 errorSumDroite.7964
     /tmp/ccV43cAp.s:922    .data.firstLoopPass.7949:0000000000000000 $d
     /tmp/ccV43cAp.s:926    .data.firstLoopPass.7949:0000000000000000 firstLoopPass.7949
     /tmp/ccV43cAp.s:929    .data.val1:0000000000000000 $d
     /tmp/ccV43cAp.s:983    .data.val2:0000000000000000 $d
     /tmp/ccV43cAp.s:1037   .bss.angleInit.7967:0000000000000000 $d
     /tmp/ccV43cAp.s:1041   .bss.angleInit.7967:0000000000000000 angleInit.7967
     /tmp/ccV43cAp.s:1044   .data.firstLoopPass.7972:0000000000000000 $d
     /tmp/ccV43cAp.s:1048   .data.firstLoopPass.7972:0000000000000000 firstLoopPass.7972
     /tmp/ccV43cAp.s:1051   .bss.errorSumGauche.7966:0000000000000000 $d
     /tmp/ccV43cAp.s:1055   .bss.errorSumGauche.7966:0000000000000000 errorSumGauche.7966
     /tmp/ccV43cAp.s:1058   .rodata.str1.4:0000000000000000 $d
     /tmp/ccV43cAp.s:1071   .bss.state.7926:0000000000000000 $d
     /tmp/ccV43cAp.s:1075   .bss.state.7926:0000000000000000 state.7926
     /tmp/ccV43cAp.s:1078   .bss.distanceTarget.7971:0000000000000000 $d
     /tmp/ccV43cAp.s:1082   .bss.distanceTarget.7971:0000000000000000 distanceTarget.7971
     /tmp/ccV43cAp.s:1085   .bss.isMvtDone.7962:0000000000000000 $d
     /tmp/ccV43cAp.s:1089   .bss.isMvtDone.7962:0000000000000000 isMvtDone.7962
     /tmp/ccV43cAp.s:1092   .bss.endOfMvt:0000000000000000 $d
     /tmp/ccV43cAp.s:1099   .bss.positionXInit.7968:0000000000000000 $d
     /tmp/ccV43cAp.s:1103   .bss.positionXInit.7968:0000000000000000 positionXInit.7968
     /tmp/ccV43cAp.s:1106   .bss.positionYInit.7969:0000000000000000 $d
     /tmp/ccV43cAp.s:1110   .bss.positionYInit.7969:0000000000000000 positionYInit.7969
     /tmp/ccV43cAp.s:1113   .bss.oldErrorGauche.7965:0000000000000000 $d
     /tmp/ccV43cAp.s:1117   .bss.oldErrorGauche.7965:0000000000000000 oldErrorGauche.7965
     /tmp/ccV43cAp.s:1120   .bss.distanceTravelled.7970:0000000000000000 $d
     /tmp/ccV43cAp.s:1124   .bss.distanceTravelled.7970:0000000000000000 distanceTravelled.7970
     /tmp/ccV43cAp.s:1127   .data.consignes:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

ARM GAS  /tmp/ccV43cAp.s 			page 28


UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_ddiv
__aeabi_dadd
__aeabi_dmul
cos
sin
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_dsub
__aeabi_dcmpeq
__aeabi_i2d
__aeabi_d2iz
sqrt
__aeabi_d2uiz
HAL_UART_Transmit
HAL_Delay
HAL_GPIO_WritePin
servoPos
