ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"assert.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_f2d
  18              		.global	__aeabi_ddiv
  19              		.global	__aeabi_dadd
  20              		.global	__aeabi_dmul
  21              		.section	.text.updatePos,"ax",%progbits
  22              		.align	1
  23              		.global	updatePos
  24              		.syntax unified
  25              		.thumb
  26              		.thumb_func
  27              		.fpu fpv4-sp-d16
  29              	updatePos:
  30              	.LFB124:
  31              		.file 1 "Src/assert.c"
   1:Src/assert.c  **** #include "assert.h"
   2:Src/assert.c  **** 
   3:Src/assert.c  **** #define Kp_Droite 10
   4:Src/assert.c  **** #define Ki_Droite 0
   5:Src/assert.c  **** #define Kd_Droite 0
   6:Src/assert.c  **** 
   7:Src/assert.c  **** 
   8:Src/assert.c  **** #define Kp_Gauche 10
   9:Src/assert.c  **** #define Ki_Gauche 0
  10:Src/assert.c  **** #define Kd_Gauche 0
  11:Src/assert.c  **** 
  12:Src/assert.c  **** #define Kp_Angle 1000
  13:Src/assert.c  **** 
  14:Src/assert.c  **** char consignes[] = {'M', 'A', 'M',  'A', 'T',   'M', 'E'};
  15:Src/assert.c  **** double val1[] = {    100, 0.5, 100, -0.5, 2000,  100, 0 };
  16:Src/assert.c  **** double val2[] = {    0,   0,   0 ,   0,   0,     0,   0 };
  17:Src/assert.c  **** 
  18:Src/assert.c  **** int endOfMvt = 0;
  19:Src/assert.c  **** 
  20:Src/assert.c  **** 
  21:Src/assert.c  **** void updatePos(int tickRight, int tickGauche, double* positionX, double* positionY, double* angle)
  22:Src/assert.c  **** { 
  32              		.loc 1 22 0
  33              		.cfi_startproc
  34              		@ args = 4, pretend = 0, frame = 0
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  36              	.LVL0:
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 2


  37 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 32
  40              		.cfi_offset 4, -32
  41              		.cfi_offset 5, -28
  42              		.cfi_offset 6, -24
  43              		.cfi_offset 7, -20
  44              		.cfi_offset 8, -16
  45              		.cfi_offset 9, -12
  46              		.cfi_offset 10, -8
  47              		.cfi_offset 14, -4
  48 0004 2DED028B 		vpush.64	{d8}
  49              	.LCFI1:
  50              		.cfi_def_cfa_offset 40
  51              		.cfi_offset 80, -40
  52              		.cfi_offset 81, -36
  53 0008 8046     		mov	r8, r0
  54 000a 8A46     		mov	r10, r1
  55 000c 1546     		mov	r5, r2
  56 000e 1C46     		mov	r4, r3
  57 0010 DDF82890 		ldr	r9, [sp, #40]
  23:Src/assert.c  ****   // instant angle and distance
  24:Src/assert.c  ****   double dDist = (tickRight + tickGauche) / 2.0f;
  58              		.loc 1 24 0
  59 0014 4318     		adds	r3, r0, r1
  60              	.LVL1:
  61 0016 07EE903A 		vmov	s15, r3	@ int
  62 001a F8EEE77A 		vcvt.f32.s32	s15, s15
  63 001e B6EE008A 		vmov.f32	s16, #5.0e-1
  64 0022 67EE887A 		vmul.f32	s15, s15, s16
  65 0026 17EE900A 		vmov	r0, s15
  66              	.LVL2:
  67 002a FFF7FEFF 		bl	__aeabi_f2d
  68              	.LVL3:
  69 002e 0646     		mov	r6, r0
  70 0030 0F46     		mov	r7, r1
  71              	.LVL4:
  25:Src/assert.c  ****   double dTheta = (tickRight - tickGauche) / 2.0f;
  72              		.loc 1 25 0
  73 0032 A8EB0A08 		sub	r8, r8, r10
  74              	.LVL5:
  75 0036 07EE908A 		vmov	s15, r8	@ int
  76 003a F8EEE77A 		vcvt.f32.s32	s15, s15
  77 003e 67EE887A 		vmul.f32	s15, s15, s16
  78 0042 17EE900A 		vmov	r0, s15
  79 0046 FFF7FEFF 		bl	__aeabi_f2d
  80              	.LVL6:
  26:Src/assert.c  **** 
  27:Src/assert.c  ****   // new angle
  28:Src/assert.c  ****   *angle += dTheta / ((AXISLENGTH*TICKSPERMM)/2);
  81              		.loc 1 28 0
  82 004a 24A3     		adr	r3, .L3+4
  83 004c D3E90023 		ldrd	r2, [r3]
  84 0050 FFF7FEFF 		bl	__aeabi_ddiv
  85              	.LVL7:
  86 0054 D9E90023 		ldrd	r2, [r9]
  87 0058 FFF7FEFF 		bl	__aeabi_dadd
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 3


  88              	.LVL8:
  89 005c 41EC180B 		vmov	d8, r0, r1
  90 0060 C9E90001 		strd	r0, [r9]
  29:Src/assert.c  **** 
  30:Src/assert.c  ****   // New X Y
  31:Src/assert.c  ****   double dX = dDist * cos(*angle);
  91              		.loc 1 31 0
  92 0064 41EC100B 		vmov	d0, r0, r1
  93 0068 FFF7FEFF 		bl	cos
  94              	.LVL9:
  95 006c 53EC102B 		vmov	r2, r3, d0
  96 0070 3046     		mov	r0, r6
  97 0072 3946     		mov	r1, r7
  98 0074 FFF7FEFF 		bl	__aeabi_dmul
  99              	.LVL10:
 100 0078 8046     		mov	r8, r0
 101 007a 8946     		mov	r9, r1
 102              	.LVL11:
  32:Src/assert.c  ****   double dY = dDist * sin(*angle);
 103              		.loc 1 32 0
 104 007c B0EE480A 		vmov.f32	s0, s16
 105 0080 F0EE680A 		vmov.f32	s1, s17
 106 0084 FFF7FEFF 		bl	sin
 107              	.LVL12:
 108 0088 53EC102B 		vmov	r2, r3, d0
 109 008c 3046     		mov	r0, r6
 110 008e 3946     		mov	r1, r7
 111 0090 FFF7FEFF 		bl	__aeabi_dmul
 112              	.LVL13:
 113 0094 0646     		mov	r6, r0
 114              	.LVL14:
 115 0096 0F46     		mov	r7, r1
 116              	.LVL15:
  33:Src/assert.c  ****   *positionX += dX / TICKSPERMM;
 117              		.loc 1 33 0
 118 0098 0022     		movs	r2, #0
 119 009a 0F4B     		ldr	r3, .L3
 120 009c 4046     		mov	r0, r8
 121 009e 4946     		mov	r1, r9
 122 00a0 FFF7FEFF 		bl	__aeabi_ddiv
 123              	.LVL16:
 124 00a4 0246     		mov	r2, r0
 125 00a6 0B46     		mov	r3, r1
 126 00a8 D5E90001 		ldrd	r0, [r5]
 127 00ac FFF7FEFF 		bl	__aeabi_dadd
 128              	.LVL17:
 129 00b0 C5E90001 		strd	r0, [r5]
  34:Src/assert.c  ****   *positionY += dY / TICKSPERMM;
 130              		.loc 1 34 0
 131 00b4 0022     		movs	r2, #0
 132 00b6 084B     		ldr	r3, .L3
 133 00b8 3046     		mov	r0, r6
 134 00ba 3946     		mov	r1, r7
 135 00bc FFF7FEFF 		bl	__aeabi_ddiv
 136              	.LVL18:
 137 00c0 0246     		mov	r2, r0
 138 00c2 0B46     		mov	r3, r1
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 4


 139 00c4 D4E90001 		ldrd	r0, [r4]
 140 00c8 FFF7FEFF 		bl	__aeabi_dadd
 141              	.LVL19:
 142 00cc C4E90001 		strd	r0, [r4]
  35:Src/assert.c  **** }
 143              		.loc 1 35 0
 144 00d0 BDEC028B 		vldm	sp!, {d8}
 145              	.LCFI2:
 146              		.cfi_restore 80
 147              		.cfi_restore 81
 148              		.cfi_def_cfa_offset 32
 149 00d4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 150              	.LVL20:
 151              	.L4:
 152              		.align	3
 153              	.L3:
 154 00d8 00003440 		.word	1077149696
 155 00dc 00000000 		.word	0
 156 00e0 00C89940 		.word	1083820032
 157              		.cfi_endproc
 158              	.LFE124:
 160              		.global	__aeabi_dcmplt
 161              		.section	.text.absPerso,"ax",%progbits
 162              		.align	1
 163              		.global	absPerso
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	absPerso:
 170              	.LFB128:
  36:Src/assert.c  **** 
  37:Src/assert.c  **** 
  38:Src/assert.c  **** 
  39:Src/assert.c  **** void stateMachine(int* consigneDroit, int* consigneGauche, double positionX, double positionY, doub
  40:Src/assert.c  **** {
  41:Src/assert.c  ****     static int state = 0;
  42:Src/assert.c  ****     
  43:Src/assert.c  ****     if (endOfMvt == 1)
  44:Src/assert.c  ****     {
  45:Src/assert.c  ****         endOfMvt = 0;
  46:Src/assert.c  ****         state += 1;
  47:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Fin de l'action\n", sizeof("Fin de l'action\n"), HAL_MAX_DELAY)
  48:Src/assert.c  ****     }
  49:Src/assert.c  ****     
  50:Src/assert.c  ****     switch(consignes[state])
  51:Src/assert.c  ****     {
  52:Src/assert.c  ****       case 'M':
  53:Src/assert.c  ****         move(consigneDroit, consigneGauche, positionX, positionY, angle, val1[state], val2[state], 
  54:Src/assert.c  ****         //char buffer[50] = "";
  55:Src/assert.c  **** 		//sprintf(buffer, " move %d / %d blbl\n",(int)val1[state], (int)val2[state]);
  56:Src/assert.c  **** 		//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
  57:Src/assert.c  ****         break;
  58:Src/assert.c  ****         
  59:Src/assert.c  ****       case 'A':
  60:Src/assert.c  **** 		turn(consigneDroit, consigneGauche, positionX, positionY, angle, val1[state], val2[state], tim4, 
  61:Src/assert.c  **** 		break;
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 5


  62:Src/assert.c  ****         
  63:Src/assert.c  ****       case 'T':
  64:Src/assert.c  ****         HAL_Delay(val1[state]);
  65:Src/assert.c  ****         endOfMvt = 1;
  66:Src/assert.c  **** 
  67:Src/assert.c  ****       case 'E':  //end of the match
  68:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Fin de match\n", sizeof("Fin de match\n"), HAL_MAX_DELAY);
  69:Src/assert.c  ****         while(1){}
  70:Src/assert.c  ****         break;
  71:Src/assert.c  **** }
  72:Src/assert.c  **** }
  73:Src/assert.c  **** 
  74:Src/assert.c  **** 
  75:Src/assert.c  **** void turn(int* consigneDroit, int* consigneGauche, double positionX, double positionY, double angle
  76:Src/assert.c  **** {
  77:Src/assert.c  **** 	//char buffer[50] = "";
  78:Src/assert.c  **** 	//sprintf(buffer, "%g / %g / %g\n",targetX, angle, absPerso(angle - targetX));
  79:Src/assert.c  **** 	//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
  80:Src/assert.c  **** 	
  81:Src/assert.c  **** 	if ( absPerso(angle-targetX) > 0.01/*absPerso(angle) < absPerso(targetX)*/)
  82:Src/assert.c  ****     {
  83:Src/assert.c  **** 		if(targetX > 0)
  84:Src/assert.c  **** 		{
  85:Src/assert.c  **** 			*consigneGauche = 1000;
  86:Src/assert.c  **** 			*consigneDroit = -1000;
  87:Src/assert.c  **** 		}
  88:Src/assert.c  **** 		else
  89:Src/assert.c  **** 		{
  90:Src/assert.c  **** 			*consigneGauche = -1000;
  91:Src/assert.c  **** 			*consigneDroit = 1000;
  92:Src/assert.c  **** 		}
  93:Src/assert.c  **** 	}
  94:Src/assert.c  **** 	else
  95:Src/assert.c  **** 	{
  96:Src/assert.c  **** 		*consigneGauche = 0;
  97:Src/assert.c  **** 		*consigneDroit = 0;
  98:Src/assert.c  **** 		endOfMvt = 1;
  99:Src/assert.c  ****     }
 100:Src/assert.c  **** }
 101:Src/assert.c  **** 
 102:Src/assert.c  **** 
 103:Src/assert.c  **** void move(int* consigneDroit, int* consigneGauche, double positionX, double positionY, double angle
 104:Src/assert.c  **** {
 105:Src/assert.c  ****     static int isMvtDone = 0;
 106:Src/assert.c  ****     static int oldErrorDroite = 0;
 107:Src/assert.c  ****     static int errorSumDroite = 0;
 108:Src/assert.c  ****     static int oldErrorGauche = 0;
 109:Src/assert.c  ****     static int errorSumGauche = 0;
 110:Src/assert.c  ****     static double angleInit = 0.0;
 111:Src/assert.c  ****     
 112:Src/assert.c  ****     static int firstLoopPass = 1;
 113:Src/assert.c  ****     
 114:Src/assert.c  ****     if (firstLoopPass == 1)
 115:Src/assert.c  ****     {
 116:Src/assert.c  ****         angleInit = angle;
 117:Src/assert.c  ****         firstLoopPass = 0;
 118:Src/assert.c  ****     }
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 6


 119:Src/assert.c  ****     
 120:Src/assert.c  ****     angle = angle-angleInit;
 121:Src/assert.c  ****     
 122:Src/assert.c  ****     
 123:Src/assert.c  ****     if ((absPerso(positionX - targetX) < 50) && (absPerso(positionY - targetY) < 50))
 124:Src/assert.c  ****     {
 125:Src/assert.c  **** 		//char buffer[50] = "";
 126:Src/assert.c  **** 		//sprintf(buffer, "%d / %d\n",(int)targetX, (int)absPerso(positionY - targetY));
 127:Src/assert.c  **** 		//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 128:Src/assert.c  ****         isMvtDone += 1;
 129:Src/assert.c  ****     }
 130:Src/assert.c  ****     if(isMvtDone > 5)
 131:Src/assert.c  ****     {
 132:Src/assert.c  ****         isMvtDone = 0;
 133:Src/assert.c  ****         endOfMvt = 1;
 134:Src/assert.c  ****         *consigneDroit = 0;
 135:Src/assert.c  ****         *consigneGauche = 0;
 136:Src/assert.c  ****         firstLoopPass = 1;
 137:Src/assert.c  ****     }
 138:Src/assert.c  ****     else
 139:Src/assert.c  ****     {
 140:Src/assert.c  **** 		//No ramps for the time being :/ refer to MainNucleoOLD for implementation
 141:Src/assert.c  **** 		
 142:Src/assert.c  **** 		
 143:Src/assert.c  **** 		//need to modify the target sppeed for positionning
 144:Src/assert.c  **** 		int targetSpeed = 170; //tick per ms
 145:Src/assert.c  **** 		
 146:Src/assert.c  **** 		int errorDroite = targetSpeed - tim5;
 147:Src/assert.c  **** 		errorSumDroite += errorDroite;
 148:Src/assert.c  **** 		/*//circular buffer
 149:Src/assert.c  **** 		int errorSumDroite = 0;
 150:Src/assert.c  **** 		static int indexBuffer = 0;
 151:Src/assert.c  **** 		static int circularBuffer[100] = {0};
 152:Src/assert.c  **** 		for (int i = 0; i < 100; i++) {errorSumDroite += circularBuffer[i];}
 153:Src/assert.c  **** 		circularBuffer[indexBuffer] = errorDroite;
 154:Src/assert.c  **** 		indexBuffer += 1;
 155:Src/assert.c  **** 		if(indexBuffer > 100){indexBuffer = 0;}
 156:Src/assert.c  **** 		*/
 157:Src/assert.c  **** 		int errorVariationDroite = errorDroite - oldErrorDroite;
 158:Src/assert.c  **** 		*consigneDroit = Kp_Droite * errorDroite + Ki_Droite * errorSumDroite + Kd_Droite * errorVariatio
 159:Src/assert.c  **** 		oldErrorDroite = errorDroite;
 160:Src/assert.c  **** 		
 161:Src/assert.c  **** 		
 162:Src/assert.c  **** 		int errorGauche = targetSpeed - tim4;
 163:Src/assert.c  **** 		errorSumGauche += errorGauche;
 164:Src/assert.c  **** 		int errorVariationGauche = errorGauche - oldErrorGauche;
 165:Src/assert.c  **** 		*consigneGauche = Kp_Gauche * errorGauche + Ki_Gauche * errorSumGauche + Kd_Gauche * errorVariati
 166:Src/assert.c  **** 		oldErrorGauche = errorGauche;
 167:Src/assert.c  **** 	}
 168:Src/assert.c  ****     
 169:Src/assert.c  **** }
 170:Src/assert.c  **** 
 171:Src/assert.c  **** double absPerso(double x)
 172:Src/assert.c  **** {
 171              		.loc 1 172 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 7


 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL21:
 176 0000 38B5     		push	{r3, r4, r5, lr}
 177              	.LCFI3:
 178              		.cfi_def_cfa_offset 16
 179              		.cfi_offset 3, -16
 180              		.cfi_offset 4, -12
 181              		.cfi_offset 5, -8
 182              		.cfi_offset 14, -4
 183 0002 55EC104B 		vmov	r4, r5, d0
 173:Src/assert.c  **** 	if(x < 0) x = -x; 
 184              		.loc 1 173 0
 185 0006 0022     		movs	r2, #0
 186 0008 0023     		movs	r3, #0
 187 000a 10EE100A 		vmov	r0, s0	@ int
 188 000e 2946     		mov	r1, r5
 189 0010 FFF7FEFF 		bl	__aeabi_dcmplt
 190              	.LVL22:
 191 0014 10B9     		cbnz	r0, .L10
 192              	.LVL23:
 193              	.L6:
 174:Src/assert.c  **** 	return x;
 175:Src/assert.c  **** }
 194              		.loc 1 175 0
 195 0016 45EC104B 		vmov	d0, r4, r5
 196 001a 38BD     		pop	{r3, r4, r5, pc}
 197              	.LVL24:
 198              	.L10:
 173:Src/assert.c  **** 	if(x < 0) x = -x; 
 199              		.loc 1 173 0 discriminator 1
 200 001c 05F10043 		add	r3, r5, #-2147483648
 201 0020 1D46     		mov	r5, r3
 202              	.LVL25:
 203 0022 F8E7     		b	.L6
 204              		.cfi_endproc
 205              	.LFE128:
 207              		.global	__aeabi_dsub
 208              		.global	__aeabi_dcmpgt
 209              		.section	.text.turn,"ax",%progbits
 210              		.align	1
 211              		.global	turn
 212              		.syntax unified
 213              		.thumb
 214              		.thumb_func
 215              		.fpu fpv4-sp-d16
 217              	turn:
 218              	.LFB126:
  76:Src/assert.c  **** 	//char buffer[50] = "";
 219              		.loc 1 76 0
 220              		.cfi_startproc
 221              		@ args = 64, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              	.LVL26:
 224 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 225              	.LCFI4:
 226              		.cfi_def_cfa_offset 24
 227              		.cfi_offset 3, -24
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 8


 228              		.cfi_offset 4, -20
 229              		.cfi_offset 5, -16
 230              		.cfi_offset 6, -12
 231              		.cfi_offset 7, -8
 232              		.cfi_offset 14, -4
 233 0002 0646     		mov	r6, r0
 234 0004 0F46     		mov	r7, r1
 235 0006 55EC134B 		vmov	r4, r5, d3
  81:Src/assert.c  ****     {
 236              		.loc 1 81 0
 237 000a 13EE102A 		vmov	r2, s6	@ int
 238              	.LVL27:
 239 000e 2B46     		mov	r3, r5
 240              	.LVL28:
 241 0010 51EC120B 		vmov	r0, r1, d2
 242              	.LVL29:
 243 0014 FFF7FEFF 		bl	__aeabi_dsub
 244              	.LVL30:
 245 0018 41EC100B 		vmov	d0, r0, r1
 246 001c FFF7FEFF 		bl	absPerso
 247              	.LVL31:
 248 0020 13A3     		adr	r3, .L22+8
 249 0022 D3E90023 		ldrd	r2, [r3]
 250 0026 51EC100B 		vmov	r0, r1, d0
 251 002a FFF7FEFF 		bl	__aeabi_dcmpgt
 252              	.LVL32:
 253 002e 98B1     		cbz	r0, .L19
  83:Src/assert.c  **** 		{
 254              		.loc 1 83 0
 255 0030 0022     		movs	r2, #0
 256 0032 0023     		movs	r3, #0
 257 0034 2046     		mov	r0, r4
 258 0036 2946     		mov	r1, r5
 259 0038 FFF7FEFF 		bl	__aeabi_dcmpgt
 260              	.LVL33:
 261 003c 30B1     		cbz	r0, .L20
  85:Src/assert.c  **** 			*consigneDroit = -1000;
 262              		.loc 1 85 0
 263 003e 4FF47A73 		mov	r3, #1000
 264 0042 3B60     		str	r3, [r7]
  86:Src/assert.c  **** 		}
 265              		.loc 1 86 0
 266 0044 A3F5FA63 		sub	r3, r3, #2000
 267 0048 3360     		str	r3, [r6]
 268 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 269              	.LVL34:
 270              	.L20:
  90:Src/assert.c  **** 			*consigneDroit = 1000;
 271              		.loc 1 90 0
 272 004c 064B     		ldr	r3, .L22
 273 004e 3B60     		str	r3, [r7]
  91:Src/assert.c  **** 		}
 274              		.loc 1 91 0
 275 0050 4FF47A73 		mov	r3, #1000
 276 0054 3360     		str	r3, [r6]
 277 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 278              	.LVL35:
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 9


 279              	.L19:
  96:Src/assert.c  **** 		*consigneDroit = 0;
 280              		.loc 1 96 0
 281 0058 0023     		movs	r3, #0
 282 005a 3B60     		str	r3, [r7]
  97:Src/assert.c  **** 		endOfMvt = 1;
 283              		.loc 1 97 0
 284 005c 3360     		str	r3, [r6]
  98:Src/assert.c  ****     }
 285              		.loc 1 98 0
 286 005e 0122     		movs	r2, #1
 287 0060 024B     		ldr	r3, .L22+4
 288 0062 1A60     		str	r2, [r3]
 289 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 290              	.LVL36:
 291              	.L23:
 292 0066 00BF     		.align	3
 293              	.L22:
 294 0068 18FCFFFF 		.word	-1000
 295 006c 00000000 		.word	.LANCHOR0
 296 0070 7B14AE47 		.word	1202590843
 297 0074 E17A843F 		.word	1065646817
 298              		.cfi_endproc
 299              	.LFE126:
 301              		.global	__aeabi_i2d
 302              		.global	__aeabi_d2iz
 303              		.section	.text.move,"ax",%progbits
 304              		.align	1
 305              		.global	move
 306              		.syntax unified
 307              		.thumb
 308              		.thumb_func
 309              		.fpu fpv4-sp-d16
 311              	move:
 312              	.LFB127:
 104:Src/assert.c  ****     static int isMvtDone = 0;
 313              		.loc 1 104 0
 314              		.cfi_startproc
 315              		@ args = 64, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              	.LVL37:
 318 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 319              	.LCFI5:
 320              		.cfi_def_cfa_offset 40
 321              		.cfi_offset 3, -40
 322              		.cfi_offset 4, -36
 323              		.cfi_offset 5, -32
 324              		.cfi_offset 6, -28
 325              		.cfi_offset 7, -24
 326              		.cfi_offset 8, -20
 327              		.cfi_offset 9, -16
 328              		.cfi_offset 10, -12
 329              		.cfi_offset 11, -8
 330              		.cfi_offset 14, -4
 331 0004 2DED068B 		vpush.64	{d8, d9, d10}
 332              	.LCFI6:
 333              		.cfi_def_cfa_offset 64
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 10


 334              		.cfi_offset 80, -64
 335              		.cfi_offset 81, -60
 336              		.cfi_offset 82, -56
 337              		.cfi_offset 83, -52
 338              		.cfi_offset 84, -48
 339              		.cfi_offset 85, -44
 340 0008 0746     		mov	r7, r0
 341 000a 0E46     		mov	r6, r1
 342 000c 5BEC10AB 		vmov	r10, fp, d0
 343 0010 B0EE41AA 		vmov.f32	s20, s2
 344 0014 F0EE61AA 		vmov.f32	s21, s3
 345 0018 51EC120B 		vmov	r0, r1, d2
 346              	.LVL38:
 347 001c B0EE438A 		vmov.f32	s16, s6
 348 0020 F0EE638A 		vmov.f32	s17, s7
 349 0024 B0EE449A 		vmov.f32	s18, s8
 350 0028 F0EE649A 		vmov.f32	s19, s9
 351 002c 1446     		mov	r4, r2
 352 002e 1D46     		mov	r5, r3
 114:Src/assert.c  ****     {
 353              		.loc 1 114 0
 354 0030 3C4B     		ldr	r3, .L36
 355              	.LVL39:
 356 0032 1B68     		ldr	r3, [r3]
 357 0034 012B     		cmp	r3, #1
 358 0036 62D0     		beq	.L34
 359              	.LVL40:
 360              	.L25:
 120:Src/assert.c  ****     
 361              		.loc 1 120 0
 362 0038 3B4B     		ldr	r3, .L36+4
 363 003a D3E90023 		ldrd	r2, [r3]
 364 003e FFF7FEFF 		bl	__aeabi_dsub
 365              	.LVL41:
 366 0042 8046     		mov	r8, r0
 367 0044 8946     		mov	r9, r1
 368              	.LVL42:
 123:Src/assert.c  ****     {
 369              		.loc 1 123 0
 370 0046 53EC182B 		vmov	r2, r3, d8
 371 004a 5046     		mov	r0, r10
 372 004c 5946     		mov	r1, fp
 373 004e FFF7FEFF 		bl	__aeabi_dsub
 374              	.LVL43:
 375 0052 41EC100B 		vmov	d0, r0, r1
 376 0056 FFF7FEFF 		bl	absPerso
 377              	.LVL44:
 378 005a 0022     		movs	r2, #0
 379 005c 334B     		ldr	r3, .L36+8
 380 005e 51EC100B 		vmov	r0, r1, d0
 381 0062 FFF7FEFF 		bl	__aeabi_dcmplt
 382              	.LVL45:
 383 0066 A0B1     		cbz	r0, .L26
 123:Src/assert.c  ****     {
 384              		.loc 1 123 0 is_stmt 0 discriminator 1
 385 0068 53EC192B 		vmov	r2, r3, d9
 386 006c 51EC1A0B 		vmov	r0, r1, d10
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 11


 387 0070 FFF7FEFF 		bl	__aeabi_dsub
 388              	.LVL46:
 389 0074 41EC100B 		vmov	d0, r0, r1
 390 0078 FFF7FEFF 		bl	absPerso
 391              	.LVL47:
 392 007c 0022     		movs	r2, #0
 393 007e 2B4B     		ldr	r3, .L36+8
 394 0080 51EC100B 		vmov	r0, r1, d0
 395 0084 FFF7FEFF 		bl	__aeabi_dcmplt
 396              	.LVL48:
 397 0088 18B1     		cbz	r0, .L26
 128:Src/assert.c  ****     }
 398              		.loc 1 128 0 is_stmt 1
 399 008a 294A     		ldr	r2, .L36+12
 400 008c 1368     		ldr	r3, [r2]
 401 008e 0133     		adds	r3, r3, #1
 402 0090 1360     		str	r3, [r2]
 403              	.L26:
 130:Src/assert.c  ****     {
 404              		.loc 1 130 0
 405 0092 274B     		ldr	r3, .L36+12
 406 0094 1B68     		ldr	r3, [r3]
 407 0096 052B     		cmp	r3, #5
 408 0098 38DC     		bgt	.L35
 409              	.LVL49:
 410              	.LBB2:
 146:Src/assert.c  **** 		errorSumDroite += errorDroite;
 411              		.loc 1 146 0
 412 009a C5F1AA05 		rsb	r5, r5, #170
 413              	.LVL50:
 147:Src/assert.c  **** 		/*//circular buffer
 414              		.loc 1 147 0
 415 009e 254A     		ldr	r2, .L36+16
 416 00a0 1368     		ldr	r3, [r2]
 417 00a2 2B44     		add	r3, r3, r5
 418 00a4 1360     		str	r3, [r2]
 419              	.LVL51:
 158:Src/assert.c  **** 		oldErrorDroite = errorDroite;
 420              		.loc 1 158 0
 421 00a6 05EB8505 		add	r5, r5, r5, lsl #2
 422              	.LVL52:
 423 00aa 4FEA450A 		lsl	r10, r5, #1
 424              	.LVL53:
 425 00ae 0022     		movs	r2, #0
 426 00b0 214B     		ldr	r3, .L36+20
 427 00b2 4046     		mov	r0, r8
 428 00b4 4946     		mov	r1, r9
 429 00b6 FFF7FEFF 		bl	__aeabi_dmul
 430              	.LVL54:
 431 00ba 8046     		mov	r8, r0
 432              	.LVL55:
 433 00bc 8946     		mov	r9, r1
 434 00be 5046     		mov	r0, r10
 435 00c0 FFF7FEFF 		bl	__aeabi_i2d
 436              	.LVL56:
 437 00c4 4246     		mov	r2, r8
 438 00c6 4B46     		mov	r3, r9
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 12


 439 00c8 FFF7FEFF 		bl	__aeabi_dadd
 440              	.LVL57:
 441 00cc FFF7FEFF 		bl	__aeabi_d2iz
 442              	.LVL58:
 443 00d0 3860     		str	r0, [r7]
 162:Src/assert.c  **** 		errorSumGauche += errorGauche;
 444              		.loc 1 162 0
 445 00d2 C4F1AA04 		rsb	r4, r4, #170
 446              	.LVL59:
 163:Src/assert.c  **** 		int errorVariationGauche = errorGauche - oldErrorGauche;
 447              		.loc 1 163 0
 448 00d6 194A     		ldr	r2, .L36+24
 449 00d8 1368     		ldr	r3, [r2]
 450 00da 2344     		add	r3, r3, r4
 451 00dc 1360     		str	r3, [r2]
 452              	.LVL60:
 165:Src/assert.c  **** 		oldErrorGauche = errorGauche;
 453              		.loc 1 165 0
 454 00de 04EB8404 		add	r4, r4, r4, lsl #2
 455              	.LVL61:
 456 00e2 6000     		lsls	r0, r4, #1
 457 00e4 FFF7FEFF 		bl	__aeabi_i2d
 458              	.LVL62:
 459 00e8 4246     		mov	r2, r8
 460 00ea 4B46     		mov	r3, r9
 461 00ec FFF7FEFF 		bl	__aeabi_dsub
 462              	.LVL63:
 463 00f0 FFF7FEFF 		bl	__aeabi_d2iz
 464              	.LVL64:
 465 00f4 3060     		str	r0, [r6]
 466              	.LVL65:
 467              	.L24:
 468              	.LBE2:
 169:Src/assert.c  **** 
 469              		.loc 1 169 0
 470 00f6 BDEC068B 		vldm	sp!, {d8-d10}
 471              	.LCFI7:
 472              		.cfi_remember_state
 473              		.cfi_restore 84
 474              		.cfi_restore 85
 475              		.cfi_restore 82
 476              		.cfi_restore 83
 477              		.cfi_restore 80
 478              		.cfi_restore 81
 479              		.cfi_def_cfa_offset 40
 480              	.LVL66:
 481 00fa BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 482              	.LVL67:
 483              	.L34:
 484              	.LCFI8:
 485              		.cfi_restore_state
 116:Src/assert.c  ****         firstLoopPass = 0;
 486              		.loc 1 116 0
 487 00fe 0A4B     		ldr	r3, .L36+4
 488 0100 83ED002B 		vstr.64	d2, [r3]
 117:Src/assert.c  ****     }
 489              		.loc 1 117 0
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 13


 490 0104 0022     		movs	r2, #0
 491              	.LVL68:
 492 0106 074B     		ldr	r3, .L36
 493 0108 1A60     		str	r2, [r3]
 494 010a 95E7     		b	.L25
 495              	.LVL69:
 496              	.L35:
 132:Src/assert.c  ****         endOfMvt = 1;
 497              		.loc 1 132 0
 498 010c 0023     		movs	r3, #0
 499 010e 084A     		ldr	r2, .L36+12
 500 0110 1360     		str	r3, [r2]
 133:Src/assert.c  ****         *consigneDroit = 0;
 501              		.loc 1 133 0
 502 0112 0122     		movs	r2, #1
 503 0114 0A49     		ldr	r1, .L36+28
 504 0116 0A60     		str	r2, [r1]
 134:Src/assert.c  ****         *consigneGauche = 0;
 505              		.loc 1 134 0
 506 0118 3B60     		str	r3, [r7]
 135:Src/assert.c  ****         firstLoopPass = 1;
 507              		.loc 1 135 0
 508 011a 3360     		str	r3, [r6]
 136:Src/assert.c  ****     }
 509              		.loc 1 136 0
 510 011c 014B     		ldr	r3, .L36
 511 011e 1A60     		str	r2, [r3]
 512 0120 E9E7     		b	.L24
 513              	.L37:
 514 0122 00BF     		.align	2
 515              	.L36:
 516 0124 00000000 		.word	.LANCHOR1
 517 0128 00000000 		.word	.LANCHOR2
 518 012c 00004940 		.word	1078525952
 519 0130 00000000 		.word	.LANCHOR3
 520 0134 00000000 		.word	.LANCHOR4
 521 0138 00408F40 		.word	1083129856
 522 013c 00000000 		.word	.LANCHOR5
 523 0140 00000000 		.word	.LANCHOR0
 524              		.cfi_endproc
 525              	.LFE127:
 527              		.global	__aeabi_d2uiz
 528              		.section	.text.stateMachine,"ax",%progbits
 529              		.align	1
 530              		.global	stateMachine
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu fpv4-sp-d16
 536              	stateMachine:
 537              	.LFB125:
  40:Src/assert.c  ****     static int state = 0;
 538              		.loc 1 40 0
 539              		.cfi_startproc
 540              		@ args = 64, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              	.LVL70:
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 14


 543 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 544              	.LCFI9:
 545              		.cfi_def_cfa_offset 28
 546              		.cfi_offset 4, -28
 547              		.cfi_offset 5, -24
 548              		.cfi_offset 6, -20
 549              		.cfi_offset 7, -16
 550              		.cfi_offset 8, -12
 551              		.cfi_offset 9, -8
 552              		.cfi_offset 14, -4
 553 0004 2DED068B 		vpush.64	{d8, d9, d10}
 554              	.LCFI10:
 555              		.cfi_def_cfa_offset 52
 556              		.cfi_offset 80, -52
 557              		.cfi_offset 81, -48
 558              		.cfi_offset 82, -44
 559              		.cfi_offset 83, -40
 560              		.cfi_offset 84, -36
 561              		.cfi_offset 85, -32
 562 0008 91B0     		sub	sp, sp, #68
 563              	.LCFI11:
 564              		.cfi_def_cfa_offset 120
 565 000a 0646     		mov	r6, r0
 566 000c 0F46     		mov	r7, r1
 567 000e B0EE408A 		vmov.f32	s16, s0
 568 0012 F0EE608A 		vmov.f32	s17, s1
 569 0016 B0EE419A 		vmov.f32	s18, s2
 570 001a F0EE619A 		vmov.f32	s19, s3
 571 001e B0EE42AA 		vmov.f32	s20, s4
 572 0022 F0EE62AA 		vmov.f32	s21, s5
 573 0026 9046     		mov	r8, r2
 574 0028 9946     		mov	r9, r3
  43:Src/assert.c  ****     {
 575              		.loc 1 43 0
 576 002a 474B     		ldr	r3, .L49
 577              	.LVL71:
 578 002c 1B68     		ldr	r3, [r3]
 579 002e 012B     		cmp	r3, #1
 580 0030 12D0     		beq	.L48
 581              	.LVL72:
 582              	.L39:
  50:Src/assert.c  ****     {
 583              		.loc 1 50 0
 584 0032 464B     		ldr	r3, .L49+4
 585 0034 1B68     		ldr	r3, [r3]
 586 0036 464A     		ldr	r2, .L49+8
 587 0038 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 588 003a 413A     		subs	r2, r2, #65
 589 003c 132A     		cmp	r2, #19
 590 003e 41D8     		bhi	.L38
 591 0040 DFE802F0 		tbb	[pc, r2]
 592              	.L42:
 593 0044 45       		.byte	(.L41-.L42)/2
 594 0045 40       		.byte	(.L38-.L42)/2
 595 0046 40       		.byte	(.L38-.L42)/2
 596 0047 40       		.byte	(.L38-.L42)/2
 597 0048 79       		.byte	(.L43-.L42)/2
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 15


 598 0049 40       		.byte	(.L38-.L42)/2
 599 004a 40       		.byte	(.L38-.L42)/2
 600 004b 40       		.byte	(.L38-.L42)/2
 601 004c 40       		.byte	(.L38-.L42)/2
 602 004d 40       		.byte	(.L38-.L42)/2
 603 004e 40       		.byte	(.L38-.L42)/2
 604 004f 40       		.byte	(.L38-.L42)/2
 605 0050 19       		.byte	(.L44-.L42)/2
 606 0051 40       		.byte	(.L38-.L42)/2
 607 0052 40       		.byte	(.L38-.L42)/2
 608 0053 40       		.byte	(.L38-.L42)/2
 609 0054 40       		.byte	(.L38-.L42)/2
 610 0055 40       		.byte	(.L38-.L42)/2
 611 0056 40       		.byte	(.L38-.L42)/2
 612 0057 6D       		.byte	(.L45-.L42)/2
 613              	.LVL73:
 614              		.p2align 1
 615              	.L48:
  45:Src/assert.c  ****         state += 1;
 616              		.loc 1 45 0
 617 0058 0022     		movs	r2, #0
 618              	.LVL74:
 619 005a 3B4B     		ldr	r3, .L49
 620 005c 1A60     		str	r2, [r3]
  46:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Fin de l'action\n", sizeof("Fin de l'action\n"), HAL_MAX_DELAY)
 621              		.loc 1 46 0
 622 005e 3B4A     		ldr	r2, .L49+4
 623 0060 1368     		ldr	r3, [r2]
 624 0062 0133     		adds	r3, r3, #1
 625 0064 1360     		str	r3, [r2]
  47:Src/assert.c  ****     }
 626              		.loc 1 47 0
 627 0066 4FF0FF33 		mov	r3, #-1
 628 006a 1122     		movs	r2, #17
 629 006c 3949     		ldr	r1, .L49+12
 630              	.LVL75:
 631 006e 1EA8     		add	r0, sp, #120
 632              	.LVL76:
 633 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 634              	.LVL77:
 635 0074 DDE7     		b	.L39
 636              	.L44:
  53:Src/assert.c  ****         //char buffer[50] = "";
 637              		.loc 1 53 0
 638 0076 DB00     		lsls	r3, r3, #3
 639 0078 374A     		ldr	r2, .L49+16
 640 007a 1A44     		add	r2, r2, r3
 641 007c 92ED004B 		vldr.64	d4, [r2]
 642 0080 364A     		ldr	r2, .L49+20
 643 0082 1344     		add	r3, r3, r2
 644 0084 93ED003B 		vldr.64	d3, [r3]
 645 0088 6C46     		mov	r4, sp
 646 008a 1EAD     		add	r5, sp, #120
 647 008c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 648 008e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 649 0090 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 650 0092 0FC4     		stmia	r4!, {r0, r1, r2, r3}
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 16


 651 0094 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 652 0096 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 653 0098 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 654 009c 84E80F00 		stm	r4, {r0, r1, r2, r3}
 655 00a0 4B46     		mov	r3, r9
 656 00a2 4246     		mov	r2, r8
 657 00a4 B0EE4A2A 		vmov.f32	s4, s20
 658 00a8 F0EE6A2A 		vmov.f32	s5, s21
 659 00ac B0EE491A 		vmov.f32	s2, s18
 660 00b0 F0EE691A 		vmov.f32	s3, s19
 661 00b4 B0EE480A 		vmov.f32	s0, s16
 662 00b8 F0EE680A 		vmov.f32	s1, s17
 663 00bc 3946     		mov	r1, r7
 664 00be 3046     		mov	r0, r6
 665 00c0 FFF7FEFF 		bl	move
 666              	.LVL78:
 667              	.L38:
  72:Src/assert.c  **** 
 668              		.loc 1 72 0
 669 00c4 11B0     		add	sp, sp, #68
 670              	.LCFI12:
 671              		.cfi_remember_state
 672              		.cfi_def_cfa_offset 52
 673              		@ sp needed
 674 00c6 BDEC068B 		vldm	sp!, {d8-d10}
 675              	.LCFI13:
 676              		.cfi_restore 84
 677              		.cfi_restore 85
 678              		.cfi_restore 82
 679              		.cfi_restore 83
 680              		.cfi_restore 80
 681              		.cfi_restore 81
 682              		.cfi_def_cfa_offset 28
 683              	.LVL79:
 684 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 685              	.LVL80:
 686              	.L41:
 687              	.LCFI14:
 688              		.cfi_restore_state
  60:Src/assert.c  **** 		break;
 689              		.loc 1 60 0
 690 00ce DB00     		lsls	r3, r3, #3
 691 00d0 214A     		ldr	r2, .L49+16
 692 00d2 1A44     		add	r2, r2, r3
 693 00d4 92ED004B 		vldr.64	d4, [r2]
 694 00d8 204A     		ldr	r2, .L49+20
 695 00da 1344     		add	r3, r3, r2
 696 00dc 93ED003B 		vldr.64	d3, [r3]
 697 00e0 6C46     		mov	r4, sp
 698 00e2 1EAD     		add	r5, sp, #120
 699 00e4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 700 00e6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 701 00e8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 702 00ea 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 703 00ec 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 704 00ee 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 705 00f0 95E80F00 		ldm	r5, {r0, r1, r2, r3}
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 17


 706 00f4 84E80F00 		stm	r4, {r0, r1, r2, r3}
 707 00f8 4B46     		mov	r3, r9
 708 00fa 4246     		mov	r2, r8
 709 00fc B0EE4A2A 		vmov.f32	s4, s20
 710 0100 F0EE6A2A 		vmov.f32	s5, s21
 711 0104 B0EE491A 		vmov.f32	s2, s18
 712 0108 F0EE691A 		vmov.f32	s3, s19
 713 010c B0EE480A 		vmov.f32	s0, s16
 714 0110 F0EE680A 		vmov.f32	s1, s17
 715 0114 3946     		mov	r1, r7
 716 0116 3046     		mov	r0, r6
 717 0118 FFF7FEFF 		bl	turn
 718              	.LVL81:
  61:Src/assert.c  ****         
 719              		.loc 1 61 0
 720 011c D2E7     		b	.L38
 721              	.L45:
  64:Src/assert.c  ****         endOfMvt = 1;
 722              		.loc 1 64 0
 723 011e 0F4A     		ldr	r2, .L49+20
 724 0120 02EBC303 		add	r3, r2, r3, lsl #3
 725 0124 D3E90001 		ldrd	r0, [r3]
 726 0128 FFF7FEFF 		bl	__aeabi_d2uiz
 727              	.LVL82:
 728 012c FFF7FEFF 		bl	HAL_Delay
 729              	.LVL83:
  65:Src/assert.c  **** 
 730              		.loc 1 65 0
 731 0130 0122     		movs	r2, #1
 732 0132 054B     		ldr	r3, .L49
 733 0134 1A60     		str	r2, [r3]
 734              	.L43:
  68:Src/assert.c  ****         while(1){}
 735              		.loc 1 68 0
 736 0136 4FF0FF33 		mov	r3, #-1
 737 013a 0E22     		movs	r2, #14
 738 013c 0849     		ldr	r1, .L49+24
 739 013e 1EA8     		add	r0, sp, #120
 740 0140 FFF7FEFF 		bl	HAL_UART_Transmit
 741              	.LVL84:
 742              	.L46:
 743 0144 FEE7     		b	.L46
 744              	.L50:
 745 0146 00BF     		.align	2
 746              	.L49:
 747 0148 00000000 		.word	.LANCHOR0
 748 014c 00000000 		.word	.LANCHOR6
 749 0150 00000000 		.word	.LANCHOR7
 750 0154 00000000 		.word	.LC0
 751 0158 00000000 		.word	.LANCHOR8
 752 015c 00000000 		.word	.LANCHOR9
 753 0160 14000000 		.word	.LC1
 754              		.cfi_endproc
 755              	.LFE125:
 757              		.global	endOfMvt
 758              		.global	val2
 759              		.global	val1
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 18


 760              		.global	consignes
 761              		.section	.bss.angleInit.9156,"aw",%nobits
 762              		.align	3
 763              		.set	.LANCHOR2,. + 0
 766              	angleInit.9156:
 767 0000 00000000 		.space	8
 767      00000000 
 768              		.section	.bss.endOfMvt,"aw",%nobits
 769              		.align	2
 770              		.set	.LANCHOR0,. + 0
 773              	endOfMvt:
 774 0000 00000000 		.space	4
 775              		.section	.bss.errorSumDroite.9153,"aw",%nobits
 776              		.align	2
 777              		.set	.LANCHOR4,. + 0
 780              	errorSumDroite.9153:
 781 0000 00000000 		.space	4
 782              		.section	.bss.errorSumGauche.9155,"aw",%nobits
 783              		.align	2
 784              		.set	.LANCHOR5,. + 0
 787              	errorSumGauche.9155:
 788 0000 00000000 		.space	4
 789              		.section	.bss.isMvtDone.9151,"aw",%nobits
 790              		.align	2
 791              		.set	.LANCHOR3,. + 0
 794              	isMvtDone.9151:
 795 0000 00000000 		.space	4
 796              		.section	.bss.state.9120,"aw",%nobits
 797              		.align	2
 798              		.set	.LANCHOR6,. + 0
 801              	state.9120:
 802 0000 00000000 		.space	4
 803              		.section	.bss.val2,"aw",%nobits
 804              		.align	3
 805              		.set	.LANCHOR8,. + 0
 808              	val2:
 809 0000 00000000 		.space	56
 809      00000000 
 809      00000000 
 809      00000000 
 809      00000000 
 810              		.section	.data.consignes,"aw",%progbits
 811              		.align	2
 812              		.set	.LANCHOR7,. + 0
 815              	consignes:
 816 0000 4D       		.byte	77
 817 0001 41       		.byte	65
 818 0002 4D       		.byte	77
 819 0003 41       		.byte	65
 820 0004 54       		.byte	84
 821 0005 4D       		.byte	77
 822 0006 45       		.byte	69
 823              		.section	.data.firstLoopPass.9157,"aw",%progbits
 824              		.align	2
 825              		.set	.LANCHOR1,. + 0
 828              	firstLoopPass.9157:
 829 0000 01000000 		.word	1
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 19


 830              		.section	.data.val1,"aw",%progbits
 831              		.align	3
 832              		.set	.LANCHOR9,. + 0
 835              	val1:
 836 0000 00000000 		.word	0
 837 0004 00005940 		.word	1079574528
 838 0008 00000000 		.word	0
 839 000c 0000E03F 		.word	1071644672
 840 0010 00000000 		.word	0
 841 0014 00005940 		.word	1079574528
 842 0018 00000000 		.word	0
 843 001c 0000E0BF 		.word	-1075838976
 844 0020 00000000 		.word	0
 845 0024 00409F40 		.word	1084178432
 846 0028 00000000 		.word	0
 847 002c 00005940 		.word	1079574528
 848 0030 00000000 		.word	0
 849 0034 00000000 		.word	0
 850              		.section	.rodata.stateMachine.str1.4,"aMS",%progbits,1
 851              		.align	2
 852              	.LC0:
 853 0000 46696E20 		.ascii	"Fin de l'action\012\000"
 853      6465206C 
 853      27616374 
 853      696F6E0A 
 853      00
 854 0011 000000   		.space	3
 855              	.LC1:
 856 0014 46696E20 		.ascii	"Fin de match\012\000"
 856      6465206D 
 856      61746368 
 856      0A00
 857              		.text
 858              	.Letext0:
 859              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 860              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 861              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 862              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 863              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 864              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 865              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 866              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 867              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 868              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 869              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 870              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 871              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 872              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s 			page 20


DEFINED SYMBOLS
                            *ABS*:00000000 assert.c
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:22     .text.updatePos:00000000 $t
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:29     .text.updatePos:00000000 updatePos
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:154    .text.updatePos:000000d8 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:162    .text.absPerso:00000000 $t
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:169    .text.absPerso:00000000 absPerso
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:210    .text.turn:00000000 $t
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:217    .text.turn:00000000 turn
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:294    .text.turn:00000068 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:304    .text.move:00000000 $t
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:311    .text.move:00000000 move
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:516    .text.move:00000124 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:529    .text.stateMachine:00000000 $t
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:536    .text.stateMachine:00000000 stateMachine
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:593    .text.stateMachine:00000044 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:614    .text.stateMachine:00000058 $t
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:747    .text.stateMachine:00000148 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:773    .bss.endOfMvt:00000000 endOfMvt
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:808    .bss.val2:00000000 val2
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:835    .data.val1:00000000 val1
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:815    .data.consignes:00000000 consignes
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:762    .bss.angleInit.9156:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:766    .bss.angleInit.9156:00000000 angleInit.9156
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:769    .bss.endOfMvt:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:776    .bss.errorSumDroite.9153:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:780    .bss.errorSumDroite.9153:00000000 errorSumDroite.9153
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:783    .bss.errorSumGauche.9155:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:787    .bss.errorSumGauche.9155:00000000 errorSumGauche.9155
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:790    .bss.isMvtDone.9151:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:794    .bss.isMvtDone.9151:00000000 isMvtDone.9151
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:797    .bss.state.9120:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:801    .bss.state.9120:00000000 state.9120
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:804    .bss.val2:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:811    .data.consignes:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:824    .data.firstLoopPass.9157:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:828    .data.firstLoopPass.9157:00000000 firstLoopPass.9157
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:831    .data.val1:00000000 $d
C:\Users\smigaud\AppData\Local\Temp\ccHLdq3l.s:851    .rodata.stateMachine.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_ddiv
__aeabi_dadd
__aeabi_dmul
cos
sin
__aeabi_dcmplt
__aeabi_dsub
__aeabi_dcmpgt
__aeabi_i2d
__aeabi_d2iz
__aeabi_d2uiz
HAL_UART_Transmit
HAL_Delay
