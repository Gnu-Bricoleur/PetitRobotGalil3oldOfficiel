ARM GAS  /tmp/cc2Ka9v7.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"assert.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	__aeabi_f2d
  21              		.global	__aeabi_ddiv
  22              		.global	__aeabi_dadd
  23              		.global	__aeabi_dmul
  24              		.section	.text.updatePos,"ax",%progbits
  25              		.align	2
  26              		.global	updatePos
  27              		.thumb
  28              		.thumb_func
  30              	updatePos:
  31              	.LFB123:
  32              		.file 1 "Src/assert.c"
   1:Src/assert.c  **** #include "assert.h"
   2:Src/assert.c  **** 
   3:Src/assert.c  **** #define Kp_Droite 10
   4:Src/assert.c  **** #define Ki_Droite 0
   5:Src/assert.c  **** #define Kd_Droite 0
   6:Src/assert.c  **** 
   7:Src/assert.c  **** 
   8:Src/assert.c  **** #define Kp_Gauche 10
   9:Src/assert.c  **** #define Ki_Gauche 0
  10:Src/assert.c  **** #define Kd_Gauche 0
  11:Src/assert.c  **** 
  12:Src/assert.c  **** #define Kp_Angle 1000
  13:Src/assert.c  **** 
  14:Src/assert.c  **** char consignes[] = {'M', 'A', 'M',  'A', 'T',   'M', 'E'};
  15:Src/assert.c  **** double val1[] = {    200, 1, 200, -1, 2000,  200, 0 };
  16:Src/assert.c  **** double val2[] = {    0,   0,   0 ,   0,   0,     0,   0 };
  17:Src/assert.c  **** 
  18:Src/assert.c  **** int endOfMvt = 0;
  19:Src/assert.c  **** 
  20:Src/assert.c  **** 
  21:Src/assert.c  **** void updatePos(int tickRight, int tickGauche, double* positionX, double* positionY, double* angle)
  22:Src/assert.c  **** { 
  33              		.loc 1 22 0
  34              		.cfi_startproc
  35              		@ args = 4, pretend = 0, frame = 0
  36              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2Ka9v7.s 			page 2


  37              	.LVL0:
  38 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 32
  41              		.cfi_offset 4, -32
  42              		.cfi_offset 5, -28
  43              		.cfi_offset 6, -24
  44              		.cfi_offset 7, -20
  45              		.cfi_offset 8, -16
  46              		.cfi_offset 9, -12
  47              		.cfi_offset 10, -8
  48              		.cfi_offset 14, -4
  49 0004 2DED028B 		fstmfdd	sp!, {d8}
  50              	.LCFI1:
  51              		.cfi_def_cfa_offset 40
  52              		.cfi_offset 80, -40
  53              		.cfi_offset 81, -36
  54 0008 8046     		mov	r8, r0
  55 000a 8A46     		mov	r10, r1
  56 000c 1546     		mov	r5, r2
  57 000e 1C46     		mov	r4, r3
  58 0010 DDF82890 		ldr	r9, [sp, #40]
  23:Src/assert.c  ****   // instant angle and distance
  24:Src/assert.c  ****   double dDist = (tickRight + tickGauche) / 2.0f;
  59              		.loc 1 24 0
  60 0014 4318     		adds	r3, r0, r1
  61              	.LVL1:
  62 0016 07EE903A 		fmsr	s15, r3	@ int
  63 001a F8EEE77A 		fsitos	s15, s15
  64 001e B6EE008A 		fconsts	s16, #96
  65 0022 67EE887A 		fmuls	s15, s15, s16
  66 0026 17EE900A 		fmrs	r0, s15
  67              	.LVL2:
  68 002a FFF7FEFF 		bl	__aeabi_f2d
  69              	.LVL3:
  70 002e 0646     		mov	r6, r0
  71 0030 0F46     		mov	r7, r1
  72              	.LVL4:
  25:Src/assert.c  ****   double dTheta = (tickRight - tickGauche) / 2.0f;
  73              		.loc 1 25 0
  74 0032 CAEB0808 		rsb	r8, r10, r8
  75              	.LVL5:
  76 0036 07EE908A 		fmsr	s15, r8	@ int
  77 003a F8EEE77A 		fsitos	s15, s15
  78 003e 67EE887A 		fmuls	s15, s15, s16
  79 0042 17EE900A 		fmrs	r0, s15
  80 0046 FFF7FEFF 		bl	__aeabi_f2d
  81              	.LVL6:
  26:Src/assert.c  **** 
  27:Src/assert.c  ****   // new angle
  28:Src/assert.c  ****   *angle += dTheta / ((AXISLENGTH*TICKSPERMM)/2);
  82              		.loc 1 28 0
  83 004a 24A3     		adr	r3, .L3+4
  84 004c D3E90023 		ldrd	r2, [r3]
  85 0050 FFF7FEFF 		bl	__aeabi_ddiv
  86              	.LVL7:
  87 0054 D9E90023 		ldrd	r2, [r9]
ARM GAS  /tmp/cc2Ka9v7.s 			page 3


  88 0058 FFF7FEFF 		bl	__aeabi_dadd
  89              	.LVL8:
  90 005c 41EC180B 		fmdrr	d8, r0, r1
  91 0060 C9E90001 		strd	r0, [r9]
  29:Src/assert.c  **** 
  30:Src/assert.c  ****   // New X Y
  31:Src/assert.c  ****   double dX = dDist * cos(*angle);
  92              		.loc 1 31 0
  93 0064 41EC100B 		fmdrr	d0, r0, r1
  94 0068 FFF7FEFF 		bl	cos
  95              	.LVL9:
  96 006c 51EC100B 		fmrrd	r0, r1, d0
  97 0070 3246     		mov	r2, r6
  98 0072 3B46     		mov	r3, r7
  99 0074 FFF7FEFF 		bl	__aeabi_dmul
 100              	.LVL10:
 101 0078 8046     		mov	r8, r0
 102 007a 8946     		mov	r9, r1
 103              	.LVL11:
  32:Src/assert.c  ****   double dY = dDist * sin(*angle);
 104              		.loc 1 32 0
 105 007c B0EE480A 		fcpys	s0, s16
 106 0080 F0EE680A 		fcpys	s1, s17
 107 0084 FFF7FEFF 		bl	sin
 108              	.LVL12:
 109 0088 51EC100B 		fmrrd	r0, r1, d0
 110 008c 3246     		mov	r2, r6
 111 008e 3B46     		mov	r3, r7
 112 0090 FFF7FEFF 		bl	__aeabi_dmul
 113              	.LVL13:
 114 0094 0646     		mov	r6, r0
 115              	.LVL14:
 116 0096 0F46     		mov	r7, r1
 117              	.LVL15:
  33:Src/assert.c  ****   *positionX += dX / TICKSPERMM;
 118              		.loc 1 33 0
 119 0098 4046     		mov	r0, r8
 120 009a 4946     		mov	r1, r9
 121 009c 0022     		movs	r2, #0
 122 009e 0E4B     		ldr	r3, .L3
 123 00a0 FFF7FEFF 		bl	__aeabi_ddiv
 124              	.LVL16:
 125 00a4 0246     		mov	r2, r0
 126 00a6 0B46     		mov	r3, r1
 127 00a8 D5E90001 		ldrd	r0, [r5]
 128 00ac FFF7FEFF 		bl	__aeabi_dadd
 129              	.LVL17:
 130 00b0 C5E90001 		strd	r0, [r5]
  34:Src/assert.c  ****   *positionY += dY / TICKSPERMM;
 131              		.loc 1 34 0
 132 00b4 3046     		mov	r0, r6
 133 00b6 3946     		mov	r1, r7
 134 00b8 0022     		movs	r2, #0
 135 00ba 074B     		ldr	r3, .L3
 136 00bc FFF7FEFF 		bl	__aeabi_ddiv
 137              	.LVL18:
 138 00c0 0246     		mov	r2, r0
ARM GAS  /tmp/cc2Ka9v7.s 			page 4


 139 00c2 0B46     		mov	r3, r1
 140 00c4 D4E90001 		ldrd	r0, [r4]
 141 00c8 FFF7FEFF 		bl	__aeabi_dadd
 142              	.LVL19:
 143 00cc C4E90001 		strd	r0, [r4]
  35:Src/assert.c  **** }
 144              		.loc 1 35 0
 145 00d0 BDEC028B 		fldmfdd	sp!, {d8}
 146              	.LCFI2:
 147              		.cfi_restore 80
 148              		.cfi_restore 81
 149              		.cfi_def_cfa_offset 32
 150 00d4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 151              	.LVL20:
 152              	.L4:
 153              		.align	3
 154              	.L3:
 155 00d8 00003440 		.word	1077149696
 156 00dc 00000000 		.word	0
 157 00e0 00C89940 		.word	1083820032
 158              		.cfi_endproc
 159              	.LFE123:
 161              		.global	__aeabi_dcmpgt
 162              		.global	__aeabi_dcmplt
 163              		.section	.text.turn,"ax",%progbits
 164              		.align	2
 165              		.global	turn
 166              		.thumb
 167              		.thumb_func
 169              	turn:
 170              	.LFB125:
  36:Src/assert.c  **** 
  37:Src/assert.c  **** 
  38:Src/assert.c  **** 
  39:Src/assert.c  **** void stateMachine(int* consigneDroit, int* consigneGauche, double positionX, double positionY, doub
  40:Src/assert.c  **** {
  41:Src/assert.c  ****     static int state = 0;
  42:Src/assert.c  ****     
  43:Src/assert.c  ****     if (endOfMvt == 1)
  44:Src/assert.c  ****     {
  45:Src/assert.c  ****         endOfMvt = 0;
  46:Src/assert.c  ****         state += 1;
  47:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Fin de l'action\n", sizeof("Fin de l'action\n"), HAL_MAX_DELAY)
  48:Src/assert.c  ****     }
  49:Src/assert.c  ****     
  50:Src/assert.c  ****     switch(consignes[state])
  51:Src/assert.c  ****     {
  52:Src/assert.c  ****       case 'M':
  53:Src/assert.c  ****         move(consigneDroit, consigneGauche, positionX, positionY, angle, val1[state], val2[state], 
  54:Src/assert.c  ****         //char buffer[50] = "";
  55:Src/assert.c  **** 		//sprintf(buffer, " move %d / %d blbl\n",(int)val1[state], (int)val2[state]);
  56:Src/assert.c  **** 		//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
  57:Src/assert.c  ****         break;
  58:Src/assert.c  ****         
  59:Src/assert.c  ****       case 'A':
  60:Src/assert.c  **** 		turn(consigneDroit, consigneGauche, positionX, positionY, angle, val1[state], val2[state], tim4, 
  61:Src/assert.c  **** 		break;
ARM GAS  /tmp/cc2Ka9v7.s 			page 5


  62:Src/assert.c  ****         
  63:Src/assert.c  ****       case 'T':
  64:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Let's wait !\n", sizeof("Let's wait !\n"), HAL_MAX_DELAY);
  65:Src/assert.c  ****         HAL_Delay(val1[state]);
  66:Src/assert.c  ****         endOfMvt = 1;
  67:Src/assert.c  **** 
  68:Src/assert.c  ****       case 'E':  //end of the match
  69:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Fin de match\n", sizeof("Fin de match\n"), HAL_MAX_DELAY);
  70:Src/assert.c  ****         while(1){}
  71:Src/assert.c  ****         break;
  72:Src/assert.c  **** }
  73:Src/assert.c  **** }
  74:Src/assert.c  **** 
  75:Src/assert.c  **** 
  76:Src/assert.c  **** void turn(int* consigneDroit, int* consigneGauche, double positionX, double positionY, double angle
  77:Src/assert.c  **** {
 171              		.loc 1 77 0
 172              		.cfi_startproc
 173              		@ args = 64, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL21:
 176 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 177              	.LCFI3:
 178              		.cfi_def_cfa_offset 32
 179              		.cfi_offset 3, -32
 180              		.cfi_offset 4, -28
 181              		.cfi_offset 5, -24
 182              		.cfi_offset 6, -20
 183              		.cfi_offset 7, -16
 184              		.cfi_offset 8, -12
 185              		.cfi_offset 9, -8
 186              		.cfi_offset 14, -4
 187 0004 8046     		mov	r8, r0
 188 0006 8946     		mov	r9, r1
 189 0008 57EC126B 		fmrrd	r6, r7, d2
 190 000c 55EC134B 		fmrrd	r4, r5, d3
  78:Src/assert.c  **** 	//char buffer[50] = "";
  79:Src/assert.c  **** 	//sprintf(buffer, "%g / %g / %g\n",targetX, angle, absPerso(angle - targetX));
  80:Src/assert.c  **** 	//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
  81:Src/assert.c  **** 	
  82:Src/assert.c  **** 	static double angleInit = 0.0;
  83:Src/assert.c  ****     
  84:Src/assert.c  ****     static int firstLoopPass = 1;
  85:Src/assert.c  ****     
  86:Src/assert.c  ****     if (firstLoopPass == 1)
 191              		.loc 1 86 0
 192 0010 254B     		ldr	r3, .L21
 193              	.LVL22:
 194 0012 1B68     		ldr	r3, [r3]
 195 0014 012B     		cmp	r3, #1
 196 0016 05D1     		bne	.L6
  87:Src/assert.c  ****     {
  88:Src/assert.c  ****         angleInit = angle;
 197              		.loc 1 88 0
 198 0018 244B     		ldr	r3, .L21+4
 199 001a 83ED002B 		fstd	d2, [r3]
  89:Src/assert.c  ****         firstLoopPass = 0;
ARM GAS  /tmp/cc2Ka9v7.s 			page 6


 200              		.loc 1 89 0
 201 001e 0022     		movs	r2, #0
 202              	.LVL23:
 203 0020 214B     		ldr	r3, .L21
 204 0022 1A60     		str	r2, [r3]
 205              	.LVL24:
 206              	.L6:
  90:Src/assert.c  ****     }
  91:Src/assert.c  ****     
  92:Src/assert.c  **** 	
  93:Src/assert.c  **** 	if (targetX > angleInit /*absPerso(angle) < absPerso(targetX)*/)
 207              		.loc 1 93 0
 208 0024 2046     		mov	r0, r4
 209              	.LVL25:
 210 0026 2946     		mov	r1, r5
 211              	.LVL26:
 212 0028 204B     		ldr	r3, .L21+4
 213 002a D3E90023 		ldrd	r2, [r3]
 214 002e FFF7FEFF 		bl	__aeabi_dcmpgt
 215              	.LVL27:
 216 0032 E0B1     		cbz	r0, .L17
  94:Src/assert.c  ****     {
  95:Src/assert.c  **** 		if(targetX > angle)
 217              		.loc 1 95 0
 218 0034 2046     		mov	r0, r4
 219 0036 2946     		mov	r1, r5
 220 0038 3246     		mov	r2, r6
 221 003a 3B46     		mov	r3, r7
 222 003c FFF7FEFF 		bl	__aeabi_dcmpgt
 223              	.LVL28:
 224 0040 48B1     		cbz	r0, .L18
  96:Src/assert.c  **** 		{
  97:Src/assert.c  **** 			*consigneGauche = 1000;
 225              		.loc 1 97 0
 226 0042 4FF47A73 		mov	r3, #1000
 227 0046 C9F80030 		str	r3, [r9]
  98:Src/assert.c  **** 			*consigneDroit = -1000;
 228              		.loc 1 98 0
 229 004a A3F5FA63 		sub	r3, r3, #2000
 230 004e C8F80030 		str	r3, [r8]
 231 0052 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 232              	.LVL29:
 233              	.L18:
  99:Src/assert.c  **** 		}
 100:Src/assert.c  **** 		else
 101:Src/assert.c  **** 		{
 102:Src/assert.c  **** 			*consigneGauche = 0;
 234              		.loc 1 102 0
 235 0056 0023     		movs	r3, #0
 236 0058 C9F80030 		str	r3, [r9]
 103:Src/assert.c  **** 			*consigneDroit = 0;
 237              		.loc 1 103 0
 238 005c C8F80030 		str	r3, [r8]
 104:Src/assert.c  **** 			endOfMvt = 1;
 239              		.loc 1 104 0
 240 0060 0123     		movs	r3, #1
 241 0062 134A     		ldr	r2, .L21+8
ARM GAS  /tmp/cc2Ka9v7.s 			page 7


 242 0064 1360     		str	r3, [r2]
 105:Src/assert.c  **** 			firstLoopPass = 1;
 243              		.loc 1 105 0
 244 0066 104A     		ldr	r2, .L21
 245 0068 1360     		str	r3, [r2]
 246 006a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 247              	.LVL30:
 248              	.L17:
 106:Src/assert.c  **** 		}
 107:Src/assert.c  **** 	}
 108:Src/assert.c  **** 	else
 109:Src/assert.c  **** 	{
 110:Src/assert.c  **** 		if(targetX < angle)
 249              		.loc 1 110 0
 250 006e 2046     		mov	r0, r4
 251 0070 2946     		mov	r1, r5
 252 0072 3246     		mov	r2, r6
 253 0074 3B46     		mov	r3, r7
 254 0076 FFF7FEFF 		bl	__aeabi_dcmplt
 255              	.LVL31:
 256 007a 40B1     		cbz	r0, .L19
 111:Src/assert.c  **** 		{
 112:Src/assert.c  **** 			*consigneGauche = -1000;
 257              		.loc 1 112 0
 258 007c 0D4B     		ldr	r3, .L21+12
 259 007e C9F80030 		str	r3, [r9]
 113:Src/assert.c  **** 			*consigneDroit = 1000;
 260              		.loc 1 113 0
 261 0082 4FF47A73 		mov	r3, #1000
 262 0086 C8F80030 		str	r3, [r8]
 263 008a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 264              	.LVL32:
 265              	.L19:
 114:Src/assert.c  **** 			}
 115:Src/assert.c  **** 		else
 116:Src/assert.c  **** 		{
 117:Src/assert.c  **** 			*consigneGauche = 0;
 266              		.loc 1 117 0
 267 008e 0023     		movs	r3, #0
 268 0090 C9F80030 		str	r3, [r9]
 118:Src/assert.c  **** 			*consigneDroit = 0;
 269              		.loc 1 118 0
 270 0094 C8F80030 		str	r3, [r8]
 119:Src/assert.c  **** 			endOfMvt = 1;
 271              		.loc 1 119 0
 272 0098 0123     		movs	r3, #1
 273 009a 054A     		ldr	r2, .L21+8
 274 009c 1360     		str	r3, [r2]
 120:Src/assert.c  **** 			firstLoopPass = 1;
 275              		.loc 1 120 0
 276 009e 024A     		ldr	r2, .L21
 277 00a0 1360     		str	r3, [r2]
 278 00a2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 279              	.LVL33:
 280              	.L22:
 281 00a6 00BF     		.align	2
 282              	.L21:
ARM GAS  /tmp/cc2Ka9v7.s 			page 8


 283 00a8 00000000 		.word	.LANCHOR0
 284 00ac 00000000 		.word	.LANCHOR1
 285 00b0 00000000 		.word	.LANCHOR2
 286 00b4 18FCFFFF 		.word	-1000
 287              		.cfi_endproc
 288              	.LFE125:
 290              		.section	.text.absPerso,"ax",%progbits
 291              		.align	2
 292              		.global	absPerso
 293              		.thumb
 294              		.thumb_func
 296              	absPerso:
 297              	.LFB127:
 121:Src/assert.c  **** 		}
 122:Src/assert.c  ****     }
 123:Src/assert.c  **** }
 124:Src/assert.c  **** 
 125:Src/assert.c  **** 
 126:Src/assert.c  **** void move(int* consigneDroit, int* consigneGauche, double positionX, double positionY, double angle
 127:Src/assert.c  **** {
 128:Src/assert.c  ****     static int isMvtDone = 0;
 129:Src/assert.c  ****     static int oldErrorDroite = 0;
 130:Src/assert.c  ****     static int errorSumDroite = 0;
 131:Src/assert.c  ****     static int oldErrorGauche = 0;
 132:Src/assert.c  ****     static int errorSumGauche = 0;
 133:Src/assert.c  ****     static double angleInit = 0.0;
 134:Src/assert.c  ****     
 135:Src/assert.c  ****     static int firstLoopPass = 1;
 136:Src/assert.c  ****     
 137:Src/assert.c  ****     if (firstLoopPass == 1)
 138:Src/assert.c  ****     {
 139:Src/assert.c  ****         angleInit = angle;
 140:Src/assert.c  ****         firstLoopPass = 0;
 141:Src/assert.c  ****     }
 142:Src/assert.c  ****     
 143:Src/assert.c  ****     angle = angle-angleInit;
 144:Src/assert.c  ****     
 145:Src/assert.c  ****     
 146:Src/assert.c  ****     if ((absPerso(positionX - targetX) < 50) && (absPerso(positionY - targetY) < 50))
 147:Src/assert.c  ****     {
 148:Src/assert.c  **** 		//char buffer[50] = "";
 149:Src/assert.c  **** 		//sprintf(buffer, "%d / %d\n",(int)targetX, (int)absPerso(positionY - targetY));
 150:Src/assert.c  **** 		//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 151:Src/assert.c  ****         isMvtDone += 1;
 152:Src/assert.c  ****     }
 153:Src/assert.c  ****     if(isMvtDone > 5)
 154:Src/assert.c  ****     {
 155:Src/assert.c  ****         isMvtDone = 0;
 156:Src/assert.c  ****         endOfMvt = 1;
 157:Src/assert.c  ****         *consigneDroit = 0;
 158:Src/assert.c  ****         *consigneGauche = 0;
 159:Src/assert.c  ****         firstLoopPass = 1;
 160:Src/assert.c  ****     }
 161:Src/assert.c  ****     else
 162:Src/assert.c  ****     {
 163:Src/assert.c  **** 		//No ramps for the time being :/ refer to MainNucleoOLD for implementation
 164:Src/assert.c  **** 		
ARM GAS  /tmp/cc2Ka9v7.s 			page 9


 165:Src/assert.c  **** 		
 166:Src/assert.c  **** 		//need to modify the target sppeed for positionning
 167:Src/assert.c  **** 		int targetSpeed = 170; //tick per ms
 168:Src/assert.c  **** 		
 169:Src/assert.c  **** 		int errorDroite = targetSpeed - tim5;
 170:Src/assert.c  **** 		errorSumDroite += errorDroite;
 171:Src/assert.c  **** 		/*//circular buffer
 172:Src/assert.c  **** 		int errorSumDroite = 0;
 173:Src/assert.c  **** 		static int indexBuffer = 0;
 174:Src/assert.c  **** 		static int circularBuffer[100] = {0};
 175:Src/assert.c  **** 		for (int i = 0; i < 100; i++) {errorSumDroite += circularBuffer[i];}
 176:Src/assert.c  **** 		circularBuffer[indexBuffer] = errorDroite;
 177:Src/assert.c  **** 		indexBuffer += 1;
 178:Src/assert.c  **** 		if(indexBuffer > 100){indexBuffer = 0;}
 179:Src/assert.c  **** 		*/
 180:Src/assert.c  **** 		int errorVariationDroite = errorDroite - oldErrorDroite;
 181:Src/assert.c  **** 		*consigneDroit = Kp_Droite * errorDroite + Ki_Droite * errorSumDroite + Kd_Droite * errorVariatio
 182:Src/assert.c  **** 		oldErrorDroite = errorDroite;
 183:Src/assert.c  **** 		
 184:Src/assert.c  **** 		
 185:Src/assert.c  **** 		int errorGauche = targetSpeed - tim4;
 186:Src/assert.c  **** 		errorSumGauche += errorGauche;
 187:Src/assert.c  **** 		int errorVariationGauche = errorGauche - oldErrorGauche;
 188:Src/assert.c  **** 		*consigneGauche = Kp_Gauche * errorGauche + Ki_Gauche * errorSumGauche + Kd_Gauche * errorVariati
 189:Src/assert.c  **** 		oldErrorGauche = errorGauche;
 190:Src/assert.c  **** 	}
 191:Src/assert.c  ****     
 192:Src/assert.c  **** }
 193:Src/assert.c  **** 
 194:Src/assert.c  **** double absPerso(double x)
 195:Src/assert.c  **** {
 298              		.loc 1 195 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              	.LVL34:
 303 0000 38B5     		push	{r3, r4, r5, lr}
 304              	.LCFI4:
 305              		.cfi_def_cfa_offset 16
 306              		.cfi_offset 3, -16
 307              		.cfi_offset 4, -12
 308              		.cfi_offset 5, -8
 309              		.cfi_offset 14, -4
 310 0002 55EC104B 		fmrrd	r4, r5, d0
 196:Src/assert.c  **** 	if(x < 0) x = -x; 
 311              		.loc 1 196 0
 312 0006 10EE100A 		fmrs	r0, s0	@ int
 313 000a 2946     		mov	r1, r5
 314 000c 0022     		movs	r2, #0
 315 000e 0023     		movs	r3, #0
 316 0010 FFF7FEFF 		bl	__aeabi_dcmplt
 317              	.LVL35:
 318 0014 10B1     		cbz	r0, .L24
 319              		.loc 1 196 0 is_stmt 0 discriminator 1
 320 0016 05F10043 		add	r3, r5, #-2147483648
 321 001a 1D46     		mov	r5, r3
 322              	.LVL36:
ARM GAS  /tmp/cc2Ka9v7.s 			page 10


 323              	.L24:
 197:Src/assert.c  **** 	return x;
 198:Src/assert.c  **** }
 324              		.loc 1 198 0 is_stmt 1
 325 001c 45EC104B 		fmdrr	d0, r4, r5
 326 0020 38BD     		pop	{r3, r4, r5, pc}
 327              		.cfi_endproc
 328              	.LFE127:
 330              		.global	__aeabi_dsub
 331              		.global	__aeabi_i2d
 332              		.global	__aeabi_d2iz
 333 0022 00BF     		.section	.text.move,"ax",%progbits
 334              		.align	2
 335              		.global	move
 336              		.thumb
 337              		.thumb_func
 339              	move:
 340              	.LFB126:
 127:Src/assert.c  ****     static int isMvtDone = 0;
 341              		.loc 1 127 0
 342              		.cfi_startproc
 343              		@ args = 64, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              	.LVL37:
 346 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 347              	.LCFI5:
 348              		.cfi_def_cfa_offset 32
 349              		.cfi_offset 4, -32
 350              		.cfi_offset 5, -28
 351              		.cfi_offset 6, -24
 352              		.cfi_offset 7, -20
 353              		.cfi_offset 8, -16
 354              		.cfi_offset 9, -12
 355              		.cfi_offset 10, -8
 356              		.cfi_offset 14, -4
 357 0004 2DED088B 		fstmfdd	sp!, {d8, d9, d10, d11}
 358              	.LCFI6:
 359              		.cfi_def_cfa_offset 64
 360              		.cfi_offset 80, -64
 361              		.cfi_offset 81, -60
 362              		.cfi_offset 82, -56
 363              		.cfi_offset 83, -52
 364              		.cfi_offset 84, -48
 365              		.cfi_offset 85, -44
 366              		.cfi_offset 86, -40
 367              		.cfi_offset 87, -36
 368 0008 8246     		mov	r10, r0
 369 000a 8946     		mov	r9, r1
 370 000c B0EE409A 		fcpys	s18, s0
 371 0010 F0EE609A 		fcpys	s19, s1
 372 0014 B0EE41AA 		fcpys	s20, s2
 373 0018 F0EE61AA 		fcpys	s21, s3
 374 001c 51EC120B 		fmrrd	r0, r1, d2
 375              	.LVL38:
 376 0020 B0EE438A 		fcpys	s16, s6
 377 0024 F0EE638A 		fcpys	s17, s7
 378 0028 B0EE44BA 		fcpys	s22, s8
ARM GAS  /tmp/cc2Ka9v7.s 			page 11


 379 002c F0EE64BA 		fcpys	s23, s9
 380 0030 1446     		mov	r4, r2
 381 0032 1D46     		mov	r5, r3
 137:Src/assert.c  ****     {
 382              		.loc 1 137 0
 383 0034 3F4B     		ldr	r3, .L38
 384              	.LVL39:
 385 0036 1B68     		ldr	r3, [r3]
 386 0038 012B     		cmp	r3, #1
 387 003a 05D1     		bne	.L29
 139:Src/assert.c  ****         firstLoopPass = 0;
 388              		.loc 1 139 0
 389 003c 3E4B     		ldr	r3, .L38+4
 390 003e 83ED002B 		fstd	d2, [r3]
 140:Src/assert.c  ****     }
 391              		.loc 1 140 0
 392 0042 0022     		movs	r2, #0
 393              	.LVL40:
 394 0044 3B4B     		ldr	r3, .L38
 395 0046 1A60     		str	r2, [r3]
 396              	.LVL41:
 397              	.L29:
 143:Src/assert.c  ****     
 398              		.loc 1 143 0
 399 0048 3B4B     		ldr	r3, .L38+4
 400 004a D3E90023 		ldrd	r2, [r3]
 401 004e FFF7FEFF 		bl	__aeabi_dsub
 402              	.LVL42:
 403 0052 0646     		mov	r6, r0
 404 0054 0F46     		mov	r7, r1
 405              	.LVL43:
 146:Src/assert.c  ****     {
 406              		.loc 1 146 0
 407 0056 51EC190B 		fmrrd	r0, r1, d9
 408 005a 53EC182B 		fmrrd	r2, r3, d8
 409 005e FFF7FEFF 		bl	__aeabi_dsub
 410              	.LVL44:
 411 0062 41EC100B 		fmdrr	d0, r0, r1
 412 0066 FFF7FEFF 		bl	absPerso
 413              	.LVL45:
 414 006a 51EC100B 		fmrrd	r0, r1, d0
 415 006e 0022     		movs	r2, #0
 416 0070 324B     		ldr	r3, .L38+8
 417 0072 FFF7FEFF 		bl	__aeabi_dcmplt
 418              	.LVL46:
 419 0076 A0B1     		cbz	r0, .L30
 146:Src/assert.c  ****     {
 420              		.loc 1 146 0 is_stmt 0 discriminator 1
 421 0078 51EC1A0B 		fmrrd	r0, r1, d10
 422 007c 53EC1B2B 		fmrrd	r2, r3, d11
 423 0080 FFF7FEFF 		bl	__aeabi_dsub
 424              	.LVL47:
 425 0084 41EC100B 		fmdrr	d0, r0, r1
 426 0088 FFF7FEFF 		bl	absPerso
 427              	.LVL48:
 428 008c 51EC100B 		fmrrd	r0, r1, d0
 429 0090 0022     		movs	r2, #0
ARM GAS  /tmp/cc2Ka9v7.s 			page 12


 430 0092 2A4B     		ldr	r3, .L38+8
 431 0094 FFF7FEFF 		bl	__aeabi_dcmplt
 432              	.LVL49:
 433 0098 18B1     		cbz	r0, .L30
 151:Src/assert.c  ****     }
 434              		.loc 1 151 0 is_stmt 1
 435 009a 294A     		ldr	r2, .L38+12
 436 009c 1368     		ldr	r3, [r2]
 437 009e 0133     		adds	r3, r3, #1
 438 00a0 1360     		str	r3, [r2]
 439              	.L30:
 153:Src/assert.c  ****     {
 440              		.loc 1 153 0
 441 00a2 274B     		ldr	r3, .L38+12
 442 00a4 1B68     		ldr	r3, [r3]
 443 00a6 052B     		cmp	r3, #5
 444 00a8 0CDD     		ble	.L33
 155:Src/assert.c  ****         endOfMvt = 1;
 445              		.loc 1 155 0
 446 00aa 0023     		movs	r3, #0
 447 00ac 244A     		ldr	r2, .L38+12
 448 00ae 1360     		str	r3, [r2]
 156:Src/assert.c  ****         *consigneDroit = 0;
 449              		.loc 1 156 0
 450 00b0 0122     		movs	r2, #1
 451 00b2 2449     		ldr	r1, .L38+16
 452 00b4 0A60     		str	r2, [r1]
 157:Src/assert.c  ****         *consigneGauche = 0;
 453              		.loc 1 157 0
 454 00b6 CAF80030 		str	r3, [r10]
 158:Src/assert.c  ****         firstLoopPass = 1;
 455              		.loc 1 158 0
 456 00ba C9F80030 		str	r3, [r9]
 159:Src/assert.c  ****     }
 457              		.loc 1 159 0
 458 00be 1D4B     		ldr	r3, .L38
 459 00c0 1A60     		str	r2, [r3]
 460 00c2 33E0     		b	.L28
 461              	.L33:
 462              	.LVL50:
 463              	.LBB2:
 169:Src/assert.c  **** 		errorSumDroite += errorDroite;
 464              		.loc 1 169 0
 465 00c4 C5F1AA05 		rsb	r5, r5, #170
 466              	.LVL51:
 170:Src/assert.c  **** 		/*//circular buffer
 467              		.loc 1 170 0
 468 00c8 1F4A     		ldr	r2, .L38+20
 469 00ca 1368     		ldr	r3, [r2]
 470 00cc 2B44     		add	r3, r3, r5
 471 00ce 1360     		str	r3, [r2]
 472              	.LVL52:
 181:Src/assert.c  **** 		oldErrorDroite = errorDroite;
 473              		.loc 1 181 0
 474 00d0 05EB8508 		add	r8, r5, r5, lsl #2
 475 00d4 4FEA4808 		lsl	r8, r8, #1
 476 00d8 3046     		mov	r0, r6
ARM GAS  /tmp/cc2Ka9v7.s 			page 13


 477 00da 3946     		mov	r1, r7
 478 00dc 0022     		movs	r2, #0
 479 00de 1B4B     		ldr	r3, .L38+24
 480 00e0 FFF7FEFF 		bl	__aeabi_dmul
 481              	.LVL53:
 482 00e4 0646     		mov	r6, r0
 483              	.LVL54:
 484 00e6 0F46     		mov	r7, r1
 485 00e8 4046     		mov	r0, r8
 486 00ea FFF7FEFF 		bl	__aeabi_i2d
 487              	.LVL55:
 488 00ee 3246     		mov	r2, r6
 489 00f0 3B46     		mov	r3, r7
 490 00f2 FFF7FEFF 		bl	__aeabi_dadd
 491              	.LVL56:
 492 00f6 FFF7FEFF 		bl	__aeabi_d2iz
 493              	.LVL57:
 494 00fa CAF80000 		str	r0, [r10]
 182:Src/assert.c  **** 		
 495              		.loc 1 182 0
 496 00fe 144B     		ldr	r3, .L38+28
 497 0100 1D60     		str	r5, [r3]
 185:Src/assert.c  **** 		errorSumGauche += errorGauche;
 498              		.loc 1 185 0
 499 0102 C4F1AA04 		rsb	r4, r4, #170
 500              	.LVL58:
 186:Src/assert.c  **** 		int errorVariationGauche = errorGauche - oldErrorGauche;
 501              		.loc 1 186 0
 502 0106 134A     		ldr	r2, .L38+32
 503 0108 1368     		ldr	r3, [r2]
 504 010a 2344     		add	r3, r3, r4
 505 010c 1360     		str	r3, [r2]
 506              	.LVL59:
 188:Src/assert.c  **** 		oldErrorGauche = errorGauche;
 507              		.loc 1 188 0
 508 010e 04EB8400 		add	r0, r4, r4, lsl #2
 509 0112 4000     		lsls	r0, r0, #1
 510 0114 FFF7FEFF 		bl	__aeabi_i2d
 511              	.LVL60:
 512 0118 3246     		mov	r2, r6
 513 011a 3B46     		mov	r3, r7
 514 011c FFF7FEFF 		bl	__aeabi_dsub
 515              	.LVL61:
 516 0120 FFF7FEFF 		bl	__aeabi_d2iz
 517              	.LVL62:
 518 0124 C9F80000 		str	r0, [r9]
 189:Src/assert.c  **** 	}
 519              		.loc 1 189 0
 520 0128 0B4B     		ldr	r3, .L38+36
 521 012a 1C60     		str	r4, [r3]
 522              	.LVL63:
 523              	.L28:
 524              	.LBE2:
 192:Src/assert.c  **** 
 525              		.loc 1 192 0
 526 012c BDEC088B 		fldmfdd	sp!, {d8-d11}
 527              	.LCFI7:
ARM GAS  /tmp/cc2Ka9v7.s 			page 14


 528              		.cfi_restore 86
 529              		.cfi_restore 87
 530              		.cfi_restore 84
 531              		.cfi_restore 85
 532              		.cfi_restore 82
 533              		.cfi_restore 83
 534              		.cfi_restore 80
 535              		.cfi_restore 81
 536              		.cfi_def_cfa_offset 32
 537              	.LVL64:
 538 0130 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 539              	.LVL65:
 540              	.L39:
 541              		.align	2
 542              	.L38:
 543 0134 00000000 		.word	.LANCHOR3
 544 0138 00000000 		.word	.LANCHOR4
 545 013c 00004940 		.word	1078525952
 546 0140 00000000 		.word	.LANCHOR5
 547 0144 00000000 		.word	.LANCHOR2
 548 0148 00000000 		.word	.LANCHOR6
 549 014c 00408F40 		.word	1083129856
 550 0150 00000000 		.word	.LANCHOR7
 551 0154 00000000 		.word	.LANCHOR8
 552 0158 00000000 		.word	.LANCHOR9
 553              		.cfi_endproc
 554              	.LFE126:
 556              		.global	__aeabi_d2uiz
 557              		.section	.text.stateMachine,"ax",%progbits
 558              		.align	2
 559              		.global	stateMachine
 560              		.thumb
 561              		.thumb_func
 563              	stateMachine:
 564              	.LFB124:
  40:Src/assert.c  ****     static int state = 0;
 565              		.loc 1 40 0
 566              		.cfi_startproc
 567              		@ args = 64, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              	.LVL66:
 570 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 571              	.LCFI8:
 572              		.cfi_def_cfa_offset 28
 573              		.cfi_offset 4, -28
 574              		.cfi_offset 5, -24
 575              		.cfi_offset 6, -20
 576              		.cfi_offset 7, -16
 577              		.cfi_offset 8, -12
 578              		.cfi_offset 9, -8
 579              		.cfi_offset 14, -4
 580 0004 2DED068B 		fstmfdd	sp!, {d8, d9, d10}
 581              	.LCFI9:
 582              		.cfi_def_cfa_offset 52
 583              		.cfi_offset 80, -52
 584              		.cfi_offset 81, -48
 585              		.cfi_offset 82, -44
ARM GAS  /tmp/cc2Ka9v7.s 			page 15


 586              		.cfi_offset 83, -40
 587              		.cfi_offset 84, -36
 588              		.cfi_offset 85, -32
 589 0008 91B0     		sub	sp, sp, #68
 590              	.LCFI10:
 591              		.cfi_def_cfa_offset 120
 592 000a 8146     		mov	r9, r0
 593 000c 8846     		mov	r8, r1
 594 000e B0EE40AA 		fcpys	s20, s0
 595 0012 F0EE60AA 		fcpys	s21, s1
 596 0016 B0EE419A 		fcpys	s18, s2
 597 001a F0EE619A 		fcpys	s19, s3
 598 001e B0EE428A 		fcpys	s16, s4
 599 0022 F0EE628A 		fcpys	s17, s5
 600 0026 1746     		mov	r7, r2
 601 0028 1E46     		mov	r6, r3
  43:Src/assert.c  ****     {
 602              		.loc 1 43 0
 603 002a 4B4B     		ldr	r3, .L50
 604              	.LVL67:
 605 002c 1B68     		ldr	r3, [r3]
 606 002e 012B     		cmp	r3, #1
 607 0030 0DD1     		bne	.L41
  45:Src/assert.c  ****         state += 1;
 608              		.loc 1 45 0
 609 0032 0022     		movs	r2, #0
 610              	.LVL68:
 611 0034 484B     		ldr	r3, .L50
 612 0036 1A60     		str	r2, [r3]
  46:Src/assert.c  ****         HAL_UART_Transmit(&huart2, "Fin de l'action\n", sizeof("Fin de l'action\n"), HAL_MAX_DELAY)
 613              		.loc 1 46 0
 614 0038 484A     		ldr	r2, .L50+4
 615 003a 1368     		ldr	r3, [r2]
 616 003c 0133     		adds	r3, r3, #1
 617 003e 1360     		str	r3, [r2]
  47:Src/assert.c  ****     }
 618              		.loc 1 47 0
 619 0040 1EA8     		add	r0, sp, #120
 620              	.LVL69:
 621 0042 4749     		ldr	r1, .L50+8
 622              	.LVL70:
 623 0044 1122     		movs	r2, #17
 624 0046 4FF0FF33 		mov	r3, #-1
 625 004a FFF7FEFF 		bl	HAL_UART_Transmit
 626              	.LVL71:
 627              	.L41:
  50:Src/assert.c  ****     {
 628              		.loc 1 50 0
 629 004e 434B     		ldr	r3, .L50+4
 630 0050 1B68     		ldr	r3, [r3]
 631 0052 444A     		ldr	r2, .L50+12
 632 0054 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 633 0056 413A     		subs	r2, r2, #65
 634 0058 132A     		cmp	r2, #19
 635 005a 78D8     		bhi	.L40
 636 005c DFE802F0 		tbb	[pc, r2]
 637              	.L44:
ARM GAS  /tmp/cc2Ka9v7.s 			page 16


 638 0060 32       		.byte	(.L43-.L44)/2
 639 0061 77       		.byte	(.L40-.L44)/2
 640 0062 77       		.byte	(.L40-.L44)/2
 641 0063 77       		.byte	(.L40-.L44)/2
 642 0064 6F       		.byte	(.L45-.L44)/2
 643 0065 77       		.byte	(.L40-.L44)/2
 644 0066 77       		.byte	(.L40-.L44)/2
 645 0067 77       		.byte	(.L40-.L44)/2
 646 0068 77       		.byte	(.L40-.L44)/2
 647 0069 77       		.byte	(.L40-.L44)/2
 648 006a 77       		.byte	(.L40-.L44)/2
 649 006b 77       		.byte	(.L40-.L44)/2
 650 006c 0A       		.byte	(.L46-.L44)/2
 651 006d 77       		.byte	(.L40-.L44)/2
 652 006e 77       		.byte	(.L40-.L44)/2
 653 006f 77       		.byte	(.L40-.L44)/2
 654 0070 77       		.byte	(.L40-.L44)/2
 655 0071 77       		.byte	(.L40-.L44)/2
 656 0072 77       		.byte	(.L40-.L44)/2
 657 0073 5A       		.byte	(.L47-.L44)/2
 658              		.p2align 1
 659              	.L46:
  53:Src/assert.c  ****         //char buffer[50] = "";
 660              		.loc 1 53 0
 661 0074 DB00     		lsls	r3, r3, #3
 662 0076 3C4A     		ldr	r2, .L50+16
 663 0078 1A44     		add	r2, r2, r3
 664 007a 92ED003B 		fldd	d3, [r2]
 665 007e 3B4A     		ldr	r2, .L50+20
 666 0080 1344     		add	r3, r3, r2
 667 0082 93ED004B 		fldd	d4, [r3]
 668 0086 6C46     		mov	r4, sp
 669 0088 1EAD     		add	r5, sp, #120
 670 008a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 671 008c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 672 008e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 673 0090 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 674 0092 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 675 0094 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 676 0096 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 677 009a 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 678 009e 4846     		mov	r0, r9
 679 00a0 4146     		mov	r1, r8
 680 00a2 B0EE4A0A 		fcpys	s0, s20
 681 00a6 F0EE6A0A 		fcpys	s1, s21
 682 00aa B0EE491A 		fcpys	s2, s18
 683 00ae F0EE691A 		fcpys	s3, s19
 684 00b2 B0EE482A 		fcpys	s4, s16
 685 00b6 F0EE682A 		fcpys	s5, s17
 686 00ba 3A46     		mov	r2, r7
 687 00bc 3346     		mov	r3, r6
 688 00be FFF7FEFF 		bl	move
 689              	.LVL72:
  57:Src/assert.c  ****         
 690              		.loc 1 57 0
 691 00c2 44E0     		b	.L40
 692              	.L43:
ARM GAS  /tmp/cc2Ka9v7.s 			page 17


  60:Src/assert.c  **** 		break;
 693              		.loc 1 60 0
 694 00c4 DB00     		lsls	r3, r3, #3
 695 00c6 284A     		ldr	r2, .L50+16
 696 00c8 1A44     		add	r2, r2, r3
 697 00ca 92ED003B 		fldd	d3, [r2]
 698 00ce 274A     		ldr	r2, .L50+20
 699 00d0 1344     		add	r3, r3, r2
 700 00d2 93ED004B 		fldd	d4, [r3]
 701 00d6 6C46     		mov	r4, sp
 702 00d8 1EAD     		add	r5, sp, #120
 703 00da 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 704 00dc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 705 00de 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 706 00e0 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 707 00e2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 708 00e4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 709 00e6 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 710 00ea 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 711 00ee 4846     		mov	r0, r9
 712 00f0 4146     		mov	r1, r8
 713 00f2 B0EE4A0A 		fcpys	s0, s20
 714 00f6 F0EE6A0A 		fcpys	s1, s21
 715 00fa B0EE491A 		fcpys	s2, s18
 716 00fe F0EE691A 		fcpys	s3, s19
 717 0102 B0EE482A 		fcpys	s4, s16
 718 0106 F0EE682A 		fcpys	s5, s17
 719 010a 3A46     		mov	r2, r7
 720 010c 3346     		mov	r3, r6
 721 010e FFF7FEFF 		bl	turn
 722              	.LVL73:
  61:Src/assert.c  ****         
 723              		.loc 1 61 0
 724 0112 1CE0     		b	.L40
 725              	.L47:
  64:Src/assert.c  ****         HAL_Delay(val1[state]);
 726              		.loc 1 64 0
 727 0114 1EA8     		add	r0, sp, #120
 728 0116 1649     		ldr	r1, .L50+24
 729 0118 0E22     		movs	r2, #14
 730 011a 4FF0FF33 		mov	r3, #-1
 731 011e FFF7FEFF 		bl	HAL_UART_Transmit
 732              	.LVL74:
  65:Src/assert.c  ****         endOfMvt = 1;
 733              		.loc 1 65 0
 734 0122 0E4B     		ldr	r3, .L50+4
 735 0124 1A68     		ldr	r2, [r3]
 736 0126 104B     		ldr	r3, .L50+16
 737 0128 03EBC203 		add	r3, r3, r2, lsl #3
 738 012c D3E90001 		ldrd	r0, [r3]
 739 0130 FFF7FEFF 		bl	__aeabi_d2uiz
 740              	.LVL75:
 741 0134 FFF7FEFF 		bl	HAL_Delay
 742              	.LVL76:
  66:Src/assert.c  **** 
 743              		.loc 1 66 0
 744 0138 0122     		movs	r2, #1
ARM GAS  /tmp/cc2Ka9v7.s 			page 18


 745 013a 074B     		ldr	r3, .L50
 746 013c 1A60     		str	r2, [r3]
 747              	.L45:
  69:Src/assert.c  ****         while(1){}
 748              		.loc 1 69 0
 749 013e 1EA8     		add	r0, sp, #120
 750 0140 0C49     		ldr	r1, .L50+28
 751 0142 0E22     		movs	r2, #14
 752 0144 4FF0FF33 		mov	r3, #-1
 753 0148 FFF7FEFF 		bl	HAL_UART_Transmit
 754              	.LVL77:
 755              	.L48:
  70:Src/assert.c  ****         break;
 756              		.loc 1 70 0 discriminator 1
 757 014c FEE7     		b	.L48
 758              	.L40:
  73:Src/assert.c  **** 
 759              		.loc 1 73 0
 760 014e 11B0     		add	sp, sp, #68
 761              	.LCFI11:
 762              		.cfi_def_cfa_offset 52
 763              		@ sp needed
 764 0150 BDEC068B 		fldmfdd	sp!, {d8-d10}
 765              	.LCFI12:
 766              		.cfi_restore 84
 767              		.cfi_restore 85
 768              		.cfi_restore 82
 769              		.cfi_restore 83
 770              		.cfi_restore 80
 771              		.cfi_restore 81
 772              		.cfi_def_cfa_offset 28
 773              	.LVL78:
 774 0154 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 775              	.LVL79:
 776              	.L51:
 777              		.align	2
 778              	.L50:
 779 0158 00000000 		.word	.LANCHOR2
 780 015c 00000000 		.word	.LANCHOR10
 781 0160 00000000 		.word	.LC0
 782 0164 00000000 		.word	.LANCHOR11
 783 0168 00000000 		.word	.LANCHOR12
 784 016c 00000000 		.word	.LANCHOR13
 785 0170 14000000 		.word	.LC1
 786 0174 24000000 		.word	.LC2
 787              		.cfi_endproc
 788              	.LFE124:
 790              		.global	endOfMvt
 791              		.global	val2
 792              		.global	val1
 793              		.global	consignes
 794              		.section	.bss.isMvtDone.7956,"aw",%nobits
 795              		.align	2
 796              		.set	.LANCHOR5,. + 0
 799              	isMvtDone.7956:
 800 0000 00000000 		.space	4
 801              		.section	.bss.angleInit.7961,"aw",%nobits
ARM GAS  /tmp/cc2Ka9v7.s 			page 19


 802              		.align	3
 803              		.set	.LANCHOR4,. + 0
 806              	angleInit.7961:
 807 0000 00000000 		.space	8
 807      00000000 
 808              		.section	.data.val1,"aw",%progbits
 809              		.align	3
 810              		.set	.LANCHOR12,. + 0
 813              	val1:
 814 0000 00000000 		.word	0
 815 0004 00006940 		.word	1080623104
 816 0008 00000000 		.word	0
 817 000c 0000F03F 		.word	1072693248
 818 0010 00000000 		.word	0
 819 0014 00006940 		.word	1080623104
 820 0018 00000000 		.word	0
 821 001c 0000F0BF 		.word	-1074790400
 822 0020 00000000 		.word	0
 823 0024 00409F40 		.word	1084178432
 824 0028 00000000 		.word	0
 825 002c 00006940 		.word	1080623104
 826 0030 00000000 		.word	0
 827 0034 00000000 		.word	0
 828              		.section	.data.firstLoopPass.7962,"aw",%progbits
 829              		.align	2
 830              		.set	.LANCHOR3,. + 0
 833              	firstLoopPass.7962:
 834 0000 01000000 		.word	1
 835              		.section	.bss.oldErrorGauche.7959,"aw",%nobits
 836              		.align	2
 837              		.set	.LANCHOR9,. + 0
 840              	oldErrorGauche.7959:
 841 0000 00000000 		.space	4
 842              		.section	.bss.val2,"aw",%nobits
 843              		.align	3
 844              		.set	.LANCHOR13,. + 0
 847              	val2:
 848 0000 00000000 		.space	56
 848      00000000 
 848      00000000 
 848      00000000 
 848      00000000 
 849              		.section	.data.firstLoopPass.7943,"aw",%progbits
 850              		.align	2
 851              		.set	.LANCHOR0,. + 0
 854              	firstLoopPass.7943:
 855 0000 01000000 		.word	1
 856              		.section	.rodata.str1.4,"aMS",%progbits,1
 857              		.align	2
 858              	.LC0:
 859 0000 46696E20 		.ascii	"Fin de l'action\012\000"
 859      6465206C 
 859      27616374 
 859      696F6E0A 
 859      00
 860 0011 000000   		.space	3
 861              	.LC1:
ARM GAS  /tmp/cc2Ka9v7.s 			page 20


 862 0014 4C657427 		.ascii	"Let's wait !\012\000"
 862      73207761 
 862      69742021 
 862      0A00
 863 0022 0000     		.space	2
 864              	.LC2:
 865 0024 46696E20 		.ascii	"Fin de match\012\000"
 865      6465206D 
 865      61746368 
 865      0A00
 866              		.section	.bss.oldErrorDroite.7957,"aw",%nobits
 867              		.align	2
 868              		.set	.LANCHOR7,. + 0
 871              	oldErrorDroite.7957:
 872 0000 00000000 		.space	4
 873              		.section	.bss.errorSumGauche.7960,"aw",%nobits
 874              		.align	2
 875              		.set	.LANCHOR8,. + 0
 878              	errorSumGauche.7960:
 879 0000 00000000 		.space	4
 880              		.section	.bss.endOfMvt,"aw",%nobits
 881              		.align	2
 882              		.set	.LANCHOR2,. + 0
 885              	endOfMvt:
 886 0000 00000000 		.space	4
 887              		.section	.bss.state.7923,"aw",%nobits
 888              		.align	2
 889              		.set	.LANCHOR10,. + 0
 892              	state.7923:
 893 0000 00000000 		.space	4
 894              		.section	.bss.angleInit.7942,"aw",%nobits
 895              		.align	3
 896              		.set	.LANCHOR1,. + 0
 899              	angleInit.7942:
 900 0000 00000000 		.space	8
 900      00000000 
 901              		.section	.bss.errorSumDroite.7958,"aw",%nobits
 902              		.align	2
 903              		.set	.LANCHOR6,. + 0
 906              	errorSumDroite.7958:
 907 0000 00000000 		.space	4
 908              		.section	.data.consignes,"aw",%progbits
 909              		.align	2
 910              		.set	.LANCHOR11,. + 0
 913              	consignes:
 914 0000 4D       		.byte	77
 915 0001 41       		.byte	65
 916 0002 4D       		.byte	77
 917 0003 41       		.byte	65
 918 0004 54       		.byte	84
 919 0005 4D       		.byte	77
 920 0006 45       		.byte	69
 921              		.text
 922              	.Letext0:
 923              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 924              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 925              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
ARM GAS  /tmp/cc2Ka9v7.s 			page 21


 926              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 927              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 928              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 929              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 930              		.file 9 "/usr/include/newlib/math.h"
 931              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cc2Ka9v7.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 assert.c
     /tmp/cc2Ka9v7.s:25     .text.updatePos:0000000000000000 $t
     /tmp/cc2Ka9v7.s:30     .text.updatePos:0000000000000000 updatePos
     /tmp/cc2Ka9v7.s:155    .text.updatePos:00000000000000d8 $d
     /tmp/cc2Ka9v7.s:164    .text.turn:0000000000000000 $t
     /tmp/cc2Ka9v7.s:169    .text.turn:0000000000000000 turn
     /tmp/cc2Ka9v7.s:283    .text.turn:00000000000000a8 $d
     /tmp/cc2Ka9v7.s:291    .text.absPerso:0000000000000000 $t
     /tmp/cc2Ka9v7.s:296    .text.absPerso:0000000000000000 absPerso
     /tmp/cc2Ka9v7.s:334    .text.move:0000000000000000 $t
     /tmp/cc2Ka9v7.s:339    .text.move:0000000000000000 move
     /tmp/cc2Ka9v7.s:543    .text.move:0000000000000134 $d
     /tmp/cc2Ka9v7.s:558    .text.stateMachine:0000000000000000 $t
     /tmp/cc2Ka9v7.s:563    .text.stateMachine:0000000000000000 stateMachine
     /tmp/cc2Ka9v7.s:638    .text.stateMachine:0000000000000060 $d
     /tmp/cc2Ka9v7.s:658    .text.stateMachine:0000000000000074 $t
     /tmp/cc2Ka9v7.s:779    .text.stateMachine:0000000000000158 $d
     /tmp/cc2Ka9v7.s:885    .bss.endOfMvt:0000000000000000 endOfMvt
     /tmp/cc2Ka9v7.s:847    .bss.val2:0000000000000000 val2
     /tmp/cc2Ka9v7.s:813    .data.val1:0000000000000000 val1
     /tmp/cc2Ka9v7.s:913    .data.consignes:0000000000000000 consignes
     /tmp/cc2Ka9v7.s:795    .bss.isMvtDone.7956:0000000000000000 $d
     /tmp/cc2Ka9v7.s:799    .bss.isMvtDone.7956:0000000000000000 isMvtDone.7956
     /tmp/cc2Ka9v7.s:802    .bss.angleInit.7961:0000000000000000 $d
     /tmp/cc2Ka9v7.s:806    .bss.angleInit.7961:0000000000000000 angleInit.7961
     /tmp/cc2Ka9v7.s:809    .data.val1:0000000000000000 $d
     /tmp/cc2Ka9v7.s:829    .data.firstLoopPass.7962:0000000000000000 $d
     /tmp/cc2Ka9v7.s:833    .data.firstLoopPass.7962:0000000000000000 firstLoopPass.7962
     /tmp/cc2Ka9v7.s:836    .bss.oldErrorGauche.7959:0000000000000000 $d
     /tmp/cc2Ka9v7.s:840    .bss.oldErrorGauche.7959:0000000000000000 oldErrorGauche.7959
     /tmp/cc2Ka9v7.s:843    .bss.val2:0000000000000000 $d
     /tmp/cc2Ka9v7.s:850    .data.firstLoopPass.7943:0000000000000000 $d
     /tmp/cc2Ka9v7.s:854    .data.firstLoopPass.7943:0000000000000000 firstLoopPass.7943
     /tmp/cc2Ka9v7.s:857    .rodata.str1.4:0000000000000000 $d
     /tmp/cc2Ka9v7.s:867    .bss.oldErrorDroite.7957:0000000000000000 $d
     /tmp/cc2Ka9v7.s:871    .bss.oldErrorDroite.7957:0000000000000000 oldErrorDroite.7957
     /tmp/cc2Ka9v7.s:874    .bss.errorSumGauche.7960:0000000000000000 $d
     /tmp/cc2Ka9v7.s:878    .bss.errorSumGauche.7960:0000000000000000 errorSumGauche.7960
     /tmp/cc2Ka9v7.s:881    .bss.endOfMvt:0000000000000000 $d
     /tmp/cc2Ka9v7.s:888    .bss.state.7923:0000000000000000 $d
     /tmp/cc2Ka9v7.s:892    .bss.state.7923:0000000000000000 state.7923
     /tmp/cc2Ka9v7.s:895    .bss.angleInit.7942:0000000000000000 $d
     /tmp/cc2Ka9v7.s:899    .bss.angleInit.7942:0000000000000000 angleInit.7942
     /tmp/cc2Ka9v7.s:902    .bss.errorSumDroite.7958:0000000000000000 $d
     /tmp/cc2Ka9v7.s:906    .bss.errorSumDroite.7958:0000000000000000 errorSumDroite.7958
     /tmp/cc2Ka9v7.s:909    .data.consignes:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_ddiv
__aeabi_dadd
__aeabi_dmul
cos
sin
__aeabi_dcmpgt
ARM GAS  /tmp/cc2Ka9v7.s 			page 23


__aeabi_dcmplt
__aeabi_dsub
__aeabi_i2d
__aeabi_d2iz
__aeabi_d2uiz
HAL_UART_Transmit
HAL_Delay
