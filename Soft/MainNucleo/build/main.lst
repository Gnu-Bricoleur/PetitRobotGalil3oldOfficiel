ARM GAS  /tmp/ccdSbIYL.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB131:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccdSbIYL.s 			page 2


  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** #include "assert.h"
  47:Src/main.c    **** /* USER CODE END Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PTD */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PTD */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PD */
  56:Src/main.c    **** 
  57:Src/main.c    **** #define _DEBUG 1       //print all the debug info
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PD */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  62:Src/main.c    **** /* USER CODE BEGIN PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PM */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  67:Src/main.c    **** TIM_HandleTypeDef htim1;
  68:Src/main.c    **** TIM_HandleTypeDef htim2;
  69:Src/main.c    **** TIM_HandleTypeDef htim3;
  70:Src/main.c    **** TIM_HandleTypeDef htim4;
  71:Src/main.c    **** TIM_HandleTypeDef htim5;
  72:Src/main.c    **** 
  73:Src/main.c    **** UART_HandleTypeDef huart2;
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PV */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE END PV */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  80:Src/main.c    **** void SystemClock_Config(void);
  81:Src/main.c    **** static void MX_GPIO_Init(void);
  82:Src/main.c    **** static void MX_USART2_UART_Init(void);
  83:Src/main.c    **** static void MX_TIM2_Init(void);
  84:Src/main.c    **** static void MX_TIM3_Init(void);
  85:Src/main.c    **** static void MX_TIM4_Init(void);
  86:Src/main.c    **** static void MX_TIM5_Init(void);
  87:Src/main.c    **** static void MX_TIM1_Init(void);
  88:Src/main.c    **** /* USER CODE BEGIN PFP */
ARM GAS  /tmp/ccdSbIYL.s 			page 3


  89:Src/main.c    **** void moteurDroit(int PWM);
  90:Src/main.c    **** void moteurGauche(int PWM);
  91:Src/main.c    **** /* USER CODE END PFP */
  92:Src/main.c    **** 
  93:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  94:Src/main.c    **** /* USER CODE BEGIN 0 */
  95:Src/main.c    **** double positionX = 0.0;
  96:Src/main.c    **** double positionY = 0.0;
  97:Src/main.c    **** double angle = 0.0;
  98:Src/main.c    **** 
  99:Src/main.c    **** int consigneDroit = 0;
 100:Src/main.c    **** int consigneGauche = 0;
 101:Src/main.c    **** 
 102:Src/main.c    **** int debugCounter = 0;
 103:Src/main.c    **** 
 104:Src/main.c    **** int tim4Tot= 0;
 105:Src/main.c    **** int tim5Tot=0;
 106:Src/main.c    **** 
 107:Src/main.c    **** char buffer[50] = "";
 108:Src/main.c    **** char buffer2[50] = "";
 109:Src/main.c    **** 
 110:Src/main.c    **** int fixedFrequency = 40;//frequency of the loop in ms
 111:Src/main.c    **** int debugMessageFrequency = 10;//in number of loop
 112:Src/main.c    **** 
 113:Src/main.c    **** /* USER CODE END 0 */
 114:Src/main.c    **** 
 115:Src/main.c    **** /**
 116:Src/main.c    ****   * @brief  The application entry point.
 117:Src/main.c    ****   * @retval int
 118:Src/main.c    ****   */
 119:Src/main.c    **** int main(void)
 120:Src/main.c    **** {
 121:Src/main.c    ****   /* USER CODE BEGIN 1 */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* USER CODE END 1 */
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 128:Src/main.c    ****   HAL_Init();
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* USER CODE BEGIN Init */
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* USER CODE END Init */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* Configure the system clock */
 135:Src/main.c    ****   SystemClock_Config();
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* USER CODE END SysInit */
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* Initialize all configured peripherals */
 142:Src/main.c    ****   MX_GPIO_Init();
 143:Src/main.c    ****   MX_USART2_UART_Init();
 144:Src/main.c    ****   MX_TIM2_Init();
 145:Src/main.c    ****   MX_TIM3_Init();
ARM GAS  /tmp/ccdSbIYL.s 			page 4


 146:Src/main.c    ****   MX_TIM4_Init();
 147:Src/main.c    ****   MX_TIM5_Init();
 148:Src/main.c    ****   MX_TIM1_Init();
 149:Src/main.c    ****   /* USER CODE BEGIN 2 */
 150:Src/main.c    ****   HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_2);
 151:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 152:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 153:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 154:Src/main.c    ****   HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_4);
 155:Src/main.c    ****   /* USER CODE END 2 */
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* Infinite loop */
 158:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 159:Src/main.c    **** 
 160:Src/main.c    ****   HAL_UART_Transmit(&huart2, "Atttenzion, zest barti !", sizeof("Atttenzion, zest barti !"), HAL_MA
 161:Src/main.c    ****   HAL_Delay(1000);
 162:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick(); //init the time tracking variable for the fixed frequency PID 
 163:Src/main.c    **** 
 164:Src/main.c    **** 
 165:Src/main.c    **** 
 166:Src/main.c    ****   //center the encoder values
 167:Src/main.c    ****   TIM4->CNT = 30000;
 168:Src/main.c    ****   TIM5->CNT = 30000;
 169:Src/main.c    ****   
 170:Src/main.c    ****   htim1.Instance->CCR4 = 1500;//servo
 171:Src/main.c    **** 
 172:Src/main.c    **** 
 173:Src/main.c    ****   while (1)
 174:Src/main.c    ****   {
 175:Src/main.c    ****     while(HAL_GetTick() - oldTicks < fixedFrequency)
 176:Src/main.c    ****     {HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_SET);}
 177:Src/main.c    ****     HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 178:Src/main.c    ****     
 179:Src/main.c    ****     oldTicks = HAL_GetTick();
 180:Src/main.c    ****     int tim4 = (TIM4->CNT-30000);
 181:Src/main.c    ****     int tim5 = (-TIM5->CNT+30000);
 182:Src/main.c    ****     TIM4->CNT = 30000;
 183:Src/main.c    ****     TIM5->CNT = 30000;
 184:Src/main.c    ****     
 185:Src/main.c    ****     tim5 *= 1.0422;
 186:Src/main.c    ****     
 187:Src/main.c    ****     updatePos(tim4, tim5, &positionX, &positionY, &angle);
 188:Src/main.c    ****     tim4Tot += tim4;//for debug
 189:Src/main.c    ****     tim5Tot += tim5;
 190:Src/main.c    ****     
 191:Src/main.c    ****     stateMachine(&consigneDroit, &consigneGauche, positionX, positionY, angle, tim4, tim5, huart2);
 192:Src/main.c    ****     
 193:Src/main.c    ****     moteurGauche(consigneGauche);
 194:Src/main.c    ****     moteurDroit(consigneDroit);
 195:Src/main.c    ****     
 196:Src/main.c    ****     
 197:Src/main.c    ****     debugCounter += 1;
 198:Src/main.c    ****     if (_DEBUG == 1)
 199:Src/main.c    ****     {
 200:Src/main.c    ****         if (debugCounter == debugMessageFrequency)
 201:Src/main.c    ****         {
 202:Src/main.c    ****             sprintf(buffer, "pos : %f / %f / %f\n",positionX, positionY, (angle*1000));
ARM GAS  /tmp/ccdSbIYL.s 			page 5


 203:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 204:Src/main.c    ****             sprintf(buffer2, "tot : %d / %d / %d / %d\n",tim4Tot, tim5Tot, consigneDroit, consigneG
 205:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 206:Src/main.c    ****             debugCounter = 0;
 207:Src/main.c    ****         }
 208:Src/main.c    ****     }
 209:Src/main.c    **** 
 210:Src/main.c    ****     /* USER CODE END WHILE */
 211:Src/main.c    **** 
 212:Src/main.c    ****     /* USER CODE BEGIN 3 */
 213:Src/main.c    ****   }
 214:Src/main.c    ****   /* USER CODE END 3 */
 215:Src/main.c    **** }
 216:Src/main.c    **** 
 217:Src/main.c    **** /**
 218:Src/main.c    ****   * @brief System Clock Configuration
 219:Src/main.c    ****   * @retval None
 220:Src/main.c    ****   */
 221:Src/main.c    **** void SystemClock_Config(void)
 222:Src/main.c    **** {
 223:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 224:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 225:Src/main.c    **** 
 226:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 227:Src/main.c    ****   */
 228:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 229:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 230:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 231:Src/main.c    ****   */
 232:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 233:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 234:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 235:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 236:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 237:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 238:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 239:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 240:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 241:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 242:Src/main.c    ****   {
 243:Src/main.c    ****     Error_Handler();
 244:Src/main.c    ****   }
 245:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 246:Src/main.c    ****   */
 247:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 248:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 249:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 250:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 251:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 252:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 253:Src/main.c    **** 
 254:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 255:Src/main.c    ****   {
 256:Src/main.c    ****     Error_Handler();
 257:Src/main.c    ****   }
 258:Src/main.c    **** }
 259:Src/main.c    **** 
ARM GAS  /tmp/ccdSbIYL.s 			page 6


 260:Src/main.c    **** /**
 261:Src/main.c    ****   * @brief TIM1 Initialization Function
 262:Src/main.c    ****   * @param None
 263:Src/main.c    ****   * @retval None
 264:Src/main.c    ****   */
 265:Src/main.c    **** static void MX_TIM1_Init(void)
 266:Src/main.c    **** {
 267:Src/main.c    **** 
 268:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 271:Src/main.c    **** 
 272:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 273:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 274:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 279:Src/main.c    ****   htim1.Instance = TIM1;
 280:Src/main.c    ****   htim1.Init.Prescaler = 72;
 281:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 282:Src/main.c    ****   htim1.Init.Period = 20000;
 283:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 284:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 285:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 286:Src/main.c    ****   {
 287:Src/main.c    ****     Error_Handler();
 288:Src/main.c    ****   }
 289:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 290:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 291:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 292:Src/main.c    ****   {
 293:Src/main.c    ****     Error_Handler();
 294:Src/main.c    ****   }
 295:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 296:Src/main.c    ****   sConfigOC.Pulse = 1500;
 297:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 298:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 299:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 300:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 301:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 302:Src/main.c    ****   {
 303:Src/main.c    ****     Error_Handler();
 304:Src/main.c    ****   }
 305:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 306:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 307:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 308:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 309:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 310:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 311:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 312:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 313:Src/main.c    ****   {
 314:Src/main.c    ****     Error_Handler();
 315:Src/main.c    ****   }
 316:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
ARM GAS  /tmp/ccdSbIYL.s 			page 7


 317:Src/main.c    **** 
 318:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 319:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 320:Src/main.c    **** 
 321:Src/main.c    **** }
 322:Src/main.c    **** 
 323:Src/main.c    **** /**
 324:Src/main.c    ****   * @brief TIM2 Initialization Function
 325:Src/main.c    ****   * @param None
 326:Src/main.c    ****   * @retval None
 327:Src/main.c    ****   */
 328:Src/main.c    **** static void MX_TIM2_Init(void)
 329:Src/main.c    **** {
 330:Src/main.c    **** 
 331:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 332:Src/main.c    **** 
 333:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 334:Src/main.c    **** 
 335:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 336:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 337:Src/main.c    **** 
 338:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 339:Src/main.c    **** 
 340:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 341:Src/main.c    ****   htim2.Instance = TIM2;
 342:Src/main.c    ****   htim2.Init.Prescaler = 0;
 343:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 344:Src/main.c    ****   htim2.Init.Period = 10000;
 345:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 346:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 347:Src/main.c    ****   {
 348:Src/main.c    ****     Error_Handler();
 349:Src/main.c    ****   }
 350:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 351:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 352:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 353:Src/main.c    ****   {
 354:Src/main.c    ****     Error_Handler();
 355:Src/main.c    ****   }
 356:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 357:Src/main.c    ****   sConfigOC.Pulse = 0;
 358:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 359:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 360:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 361:Src/main.c    ****   {
 362:Src/main.c    ****     Error_Handler();
 363:Src/main.c    ****   }
 364:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 365:Src/main.c    **** 
 366:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 367:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 368:Src/main.c    **** 
 369:Src/main.c    **** }
 370:Src/main.c    **** 
 371:Src/main.c    **** /**
 372:Src/main.c    ****   * @brief TIM3 Initialization Function
 373:Src/main.c    ****   * @param None
ARM GAS  /tmp/ccdSbIYL.s 			page 8


 374:Src/main.c    ****   * @retval None
 375:Src/main.c    ****   */
 376:Src/main.c    **** static void MX_TIM3_Init(void)
 377:Src/main.c    **** {
 378:Src/main.c    **** 
 379:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 380:Src/main.c    **** 
 381:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 382:Src/main.c    **** 
 383:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 384:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 385:Src/main.c    **** 
 386:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 387:Src/main.c    **** 
 388:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 389:Src/main.c    ****   htim3.Instance = TIM3;
 390:Src/main.c    ****   htim3.Init.Prescaler = 0;
 391:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 392:Src/main.c    ****   htim3.Init.Period = 10000;
 393:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 394:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 395:Src/main.c    ****   {
 396:Src/main.c    ****     Error_Handler();
 397:Src/main.c    ****   }
 398:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 399:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 400:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 401:Src/main.c    ****   {
 402:Src/main.c    ****     Error_Handler();
 403:Src/main.c    ****   }
 404:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 405:Src/main.c    ****   sConfigOC.Pulse = 0;
 406:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 407:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 408:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 409:Src/main.c    ****   {
 410:Src/main.c    ****     Error_Handler();
 411:Src/main.c    ****   }
 412:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 413:Src/main.c    **** 
 414:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 415:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 416:Src/main.c    **** 
 417:Src/main.c    **** }
 418:Src/main.c    **** 
 419:Src/main.c    **** /**
 420:Src/main.c    ****   * @brief TIM4 Initialization Function
 421:Src/main.c    ****   * @param None
 422:Src/main.c    ****   * @retval None
 423:Src/main.c    ****   */
 424:Src/main.c    **** static void MX_TIM4_Init(void)
 425:Src/main.c    **** {
 426:Src/main.c    **** 
 427:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 428:Src/main.c    **** 
 429:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 430:Src/main.c    **** 
ARM GAS  /tmp/ccdSbIYL.s 			page 9


 431:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 432:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 433:Src/main.c    **** 
 434:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 435:Src/main.c    **** 
 436:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 437:Src/main.c    ****   htim4.Instance = TIM4;
 438:Src/main.c    ****   htim4.Init.Prescaler = 0;
 439:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 440:Src/main.c    ****   htim4.Init.Period = 0xffff;
 441:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 442:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 443:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 444:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 445:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 446:Src/main.c    ****   sConfig.IC1Filter = 5;
 447:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 448:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 449:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 450:Src/main.c    ****   sConfig.IC2Filter = 5;
 451:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 452:Src/main.c    ****   {
 453:Src/main.c    ****     Error_Handler();
 454:Src/main.c    ****   }
 455:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 456:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 457:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 458:Src/main.c    ****   {
 459:Src/main.c    ****     Error_Handler();
 460:Src/main.c    ****   }
 461:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 462:Src/main.c    **** 
 463:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 464:Src/main.c    **** 
 465:Src/main.c    **** }
 466:Src/main.c    **** 
 467:Src/main.c    **** /**
 468:Src/main.c    ****   * @brief TIM5 Initialization Function
 469:Src/main.c    ****   * @param None
 470:Src/main.c    ****   * @retval None
 471:Src/main.c    ****   */
 472:Src/main.c    **** static void MX_TIM5_Init(void)
 473:Src/main.c    **** {
 474:Src/main.c    **** 
 475:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 0 */
 476:Src/main.c    **** 
 477:Src/main.c    ****   /* USER CODE END TIM5_Init 0 */
 478:Src/main.c    **** 
 479:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 480:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 481:Src/main.c    **** 
 482:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 1 */
 483:Src/main.c    **** 
 484:Src/main.c    ****   /* USER CODE END TIM5_Init 1 */
 485:Src/main.c    ****   htim5.Instance = TIM5;
 486:Src/main.c    ****   htim5.Init.Prescaler = 0;
 487:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  /tmp/ccdSbIYL.s 			page 10


 488:Src/main.c    ****   htim5.Init.Period = 0xffff;
 489:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 490:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 491:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 492:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 493:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 494:Src/main.c    ****   sConfig.IC1Filter = 5;
 495:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 496:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 497:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 498:Src/main.c    ****   sConfig.IC2Filter = 5;
 499:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 500:Src/main.c    ****   {
 501:Src/main.c    ****     Error_Handler();
 502:Src/main.c    ****   }
 503:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 504:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 505:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 506:Src/main.c    ****   {
 507:Src/main.c    ****     Error_Handler();
 508:Src/main.c    ****   }
 509:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 2 */
 510:Src/main.c    **** 
 511:Src/main.c    ****   /* USER CODE END TIM5_Init 2 */
 512:Src/main.c    **** 
 513:Src/main.c    **** }
 514:Src/main.c    **** 
 515:Src/main.c    **** /**
 516:Src/main.c    ****   * @brief USART2 Initialization Function
 517:Src/main.c    ****   * @param None
 518:Src/main.c    ****   * @retval None
 519:Src/main.c    ****   */
 520:Src/main.c    **** static void MX_USART2_UART_Init(void)
 521:Src/main.c    **** {
 522:Src/main.c    **** 
 523:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 524:Src/main.c    **** 
 525:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 526:Src/main.c    **** 
 527:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 528:Src/main.c    **** 
 529:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 530:Src/main.c    ****   huart2.Instance = USART2;
 531:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 532:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 533:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 534:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 535:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 536:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 537:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 538:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 539:Src/main.c    ****   {
 540:Src/main.c    ****     Error_Handler();
 541:Src/main.c    ****   }
 542:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 543:Src/main.c    **** 
 544:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
ARM GAS  /tmp/ccdSbIYL.s 			page 11


 545:Src/main.c    **** 
 546:Src/main.c    **** }
 547:Src/main.c    **** 
 548:Src/main.c    **** /**
 549:Src/main.c    ****   * @brief GPIO Initialization Function
 550:Src/main.c    ****   * @param None
 551:Src/main.c    ****   * @retval None
 552:Src/main.c    ****   */
 553:Src/main.c    **** static void MX_GPIO_Init(void)
 554:Src/main.c    **** {
  28              		.loc 1 554 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 24
  35              		.cfi_offset 4, -24
  36              		.cfi_offset 5, -20
  37              		.cfi_offset 6, -16
  38              		.cfi_offset 7, -12
  39              		.cfi_offset 8, -8
  40              		.cfi_offset 14, -4
  41 0004 8AB0     		sub	sp, sp, #40
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 64
 555:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  44              		.loc 1 555 0
  45 0006 0024     		movs	r4, #0
  46 0008 0594     		str	r4, [sp, #20]
  47 000a 0694     		str	r4, [sp, #24]
  48 000c 0794     		str	r4, [sp, #28]
  49 000e 0894     		str	r4, [sp, #32]
  50 0010 0994     		str	r4, [sp, #36]
  51              	.LBB2:
 556:Src/main.c    **** 
 557:Src/main.c    ****   /* GPIO Ports Clock Enable */
 558:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  52              		.loc 1 558 0
  53 0012 0194     		str	r4, [sp, #4]
  54 0014 324B     		ldr	r3, .L3
  55 0016 1A6B     		ldr	r2, [r3, #48]
  56 0018 42F00402 		orr	r2, r2, #4
  57 001c 1A63     		str	r2, [r3, #48]
  58 001e 1A6B     		ldr	r2, [r3, #48]
  59 0020 02F00402 		and	r2, r2, #4
  60 0024 0192     		str	r2, [sp, #4]
  61 0026 019A     		ldr	r2, [sp, #4]
  62              	.LBE2:
  63              	.LBB3:
 559:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  64              		.loc 1 559 0
  65 0028 0294     		str	r4, [sp, #8]
  66 002a 1A6B     		ldr	r2, [r3, #48]
  67 002c 42F08002 		orr	r2, r2, #128
  68 0030 1A63     		str	r2, [r3, #48]
  69 0032 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccdSbIYL.s 			page 12


  70 0034 02F08002 		and	r2, r2, #128
  71 0038 0292     		str	r2, [sp, #8]
  72 003a 029A     		ldr	r2, [sp, #8]
  73              	.LBE3:
  74              	.LBB4:
 560:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  75              		.loc 1 560 0
  76 003c 0394     		str	r4, [sp, #12]
  77 003e 1A6B     		ldr	r2, [r3, #48]
  78 0040 42F00102 		orr	r2, r2, #1
  79 0044 1A63     		str	r2, [r3, #48]
  80 0046 1A6B     		ldr	r2, [r3, #48]
  81 0048 02F00102 		and	r2, r2, #1
  82 004c 0392     		str	r2, [sp, #12]
  83 004e 039A     		ldr	r2, [sp, #12]
  84              	.LBE4:
  85              	.LBB5:
 561:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  86              		.loc 1 561 0
  87 0050 0494     		str	r4, [sp, #16]
  88 0052 1A6B     		ldr	r2, [r3, #48]
  89 0054 42F00202 		orr	r2, r2, #2
  90 0058 1A63     		str	r2, [r3, #48]
  91 005a 1B6B     		ldr	r3, [r3, #48]
  92 005c 03F00203 		and	r3, r3, #2
  93 0060 0493     		str	r3, [sp, #16]
  94 0062 049B     		ldr	r3, [sp, #16]
  95              	.LBE5:
 562:Src/main.c    **** 
 563:Src/main.c    ****   /*Configure GPIO pin Output Level */
 564:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR1_Pin, GPIO_PIN_RESET);
  96              		.loc 1 564 0
  97 0064 DFF88880 		ldr	r8, .L3+16
  98 0068 4046     		mov	r0, r8
  99 006a 4FF48461 		mov	r1, #1056
 100 006e 2246     		mov	r2, r4
 101 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 102              	.LVL0:
 565:Src/main.c    **** 
 566:Src/main.c    ****   /*Configure GPIO pin Output Level */
 567:Src/main.c    ****   HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 103              		.loc 1 567 0
 104 0074 1B4E     		ldr	r6, .L3+4
 105 0076 3046     		mov	r0, r6
 106 0078 1021     		movs	r1, #16
 107 007a 2246     		mov	r2, r4
 108 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 109              	.LVL1:
 568:Src/main.c    **** 
 569:Src/main.c    ****   /*Configure GPIO pin Output Level */
 570:Src/main.c    ****   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 110              		.loc 1 570 0
 111 0080 194F     		ldr	r7, .L3+8
 112 0082 3846     		mov	r0, r7
 113 0084 2021     		movs	r1, #32
 114 0086 2246     		mov	r2, r4
 115 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccdSbIYL.s 			page 13


 116              	.LVL2:
 571:Src/main.c    **** 
 572:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 573:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 117              		.loc 1 573 0
 118 008c 4FF40053 		mov	r3, #8192
 119 0090 0593     		str	r3, [sp, #20]
 574:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 120              		.loc 1 574 0
 121 0092 164B     		ldr	r3, .L3+12
 122 0094 0693     		str	r3, [sp, #24]
 575:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 123              		.loc 1 575 0
 124 0096 0794     		str	r4, [sp, #28]
 576:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 125              		.loc 1 576 0
 126 0098 3046     		mov	r0, r6
 127 009a 05A9     		add	r1, sp, #20
 128 009c FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL3:
 577:Src/main.c    **** 
 578:Src/main.c    ****   /*Configure GPIO pins : LD2_Pin DIR1_Pin */
 579:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin|DIR1_Pin;
 130              		.loc 1 579 0
 131 00a0 4FF48463 		mov	r3, #1056
 132 00a4 0593     		str	r3, [sp, #20]
 580:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 133              		.loc 1 580 0
 134 00a6 0125     		movs	r5, #1
 135 00a8 0695     		str	r5, [sp, #24]
 581:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 581 0
 137 00aa 0794     		str	r4, [sp, #28]
 582:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 138              		.loc 1 582 0
 139 00ac 0894     		str	r4, [sp, #32]
 583:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 140              		.loc 1 583 0
 141 00ae 4046     		mov	r0, r8
 142 00b0 05A9     		add	r1, sp, #20
 143 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 144              	.LVL4:
 584:Src/main.c    **** 
 585:Src/main.c    ****   /*Configure GPIO pin : DebugTiming_Pin */
 586:Src/main.c    ****   GPIO_InitStruct.Pin = DebugTiming_Pin;
 145              		.loc 1 586 0
 146 00b6 1023     		movs	r3, #16
 147 00b8 0593     		str	r3, [sp, #20]
 587:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 148              		.loc 1 587 0
 149 00ba 0695     		str	r5, [sp, #24]
 588:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 150              		.loc 1 588 0
 151 00bc 0794     		str	r4, [sp, #28]
 589:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 152              		.loc 1 589 0
 153 00be 0894     		str	r4, [sp, #32]
ARM GAS  /tmp/ccdSbIYL.s 			page 14


 590:Src/main.c    ****   HAL_GPIO_Init(DebugTiming_GPIO_Port, &GPIO_InitStruct);
 154              		.loc 1 590 0
 155 00c0 3046     		mov	r0, r6
 156 00c2 05A9     		add	r1, sp, #20
 157 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL5:
 591:Src/main.c    **** 
 592:Src/main.c    ****   /*Configure GPIO pin : DIR2_Pin */
 593:Src/main.c    ****   GPIO_InitStruct.Pin = DIR2_Pin;
 159              		.loc 1 593 0
 160 00c8 2023     		movs	r3, #32
 161 00ca 0593     		str	r3, [sp, #20]
 594:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 162              		.loc 1 594 0
 163 00cc 0695     		str	r5, [sp, #24]
 595:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 164              		.loc 1 595 0
 165 00ce 0794     		str	r4, [sp, #28]
 596:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 166              		.loc 1 596 0
 167 00d0 0894     		str	r4, [sp, #32]
 597:Src/main.c    ****   HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 168              		.loc 1 597 0
 169 00d2 3846     		mov	r0, r7
 170 00d4 05A9     		add	r1, sp, #20
 171 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 172              	.LVL6:
 598:Src/main.c    **** 
 599:Src/main.c    **** }
 173              		.loc 1 599 0
 174 00da 0AB0     		add	sp, sp, #40
 175              	.LCFI2:
 176              		.cfi_def_cfa_offset 24
 177              		@ sp needed
 178 00dc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 179              	.L4:
 180              		.align	2
 181              	.L3:
 182 00e0 00380240 		.word	1073887232
 183 00e4 00080240 		.word	1073874944
 184 00e8 00040240 		.word	1073873920
 185 00ec 00002110 		.word	270598144
 186 00f0 00000240 		.word	1073872896
 187              		.cfi_endproc
 188              	.LFE131:
 190              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 191              		.align	2
 192              		.thumb
 193              		.thumb_func
 195              	MX_USART2_UART_Init:
 196              	.LFB130:
 521:Src/main.c    **** 
 197              		.loc 1 521 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccdSbIYL.s 			page 15


 202              	.LCFI3:
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 3, -8
 205              		.cfi_offset 14, -4
 530:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 206              		.loc 1 530 0
 207 0002 0848     		ldr	r0, .L7
 208 0004 084B     		ldr	r3, .L7+4
 209 0006 0360     		str	r3, [r0]
 531:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 210              		.loc 1 531 0
 211 0008 4FF4E133 		mov	r3, #115200
 212 000c 4360     		str	r3, [r0, #4]
 532:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 213              		.loc 1 532 0
 214 000e 0023     		movs	r3, #0
 215 0010 8360     		str	r3, [r0, #8]
 533:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 216              		.loc 1 533 0
 217 0012 C360     		str	r3, [r0, #12]
 534:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 218              		.loc 1 534 0
 219 0014 0361     		str	r3, [r0, #16]
 535:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 220              		.loc 1 535 0
 221 0016 0C22     		movs	r2, #12
 222 0018 4261     		str	r2, [r0, #20]
 536:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 223              		.loc 1 536 0
 224 001a 8361     		str	r3, [r0, #24]
 537:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 225              		.loc 1 537 0
 226 001c C361     		str	r3, [r0, #28]
 538:Src/main.c    ****   {
 227              		.loc 1 538 0
 228 001e FFF7FEFF 		bl	HAL_UART_Init
 229              	.LVL7:
 230 0022 08BD     		pop	{r3, pc}
 231              	.L8:
 232              		.align	2
 233              	.L7:
 234 0024 00000000 		.word	huart2
 235 0028 00440040 		.word	1073759232
 236              		.cfi_endproc
 237              	.LFE130:
 239              		.section	.text.MX_TIM2_Init,"ax",%progbits
 240              		.align	2
 241              		.thumb
 242              		.thumb_func
 244              	MX_TIM2_Init:
 245              	.LFB126:
 329:Src/main.c    **** 
 246              		.loc 1 329 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 40
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccdSbIYL.s 			page 16


 251              	.LCFI4:
 252              		.cfi_def_cfa_offset 12
 253              		.cfi_offset 4, -12
 254              		.cfi_offset 5, -8
 255              		.cfi_offset 14, -4
 256 0002 8BB0     		sub	sp, sp, #44
 257              	.LCFI5:
 258              		.cfi_def_cfa_offset 56
 335:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 259              		.loc 1 335 0
 260 0004 0024     		movs	r4, #0
 261 0006 0894     		str	r4, [sp, #32]
 262 0008 0994     		str	r4, [sp, #36]
 336:Src/main.c    **** 
 263              		.loc 1 336 0
 264 000a 0194     		str	r4, [sp, #4]
 265 000c 0294     		str	r4, [sp, #8]
 266 000e 0394     		str	r4, [sp, #12]
 267 0010 0494     		str	r4, [sp, #16]
 268 0012 0594     		str	r4, [sp, #20]
 269 0014 0694     		str	r4, [sp, #24]
 270 0016 0794     		str	r4, [sp, #28]
 341:Src/main.c    ****   htim2.Init.Prescaler = 0;
 271              		.loc 1 341 0
 272 0018 104D     		ldr	r5, .L11
 273 001a 4FF08043 		mov	r3, #1073741824
 274 001e 2B60     		str	r3, [r5]
 342:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 275              		.loc 1 342 0
 276 0020 6C60     		str	r4, [r5, #4]
 343:Src/main.c    ****   htim2.Init.Period = 10000;
 277              		.loc 1 343 0
 278 0022 AC60     		str	r4, [r5, #8]
 344:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 279              		.loc 1 344 0
 280 0024 42F21073 		movw	r3, #10000
 281 0028 EB60     		str	r3, [r5, #12]
 345:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 282              		.loc 1 345 0
 283 002a 2C61     		str	r4, [r5, #16]
 346:Src/main.c    ****   {
 284              		.loc 1 346 0
 285 002c 2846     		mov	r0, r5
 286 002e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 287              	.LVL8:
 350:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 288              		.loc 1 350 0
 289 0032 0894     		str	r4, [sp, #32]
 351:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 290              		.loc 1 351 0
 291 0034 0994     		str	r4, [sp, #36]
 352:Src/main.c    ****   {
 292              		.loc 1 352 0
 293 0036 2846     		mov	r0, r5
 294 0038 08A9     		add	r1, sp, #32
 295 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 296              	.LVL9:
ARM GAS  /tmp/ccdSbIYL.s 			page 17


 356:Src/main.c    ****   sConfigOC.Pulse = 0;
 297              		.loc 1 356 0
 298 003e 6023     		movs	r3, #96
 299 0040 0193     		str	r3, [sp, #4]
 357:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 300              		.loc 1 357 0
 301 0042 0294     		str	r4, [sp, #8]
 358:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 302              		.loc 1 358 0
 303 0044 0394     		str	r4, [sp, #12]
 359:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 304              		.loc 1 359 0
 305 0046 0594     		str	r4, [sp, #20]
 360:Src/main.c    ****   {
 306              		.loc 1 360 0
 307 0048 2846     		mov	r0, r5
 308 004a 01A9     		add	r1, sp, #4
 309 004c 0422     		movs	r2, #4
 310 004e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 311              	.LVL10:
 367:Src/main.c    **** 
 312              		.loc 1 367 0
 313 0052 2846     		mov	r0, r5
 314 0054 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 315              	.LVL11:
 369:Src/main.c    **** 
 316              		.loc 1 369 0
 317 0058 0BB0     		add	sp, sp, #44
 318              	.LCFI6:
 319              		.cfi_def_cfa_offset 12
 320              		@ sp needed
 321 005a 30BD     		pop	{r4, r5, pc}
 322              	.L12:
 323              		.align	2
 324              	.L11:
 325 005c 00000000 		.word	htim2
 326              		.cfi_endproc
 327              	.LFE126:
 329              		.section	.text.MX_TIM3_Init,"ax",%progbits
 330              		.align	2
 331              		.thumb
 332              		.thumb_func
 334              	MX_TIM3_Init:
 335              	.LFB127:
 377:Src/main.c    **** 
 336              		.loc 1 377 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 40
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340 0000 30B5     		push	{r4, r5, lr}
 341              	.LCFI7:
 342              		.cfi_def_cfa_offset 12
 343              		.cfi_offset 4, -12
 344              		.cfi_offset 5, -8
 345              		.cfi_offset 14, -4
 346 0002 8BB0     		sub	sp, sp, #44
 347              	.LCFI8:
ARM GAS  /tmp/ccdSbIYL.s 			page 18


 348              		.cfi_def_cfa_offset 56
 383:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 349              		.loc 1 383 0
 350 0004 0024     		movs	r4, #0
 351 0006 0894     		str	r4, [sp, #32]
 352 0008 0994     		str	r4, [sp, #36]
 384:Src/main.c    **** 
 353              		.loc 1 384 0
 354 000a 0194     		str	r4, [sp, #4]
 355 000c 0294     		str	r4, [sp, #8]
 356 000e 0394     		str	r4, [sp, #12]
 357 0010 0494     		str	r4, [sp, #16]
 358 0012 0594     		str	r4, [sp, #20]
 359 0014 0694     		str	r4, [sp, #24]
 360 0016 0794     		str	r4, [sp, #28]
 389:Src/main.c    ****   htim3.Init.Prescaler = 0;
 361              		.loc 1 389 0
 362 0018 104D     		ldr	r5, .L15
 363 001a 114B     		ldr	r3, .L15+4
 364 001c 2B60     		str	r3, [r5]
 390:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 365              		.loc 1 390 0
 366 001e 6C60     		str	r4, [r5, #4]
 391:Src/main.c    ****   htim3.Init.Period = 10000;
 367              		.loc 1 391 0
 368 0020 AC60     		str	r4, [r5, #8]
 392:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 369              		.loc 1 392 0
 370 0022 42F21073 		movw	r3, #10000
 371 0026 EB60     		str	r3, [r5, #12]
 393:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 372              		.loc 1 393 0
 373 0028 2C61     		str	r4, [r5, #16]
 394:Src/main.c    ****   {
 374              		.loc 1 394 0
 375 002a 2846     		mov	r0, r5
 376 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 377              	.LVL12:
 398:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 378              		.loc 1 398 0
 379 0030 0894     		str	r4, [sp, #32]
 399:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 380              		.loc 1 399 0
 381 0032 0994     		str	r4, [sp, #36]
 400:Src/main.c    ****   {
 382              		.loc 1 400 0
 383 0034 2846     		mov	r0, r5
 384 0036 08A9     		add	r1, sp, #32
 385 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 386              	.LVL13:
 404:Src/main.c    ****   sConfigOC.Pulse = 0;
 387              		.loc 1 404 0
 388 003c 6023     		movs	r3, #96
 389 003e 0193     		str	r3, [sp, #4]
 405:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 390              		.loc 1 405 0
 391 0040 0294     		str	r4, [sp, #8]
ARM GAS  /tmp/ccdSbIYL.s 			page 19


 406:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 392              		.loc 1 406 0
 393 0042 0394     		str	r4, [sp, #12]
 407:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 394              		.loc 1 407 0
 395 0044 0594     		str	r4, [sp, #20]
 408:Src/main.c    ****   {
 396              		.loc 1 408 0
 397 0046 2846     		mov	r0, r5
 398 0048 01A9     		add	r1, sp, #4
 399 004a 2246     		mov	r2, r4
 400 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 401              	.LVL14:
 415:Src/main.c    **** 
 402              		.loc 1 415 0
 403 0050 2846     		mov	r0, r5
 404 0052 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 405              	.LVL15:
 417:Src/main.c    **** 
 406              		.loc 1 417 0
 407 0056 0BB0     		add	sp, sp, #44
 408              	.LCFI9:
 409              		.cfi_def_cfa_offset 12
 410              		@ sp needed
 411 0058 30BD     		pop	{r4, r5, pc}
 412              	.L16:
 413 005a 00BF     		.align	2
 414              	.L15:
 415 005c 00000000 		.word	htim3
 416 0060 00040040 		.word	1073742848
 417              		.cfi_endproc
 418              	.LFE127:
 420              		.section	.text.MX_TIM4_Init,"ax",%progbits
 421              		.align	2
 422              		.thumb
 423              		.thumb_func
 425              	MX_TIM4_Init:
 426              	.LFB128:
 425:Src/main.c    **** 
 427              		.loc 1 425 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 48
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431 0000 30B5     		push	{r4, r5, lr}
 432              	.LCFI10:
 433              		.cfi_def_cfa_offset 12
 434              		.cfi_offset 4, -12
 435              		.cfi_offset 5, -8
 436              		.cfi_offset 14, -4
 437 0002 8DB0     		sub	sp, sp, #52
 438              	.LCFI11:
 439              		.cfi_def_cfa_offset 64
 431:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 440              		.loc 1 431 0
 441 0004 0024     		movs	r4, #0
 442 0006 0494     		str	r4, [sp, #16]
 443 0008 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccdSbIYL.s 			page 20


 444 000a 0894     		str	r4, [sp, #32]
 445 000c 0A94     		str	r4, [sp, #40]
 432:Src/main.c    **** 
 446              		.loc 1 432 0
 447 000e 0194     		str	r4, [sp, #4]
 448 0010 0294     		str	r4, [sp, #8]
 437:Src/main.c    ****   htim4.Init.Prescaler = 0;
 449              		.loc 1 437 0
 450 0012 0E4D     		ldr	r5, .L19
 451 0014 0E4B     		ldr	r3, .L19+4
 452 0016 2B60     		str	r3, [r5]
 438:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 453              		.loc 1 438 0
 454 0018 6C60     		str	r4, [r5, #4]
 439:Src/main.c    ****   htim4.Init.Period = 0xffff;
 455              		.loc 1 439 0
 456 001a AC60     		str	r4, [r5, #8]
 440:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 457              		.loc 1 440 0
 458 001c 4FF6FF73 		movw	r3, #65535
 459 0020 EB60     		str	r3, [r5, #12]
 441:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 460              		.loc 1 441 0
 461 0022 2C61     		str	r4, [r5, #16]
 442:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 462              		.loc 1 442 0
 463 0024 0123     		movs	r3, #1
 464 0026 0393     		str	r3, [sp, #12]
 444:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 465              		.loc 1 444 0
 466 0028 0593     		str	r3, [sp, #20]
 446:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 467              		.loc 1 446 0
 468 002a 0522     		movs	r2, #5
 469 002c 0792     		str	r2, [sp, #28]
 448:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 470              		.loc 1 448 0
 471 002e 0993     		str	r3, [sp, #36]
 450:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 472              		.loc 1 450 0
 473 0030 0B92     		str	r2, [sp, #44]
 451:Src/main.c    ****   {
 474              		.loc 1 451 0
 475 0032 2846     		mov	r0, r5
 476 0034 03A9     		add	r1, sp, #12
 477 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 478              	.LVL16:
 455:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 479              		.loc 1 455 0
 480 003a 0194     		str	r4, [sp, #4]
 456:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 481              		.loc 1 456 0
 482 003c 0294     		str	r4, [sp, #8]
 457:Src/main.c    ****   {
 483              		.loc 1 457 0
 484 003e 2846     		mov	r0, r5
 485 0040 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccdSbIYL.s 			page 21


 486 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 487              	.LVL17:
 465:Src/main.c    **** 
 488              		.loc 1 465 0
 489 0046 0DB0     		add	sp, sp, #52
 490              	.LCFI12:
 491              		.cfi_def_cfa_offset 12
 492              		@ sp needed
 493 0048 30BD     		pop	{r4, r5, pc}
 494              	.L20:
 495 004a 00BF     		.align	2
 496              	.L19:
 497 004c 00000000 		.word	htim4
 498 0050 00080040 		.word	1073743872
 499              		.cfi_endproc
 500              	.LFE128:
 502              		.section	.text.MX_TIM5_Init,"ax",%progbits
 503              		.align	2
 504              		.thumb
 505              		.thumb_func
 507              	MX_TIM5_Init:
 508              	.LFB129:
 473:Src/main.c    **** 
 509              		.loc 1 473 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 48
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513 0000 30B5     		push	{r4, r5, lr}
 514              	.LCFI13:
 515              		.cfi_def_cfa_offset 12
 516              		.cfi_offset 4, -12
 517              		.cfi_offset 5, -8
 518              		.cfi_offset 14, -4
 519 0002 8DB0     		sub	sp, sp, #52
 520              	.LCFI14:
 521              		.cfi_def_cfa_offset 64
 479:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 522              		.loc 1 479 0
 523 0004 0024     		movs	r4, #0
 524 0006 0494     		str	r4, [sp, #16]
 525 0008 0694     		str	r4, [sp, #24]
 526 000a 0894     		str	r4, [sp, #32]
 527 000c 0A94     		str	r4, [sp, #40]
 480:Src/main.c    **** 
 528              		.loc 1 480 0
 529 000e 0194     		str	r4, [sp, #4]
 530 0010 0294     		str	r4, [sp, #8]
 485:Src/main.c    ****   htim5.Init.Prescaler = 0;
 531              		.loc 1 485 0
 532 0012 0E4D     		ldr	r5, .L23
 533 0014 0E4B     		ldr	r3, .L23+4
 534 0016 2B60     		str	r3, [r5]
 486:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 535              		.loc 1 486 0
 536 0018 6C60     		str	r4, [r5, #4]
 487:Src/main.c    ****   htim5.Init.Period = 0xffff;
 537              		.loc 1 487 0
ARM GAS  /tmp/ccdSbIYL.s 			page 22


 538 001a AC60     		str	r4, [r5, #8]
 488:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 539              		.loc 1 488 0
 540 001c 4FF6FF73 		movw	r3, #65535
 541 0020 EB60     		str	r3, [r5, #12]
 489:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 542              		.loc 1 489 0
 543 0022 2C61     		str	r4, [r5, #16]
 490:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 544              		.loc 1 490 0
 545 0024 0123     		movs	r3, #1
 546 0026 0393     		str	r3, [sp, #12]
 492:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 547              		.loc 1 492 0
 548 0028 0593     		str	r3, [sp, #20]
 494:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 549              		.loc 1 494 0
 550 002a 0522     		movs	r2, #5
 551 002c 0792     		str	r2, [sp, #28]
 496:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 552              		.loc 1 496 0
 553 002e 0993     		str	r3, [sp, #36]
 498:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 554              		.loc 1 498 0
 555 0030 0B92     		str	r2, [sp, #44]
 499:Src/main.c    ****   {
 556              		.loc 1 499 0
 557 0032 2846     		mov	r0, r5
 558 0034 03A9     		add	r1, sp, #12
 559 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 560              	.LVL18:
 503:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 561              		.loc 1 503 0
 562 003a 0194     		str	r4, [sp, #4]
 504:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 563              		.loc 1 504 0
 564 003c 0294     		str	r4, [sp, #8]
 505:Src/main.c    ****   {
 565              		.loc 1 505 0
 566 003e 2846     		mov	r0, r5
 567 0040 01A9     		add	r1, sp, #4
 568 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 569              	.LVL19:
 513:Src/main.c    **** 
 570              		.loc 1 513 0
 571 0046 0DB0     		add	sp, sp, #52
 572              	.LCFI15:
 573              		.cfi_def_cfa_offset 12
 574              		@ sp needed
 575 0048 30BD     		pop	{r4, r5, pc}
 576              	.L24:
 577 004a 00BF     		.align	2
 578              	.L23:
 579 004c 00000000 		.word	htim5
 580 0050 000C0040 		.word	1073744896
 581              		.cfi_endproc
 582              	.LFE129:
ARM GAS  /tmp/ccdSbIYL.s 			page 23


 584              		.section	.text.MX_TIM1_Init,"ax",%progbits
 585              		.align	2
 586              		.thumb
 587              		.thumb_func
 589              	MX_TIM1_Init:
 590              	.LFB125:
 266:Src/main.c    **** 
 591              		.loc 1 266 0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 64
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595 0000 30B5     		push	{r4, r5, lr}
 596              	.LCFI16:
 597              		.cfi_def_cfa_offset 12
 598              		.cfi_offset 4, -12
 599              		.cfi_offset 5, -8
 600              		.cfi_offset 14, -4
 601 0002 91B0     		sub	sp, sp, #68
 602              	.LCFI17:
 603              		.cfi_def_cfa_offset 80
 272:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 604              		.loc 1 272 0
 605 0004 0024     		movs	r4, #0
 606 0006 0E94     		str	r4, [sp, #56]
 607 0008 0F94     		str	r4, [sp, #60]
 273:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 608              		.loc 1 273 0
 609 000a 0794     		str	r4, [sp, #28]
 610 000c 0894     		str	r4, [sp, #32]
 611 000e 0994     		str	r4, [sp, #36]
 612 0010 0A94     		str	r4, [sp, #40]
 613 0012 0B94     		str	r4, [sp, #44]
 614 0014 0C94     		str	r4, [sp, #48]
 615 0016 0D94     		str	r4, [sp, #52]
 274:Src/main.c    **** 
 616              		.loc 1 274 0
 617 0018 0094     		str	r4, [sp]
 618 001a 0194     		str	r4, [sp, #4]
 619 001c 0294     		str	r4, [sp, #8]
 620 001e 0394     		str	r4, [sp, #12]
 621 0020 0494     		str	r4, [sp, #16]
 622 0022 0594     		str	r4, [sp, #20]
 623 0024 0694     		str	r4, [sp, #24]
 279:Src/main.c    ****   htim1.Init.Prescaler = 72;
 624              		.loc 1 279 0
 625 0026 1A4D     		ldr	r5, .L27
 626 0028 1A4B     		ldr	r3, .L27+4
 627 002a 2B60     		str	r3, [r5]
 280:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 628              		.loc 1 280 0
 629 002c 4823     		movs	r3, #72
 630 002e 6B60     		str	r3, [r5, #4]
 281:Src/main.c    ****   htim1.Init.Period = 20000;
 631              		.loc 1 281 0
 632 0030 AC60     		str	r4, [r5, #8]
 282:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 633              		.loc 1 282 0
ARM GAS  /tmp/ccdSbIYL.s 			page 24


 634 0032 44F62063 		movw	r3, #20000
 635 0036 EB60     		str	r3, [r5, #12]
 283:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 636              		.loc 1 283 0
 637 0038 2C61     		str	r4, [r5, #16]
 284:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 638              		.loc 1 284 0
 639 003a 6C61     		str	r4, [r5, #20]
 285:Src/main.c    ****   {
 640              		.loc 1 285 0
 641 003c 2846     		mov	r0, r5
 642 003e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 643              	.LVL20:
 289:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 644              		.loc 1 289 0
 645 0042 0E94     		str	r4, [sp, #56]
 290:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 646              		.loc 1 290 0
 647 0044 0F94     		str	r4, [sp, #60]
 291:Src/main.c    ****   {
 648              		.loc 1 291 0
 649 0046 2846     		mov	r0, r5
 650 0048 0EA9     		add	r1, sp, #56
 651 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 652              	.LVL21:
 295:Src/main.c    ****   sConfigOC.Pulse = 1500;
 653              		.loc 1 295 0
 654 004e 6023     		movs	r3, #96
 655 0050 0793     		str	r3, [sp, #28]
 296:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 656              		.loc 1 296 0
 657 0052 40F2DC53 		movw	r3, #1500
 658 0056 0893     		str	r3, [sp, #32]
 297:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 659              		.loc 1 297 0
 660 0058 0994     		str	r4, [sp, #36]
 298:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 661              		.loc 1 298 0
 662 005a 0B94     		str	r4, [sp, #44]
 299:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 663              		.loc 1 299 0
 664 005c 0C94     		str	r4, [sp, #48]
 300:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 665              		.loc 1 300 0
 666 005e 0D94     		str	r4, [sp, #52]
 301:Src/main.c    ****   {
 667              		.loc 1 301 0
 668 0060 2846     		mov	r0, r5
 669 0062 07A9     		add	r1, sp, #28
 670 0064 0C22     		movs	r2, #12
 671 0066 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 672              	.LVL22:
 305:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 673              		.loc 1 305 0
 674 006a 0094     		str	r4, [sp]
 306:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 675              		.loc 1 306 0
ARM GAS  /tmp/ccdSbIYL.s 			page 25


 676 006c 0194     		str	r4, [sp, #4]
 307:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 677              		.loc 1 307 0
 678 006e 0294     		str	r4, [sp, #8]
 308:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 679              		.loc 1 308 0
 680 0070 0394     		str	r4, [sp, #12]
 309:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 681              		.loc 1 309 0
 682 0072 0494     		str	r4, [sp, #16]
 310:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 683              		.loc 1 310 0
 684 0074 4FF40053 		mov	r3, #8192
 685 0078 0593     		str	r3, [sp, #20]
 311:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 686              		.loc 1 311 0
 687 007a 0694     		str	r4, [sp, #24]
 312:Src/main.c    ****   {
 688              		.loc 1 312 0
 689 007c 2846     		mov	r0, r5
 690 007e 6946     		mov	r1, sp
 691 0080 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 692              	.LVL23:
 319:Src/main.c    **** 
 693              		.loc 1 319 0
 694 0084 2846     		mov	r0, r5
 695 0086 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 696              	.LVL24:
 321:Src/main.c    **** 
 697              		.loc 1 321 0
 698 008a 11B0     		add	sp, sp, #68
 699              	.LCFI18:
 700              		.cfi_def_cfa_offset 12
 701              		@ sp needed
 702 008c 30BD     		pop	{r4, r5, pc}
 703              	.L28:
 704 008e 00BF     		.align	2
 705              	.L27:
 706 0090 00000000 		.word	htim1
 707 0094 00000140 		.word	1073807360
 708              		.cfi_endproc
 709              	.LFE125:
 711              		.section	.text.SystemClock_Config,"ax",%progbits
 712              		.align	2
 713              		.global	SystemClock_Config
 714              		.thumb
 715              		.thumb_func
 717              	SystemClock_Config:
 718              	.LFB124:
 222:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 719              		.loc 1 222 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 80
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723 0000 30B5     		push	{r4, r5, lr}
 724              	.LCFI19:
 725              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccdSbIYL.s 			page 26


 726              		.cfi_offset 4, -12
 727              		.cfi_offset 5, -8
 728              		.cfi_offset 14, -4
 729 0002 95B0     		sub	sp, sp, #84
 730              	.LCFI20:
 731              		.cfi_def_cfa_offset 96
 223:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 732              		.loc 1 223 0
 733 0004 0024     		movs	r4, #0
 734 0006 0894     		str	r4, [sp, #32]
 735 0008 0994     		str	r4, [sp, #36]
 736 000a 0A94     		str	r4, [sp, #40]
 737 000c 0B94     		str	r4, [sp, #44]
 738 000e 0C94     		str	r4, [sp, #48]
 739 0010 0D94     		str	r4, [sp, #52]
 740 0012 0E94     		str	r4, [sp, #56]
 741 0014 0F94     		str	r4, [sp, #60]
 742 0016 1094     		str	r4, [sp, #64]
 743 0018 1194     		str	r4, [sp, #68]
 744 001a 1294     		str	r4, [sp, #72]
 745 001c 1394     		str	r4, [sp, #76]
 224:Src/main.c    **** 
 746              		.loc 1 224 0
 747 001e 0394     		str	r4, [sp, #12]
 748 0020 0494     		str	r4, [sp, #16]
 749 0022 0594     		str	r4, [sp, #20]
 750 0024 0694     		str	r4, [sp, #24]
 751 0026 0794     		str	r4, [sp, #28]
 752              	.LBB6:
 228:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 753              		.loc 1 228 0
 754 0028 0194     		str	r4, [sp, #4]
 755 002a 1C4B     		ldr	r3, .L31
 756 002c 1A6C     		ldr	r2, [r3, #64]
 757 002e 42F08052 		orr	r2, r2, #268435456
 758 0032 1A64     		str	r2, [r3, #64]
 759 0034 1B6C     		ldr	r3, [r3, #64]
 760 0036 03F08053 		and	r3, r3, #268435456
 761 003a 0193     		str	r3, [sp, #4]
 762 003c 019B     		ldr	r3, [sp, #4]
 763              	.LBE6:
 764              	.LBB7:
 229:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 765              		.loc 1 229 0
 766 003e 0294     		str	r4, [sp, #8]
 767 0040 174A     		ldr	r2, .L31+4
 768 0042 1368     		ldr	r3, [r2]
 769 0044 23F44043 		bic	r3, r3, #49152
 770 0048 43F40043 		orr	r3, r3, #32768
 771 004c 1360     		str	r3, [r2]
 772 004e 1368     		ldr	r3, [r2]
 773 0050 03F44043 		and	r3, r3, #49152
 774 0054 0293     		str	r3, [sp, #8]
 775 0056 029B     		ldr	r3, [sp, #8]
 776              	.LBE7:
 232:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 777              		.loc 1 232 0
ARM GAS  /tmp/ccdSbIYL.s 			page 27


 778 0058 0225     		movs	r5, #2
 779 005a 0895     		str	r5, [sp, #32]
 233:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 780              		.loc 1 233 0
 781 005c 0123     		movs	r3, #1
 782 005e 0B93     		str	r3, [sp, #44]
 234:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 783              		.loc 1 234 0
 784 0060 1023     		movs	r3, #16
 785 0062 0C93     		str	r3, [sp, #48]
 235:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 786              		.loc 1 235 0
 787 0064 0E95     		str	r5, [sp, #56]
 236:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 788              		.loc 1 236 0
 789 0066 0F94     		str	r4, [sp, #60]
 237:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 790              		.loc 1 237 0
 791 0068 1093     		str	r3, [sp, #64]
 238:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 792              		.loc 1 238 0
 793 006a 4FF4A873 		mov	r3, #336
 794 006e 1193     		str	r3, [sp, #68]
 239:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 795              		.loc 1 239 0
 796 0070 0423     		movs	r3, #4
 797 0072 1293     		str	r3, [sp, #72]
 240:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 798              		.loc 1 240 0
 799 0074 0723     		movs	r3, #7
 800 0076 1393     		str	r3, [sp, #76]
 241:Src/main.c    ****   {
 801              		.loc 1 241 0
 802 0078 08A8     		add	r0, sp, #32
 803 007a FFF7FEFF 		bl	HAL_RCC_OscConfig
 804              	.LVL25:
 247:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 805              		.loc 1 247 0
 806 007e 0F23     		movs	r3, #15
 807 0080 0393     		str	r3, [sp, #12]
 249:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 808              		.loc 1 249 0
 809 0082 0495     		str	r5, [sp, #16]
 250:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 810              		.loc 1 250 0
 811 0084 0594     		str	r4, [sp, #20]
 251:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 812              		.loc 1 251 0
 813 0086 4FF48053 		mov	r3, #4096
 814 008a 0693     		str	r3, [sp, #24]
 252:Src/main.c    **** 
 815              		.loc 1 252 0
 816 008c 0794     		str	r4, [sp, #28]
 254:Src/main.c    ****   {
 817              		.loc 1 254 0
 818 008e 03A8     		add	r0, sp, #12
 819 0090 2946     		mov	r1, r5
ARM GAS  /tmp/ccdSbIYL.s 			page 28


 820 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 821              	.LVL26:
 258:Src/main.c    **** 
 822              		.loc 1 258 0
 823 0096 15B0     		add	sp, sp, #84
 824              	.LCFI21:
 825              		.cfi_def_cfa_offset 12
 826              		@ sp needed
 827 0098 30BD     		pop	{r4, r5, pc}
 828              	.L32:
 829 009a 00BF     		.align	2
 830              	.L31:
 831 009c 00380240 		.word	1073887232
 832 00a0 00700040 		.word	1073770496
 833              		.cfi_endproc
 834              	.LFE124:
 836              		.section	.text.moteurDroit,"ax",%progbits
 837              		.align	2
 838              		.global	moteurDroit
 839              		.thumb
 840              		.thumb_func
 842              	moteurDroit:
 843              	.LFB132:
 600:Src/main.c    **** 
 601:Src/main.c    **** /* USER CODE BEGIN 4 */
 602:Src/main.c    **** void moteurDroit(int PWM)
 603:Src/main.c    **** {
 844              		.loc 1 603 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              	.LVL27:
 849 0000 10B5     		push	{r4, lr}
 850              	.LCFI22:
 851              		.cfi_def_cfa_offset 8
 852              		.cfi_offset 4, -8
 853              		.cfi_offset 14, -4
 604:Src/main.c    ****     if(PWM == abs(PWM))
 854              		.loc 1 604 0
 855 0002 80EAE074 		eor	r4, r0, r0, asr #31
 856 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 857 000a 8442     		cmp	r4, r0
 858 000c 06D1     		bne	.L34
 605:Src/main.c    ****     {
 606:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 859              		.loc 1 606 0
 860 000e 0D48     		ldr	r0, .L39
 861              	.LVL28:
 862 0010 4FF48061 		mov	r1, #1024
 863 0014 0022     		movs	r2, #0
 864 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 865              	.LVL29:
 866 001a 05E0     		b	.L35
 867              	.LVL30:
 868              	.L34:
 607:Src/main.c    ****     }
 608:Src/main.c    ****     else
ARM GAS  /tmp/ccdSbIYL.s 			page 29


 609:Src/main.c    ****     {
 610:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 869              		.loc 1 610 0
 870 001c 0948     		ldr	r0, .L39
 871              	.LVL31:
 872 001e 4FF48061 		mov	r1, #1024
 873 0022 0122     		movs	r2, #1
 874 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 875              	.LVL32:
 876              	.L35:
 611:Src/main.c    ****     }
 612:Src/main.c    ****     if (abs(PWM) > 10000)
 877              		.loc 1 612 0
 878 0028 42F21073 		movw	r3, #10000
 879 002c 9C42     		cmp	r4, r3
 880 002e 05DD     		ble	.L36
 613:Src/main.c    ****     {
 614:Src/main.c    **** 		htim2.Instance->CCR2 = 10000;
 881              		.loc 1 614 0
 882 0030 054B     		ldr	r3, .L39+4
 883 0032 1B68     		ldr	r3, [r3]
 884 0034 42F21072 		movw	r2, #10000
 885 0038 9A63     		str	r2, [r3, #56]
 886 003a 10BD     		pop	{r4, pc}
 887              	.L36:
 615:Src/main.c    ****     }
 616:Src/main.c    ****     else 
 617:Src/main.c    ****     {
 618:Src/main.c    **** 		htim2.Instance->CCR2 = abs(PWM);
 888              		.loc 1 618 0
 889 003c 024B     		ldr	r3, .L39+4
 890 003e 1B68     		ldr	r3, [r3]
 891 0040 9C63     		str	r4, [r3, #56]
 892 0042 10BD     		pop	{r4, pc}
 893              	.L40:
 894              		.align	2
 895              	.L39:
 896 0044 00000240 		.word	1073872896
 897 0048 00000000 		.word	htim2
 898              		.cfi_endproc
 899              	.LFE132:
 901              		.section	.text.moteurGauche,"ax",%progbits
 902              		.align	2
 903              		.global	moteurGauche
 904              		.thumb
 905              		.thumb_func
 907              	moteurGauche:
 908              	.LFB133:
 619:Src/main.c    **** 	}
 620:Src/main.c    **** }
 621:Src/main.c    **** 
 622:Src/main.c    **** 
 623:Src/main.c    **** void moteurGauche(int PWM)
 624:Src/main.c    **** {
 909              		.loc 1 624 0
 910              		.cfi_startproc
 911              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccdSbIYL.s 			page 30


 912              		@ frame_needed = 0, uses_anonymous_args = 0
 913              	.LVL33:
 914 0000 10B5     		push	{r4, lr}
 915              	.LCFI23:
 916              		.cfi_def_cfa_offset 8
 917              		.cfi_offset 4, -8
 918              		.cfi_offset 14, -4
 625:Src/main.c    ****     if(PWM == abs(PWM))
 919              		.loc 1 625 0
 920 0002 80EAE074 		eor	r4, r0, r0, asr #31
 921 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 922 000a 8442     		cmp	r4, r0
 923 000c 05D1     		bne	.L42
 626:Src/main.c    ****     {
 627:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_SET);
 924              		.loc 1 627 0
 925 000e 0C48     		ldr	r0, .L47
 926              	.LVL34:
 927 0010 2021     		movs	r1, #32
 928 0012 0122     		movs	r2, #1
 929 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 930              	.LVL35:
 931 0018 04E0     		b	.L43
 932              	.LVL36:
 933              	.L42:
 628:Src/main.c    ****     }
 629:Src/main.c    ****     else
 630:Src/main.c    ****     {
 631:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 934              		.loc 1 631 0
 935 001a 0948     		ldr	r0, .L47
 936              	.LVL37:
 937 001c 2021     		movs	r1, #32
 938 001e 0022     		movs	r2, #0
 939 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 940              	.LVL38:
 941              	.L43:
 632:Src/main.c    ****     }
 633:Src/main.c    ****     if (abs(PWM) > 10000)
 942              		.loc 1 633 0
 943 0024 42F21073 		movw	r3, #10000
 944 0028 9C42     		cmp	r4, r3
 945 002a 05DD     		ble	.L44
 634:Src/main.c    ****     {
 635:Src/main.c    **** 		htim3.Instance->CCR1 = 10000;
 946              		.loc 1 635 0
 947 002c 054B     		ldr	r3, .L47+4
 948 002e 1B68     		ldr	r3, [r3]
 949 0030 42F21072 		movw	r2, #10000
 950 0034 5A63     		str	r2, [r3, #52]
 951 0036 10BD     		pop	{r4, pc}
 952              	.L44:
 636:Src/main.c    ****     }
 637:Src/main.c    ****     else 
 638:Src/main.c    ****     {
 639:Src/main.c    **** 		htim3.Instance->CCR1 = abs(PWM);
 953              		.loc 1 639 0
ARM GAS  /tmp/ccdSbIYL.s 			page 31


 954 0038 024B     		ldr	r3, .L47+4
 955 003a 1B68     		ldr	r3, [r3]
 956 003c 5C63     		str	r4, [r3, #52]
 957 003e 10BD     		pop	{r4, pc}
 958              	.L48:
 959              		.align	2
 960              	.L47:
 961 0040 00040240 		.word	1073873920
 962 0044 00000000 		.word	htim3
 963              		.cfi_endproc
 964              	.LFE133:
 966              		.global	__aeabi_i2d
 967              		.global	__aeabi_dmul
 968              		.global	__aeabi_d2iz
 969              		.section	.text.main,"ax",%progbits
 970              		.align	2
 971              		.global	main
 972              		.thumb
 973              		.thumb_func
 975              	main:
 976              	.LFB123:
 120:Src/main.c    ****   /* USER CODE BEGIN 1 */
 977              		.loc 1 120 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 981 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 982              	.LCFI24:
 983              		.cfi_def_cfa_offset 36
 984              		.cfi_offset 4, -36
 985              		.cfi_offset 5, -32
 986              		.cfi_offset 6, -28
 987              		.cfi_offset 7, -24
 988              		.cfi_offset 8, -20
 989              		.cfi_offset 9, -16
 990              		.cfi_offset 10, -12
 991              		.cfi_offset 11, -8
 992              		.cfi_offset 14, -4
 993 0004 91B0     		sub	sp, sp, #68
 994              	.LCFI25:
 995              		.cfi_def_cfa_offset 104
 128:Src/main.c    **** 
 996              		.loc 1 128 0
 997 0006 FFF7FEFF 		bl	HAL_Init
 998              	.LVL39:
 135:Src/main.c    **** 
 999              		.loc 1 135 0
 1000 000a FFF7FEFF 		bl	SystemClock_Config
 1001              	.LVL40:
 142:Src/main.c    ****   MX_USART2_UART_Init();
 1002              		.loc 1 142 0
 1003 000e FFF7FEFF 		bl	MX_GPIO_Init
 1004              	.LVL41:
 143:Src/main.c    ****   MX_TIM2_Init();
 1005              		.loc 1 143 0
 1006 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 1007              	.LVL42:
ARM GAS  /tmp/ccdSbIYL.s 			page 32


 144:Src/main.c    ****   MX_TIM3_Init();
 1008              		.loc 1 144 0
 1009 0016 FFF7FEFF 		bl	MX_TIM2_Init
 1010              	.LVL43:
 145:Src/main.c    ****   MX_TIM4_Init();
 1011              		.loc 1 145 0
 1012 001a FFF7FEFF 		bl	MX_TIM3_Init
 1013              	.LVL44:
 146:Src/main.c    ****   MX_TIM5_Init();
 1014              		.loc 1 146 0
 1015 001e FFF7FEFF 		bl	MX_TIM4_Init
 1016              	.LVL45:
 147:Src/main.c    ****   MX_TIM1_Init();
 1017              		.loc 1 147 0
 1018 0022 FFF7FEFF 		bl	MX_TIM5_Init
 1019              	.LVL46:
 148:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1020              		.loc 1 148 0
 1021 0026 FFF7FEFF 		bl	MX_TIM1_Init
 1022              	.LVL47:
 150:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 1023              		.loc 1 150 0
 1024 002a 6B48     		ldr	r0, .L54+8
 1025 002c 0421     		movs	r1, #4
 1026 002e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1027              	.LVL48:
 151:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 1028              		.loc 1 151 0
 1029 0032 6A48     		ldr	r0, .L54+12
 1030 0034 0021     		movs	r1, #0
 1031 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1032              	.LVL49:
 152:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1033              		.loc 1 152 0
 1034 003a 6948     		ldr	r0, .L54+16
 1035 003c 1821     		movs	r1, #24
 1036 003e FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1037              	.LVL50:
 153:Src/main.c    ****   HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_4);
 1038              		.loc 1 153 0
 1039 0042 6848     		ldr	r0, .L54+20
 1040 0044 1821     		movs	r1, #24
 1041 0046 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1042              	.LVL51:
 154:Src/main.c    ****   /* USER CODE END 2 */
 1043              		.loc 1 154 0
 1044 004a 674C     		ldr	r4, .L54+24
 1045 004c 2046     		mov	r0, r4
 1046 004e 0C21     		movs	r1, #12
 1047 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1048              	.LVL52:
 160:Src/main.c    ****   HAL_Delay(1000);
 1049              		.loc 1 160 0
 1050 0054 6548     		ldr	r0, .L54+28
 1051 0056 6649     		ldr	r1, .L54+32
 1052 0058 1922     		movs	r2, #25
 1053 005a 4FF0FF33 		mov	r3, #-1
ARM GAS  /tmp/ccdSbIYL.s 			page 33


 1054 005e FFF7FEFF 		bl	HAL_UART_Transmit
 1055              	.LVL53:
 161:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick(); //init the time tracking variable for the fixed frequency PID 
 1056              		.loc 1 161 0
 1057 0062 4FF47A70 		mov	r0, #1000
 1058 0066 FFF7FEFF 		bl	HAL_Delay
 1059              	.LVL54:
 162:Src/main.c    **** 
 1060              		.loc 1 162 0
 1061 006a FFF7FEFF 		bl	HAL_GetTick
 1062              	.LVL55:
 1063 006e 8046     		mov	r8, r0
 1064              	.LVL56:
 167:Src/main.c    ****   TIM5->CNT = 30000;
 1065              		.loc 1 167 0
 1066 0070 47F23053 		movw	r3, #30000
 1067 0074 5F4A     		ldr	r2, .L54+36
 1068 0076 5362     		str	r3, [r2, #36]
 168:Src/main.c    ****   
 1069              		.loc 1 168 0
 1070 0078 02F58062 		add	r2, r2, #1024
 1071 007c 5362     		str	r3, [r2, #36]
 170:Src/main.c    **** 
 1072              		.loc 1 170 0
 1073 007e 2368     		ldr	r3, [r4]
 1074 0080 40F2DC52 		movw	r2, #1500
 1075 0084 1A64     		str	r2, [r3, #64]
 1076 0086 04E0     		b	.L50
 1077              	.LVL57:
 1078              	.L51:
 1079              	.LBB8:
 176:Src/main.c    ****     HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 1080              		.loc 1 176 0
 1081 0088 5B48     		ldr	r0, .L54+40
 1082 008a 1021     		movs	r1, #16
 1083 008c 0122     		movs	r2, #1
 1084 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1085              	.LVL58:
 1086              	.L50:
 175:Src/main.c    ****     {HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_SET);}
 1087              		.loc 1 175 0
 1088 0092 FFF7FEFF 		bl	HAL_GetTick
 1089              	.LVL59:
 1090 0096 C8EB0000 		rsb	r0, r8, r0
 1091 009a 584B     		ldr	r3, .L54+44
 1092 009c 1B68     		ldr	r3, [r3]
 1093 009e 9842     		cmp	r0, r3
 1094 00a0 F2D3     		bcc	.L51
 177:Src/main.c    ****     
 1095              		.loc 1 177 0
 1096 00a2 5548     		ldr	r0, .L54+40
 1097 00a4 1021     		movs	r1, #16
 1098 00a6 0022     		movs	r2, #0
 1099 00a8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1100              	.LVL60:
 179:Src/main.c    ****     int tim4 = (TIM4->CNT-30000);
 1101              		.loc 1 179 0
ARM GAS  /tmp/ccdSbIYL.s 			page 34


 1102 00ac FFF7FEFF 		bl	HAL_GetTick
 1103              	.LVL61:
 1104 00b0 8046     		mov	r8, r0
 1105              	.LVL62:
 180:Src/main.c    ****     int tim5 = (-TIM5->CNT+30000);
 1106              		.loc 1 180 0
 1107 00b2 5049     		ldr	r1, .L54+36
 1108 00b4 4E6A     		ldr	r6, [r1, #36]
 1109 00b6 A6F5EA46 		sub	r6, r6, #29952
 1110 00ba 303E     		subs	r6, r6, #48
 1111              	.LVL63:
 181:Src/main.c    ****     TIM4->CNT = 30000;
 1112              		.loc 1 181 0
 1113 00bc 504A     		ldr	r2, .L54+48
 1114 00be 506A     		ldr	r0, [r2, #36]
 1115              	.LVL64:
 1116 00c0 47F23053 		movw	r3, #30000
 1117              	.LVL65:
 182:Src/main.c    ****     TIM5->CNT = 30000;
 1118              		.loc 1 182 0
 1119 00c4 4B62     		str	r3, [r1, #36]
 183:Src/main.c    ****     
 1120              		.loc 1 183 0
 1121 00c6 5362     		str	r3, [r2, #36]
 185:Src/main.c    ****     
 1122              		.loc 1 185 0
 1123 00c8 181A     		subs	r0, r3, r0
 1124              	.LVL66:
 1125 00ca FFF7FEFF 		bl	__aeabi_i2d
 1126              	.LVL67:
 1127 00ce 40A3     		adr	r3, .L54
 1128 00d0 D3E90023 		ldrd	r2, [r3]
 1129 00d4 FFF7FEFF 		bl	__aeabi_dmul
 1130              	.LVL68:
 1131 00d8 FFF7FEFF 		bl	__aeabi_d2iz
 1132              	.LVL69:
 1133 00dc 0746     		mov	r7, r0
 1134              	.LVL70:
 187:Src/main.c    ****     tim4Tot += tim4;//for debug
 1135              		.loc 1 187 0
 1136 00de DFF850B1 		ldr	fp, .L54+96
 1137 00e2 484D     		ldr	r5, .L54+52
 1138 00e4 484C     		ldr	r4, .L54+56
 1139 00e6 0094     		str	r4, [sp]
 1140 00e8 3046     		mov	r0, r6
 1141              	.LVL71:
 1142 00ea 3946     		mov	r1, r7
 1143 00ec 5A46     		mov	r2, fp
 1144 00ee 2B46     		mov	r3, r5
 1145 00f0 FFF7FEFF 		bl	updatePos
 1146              	.LVL72:
 188:Src/main.c    ****     tim5Tot += tim5;
 1147              		.loc 1 188 0
 1148 00f4 454A     		ldr	r2, .L54+60
 1149 00f6 1368     		ldr	r3, [r2]
 1150 00f8 3344     		add	r3, r3, r6
 1151 00fa 1360     		str	r3, [r2]
ARM GAS  /tmp/ccdSbIYL.s 			page 35


 189:Src/main.c    ****     
 1152              		.loc 1 189 0
 1153 00fc 444A     		ldr	r2, .L54+64
 1154 00fe 1368     		ldr	r3, [r2]
 1155 0100 3B44     		add	r3, r3, r7
 1156 0102 1360     		str	r3, [r2]
 191:Src/main.c    ****     
 1157              		.loc 1 191 0
 1158 0104 DFF82C91 		ldr	r9, .L54+100
 1159 0108 DFF82CA1 		ldr	r10, .L54+104
 1160 010c 9BED000B 		fldd	d0, [fp]
 1161 0110 95ED001B 		fldd	d1, [r5]
 1162 0114 94ED002B 		fldd	d2, [r4]
 1163 0118 6C46     		mov	r4, sp
 1164 011a 344D     		ldr	r5, .L54+28
 1165 011c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1166 011e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1167 0120 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1168 0122 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1169 0124 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1170 0126 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1171 0128 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1172 012c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1173 0130 4846     		mov	r0, r9
 1174 0132 5146     		mov	r1, r10
 1175 0134 3246     		mov	r2, r6
 1176 0136 3B46     		mov	r3, r7
 1177 0138 FFF7FEFF 		bl	stateMachine
 1178              	.LVL73:
 193:Src/main.c    ****     moteurDroit(consigneDroit);
 1179              		.loc 1 193 0
 1180 013c DAF80000 		ldr	r0, [r10]
 1181 0140 FFF7FEFF 		bl	moteurGauche
 1182              	.LVL74:
 194:Src/main.c    ****     
 1183              		.loc 1 194 0
 1184 0144 D9F80000 		ldr	r0, [r9]
 1185 0148 FFF7FEFF 		bl	moteurDroit
 1186              	.LVL75:
 197:Src/main.c    ****     if (_DEBUG == 1)
 1187              		.loc 1 197 0
 1188 014c 314A     		ldr	r2, .L54+68
 1189 014e 1368     		ldr	r3, [r2]
 1190 0150 0133     		adds	r3, r3, #1
 1191 0152 1360     		str	r3, [r2]
 200:Src/main.c    ****         {
 1192              		.loc 1 200 0
 1193 0154 304A     		ldr	r2, .L54+72
 1194 0156 1268     		ldr	r2, [r2]
 1195 0158 9342     		cmp	r3, r2
 1196 015a 9AD1     		bne	.L50
 202:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 1197              		.loc 1 202 0
 1198 015c 2F4C     		ldr	r4, .L54+76
 1199 015e DBE90067 		ldrd	r6, [fp]
 1200              	.LVL76:
 1201 0162 284B     		ldr	r3, .L54+52
ARM GAS  /tmp/ccdSbIYL.s 			page 36


 1202 0164 D3E90023 		ldrd	r2, [r3]
 1203 0168 CDE90023 		strd	r2, [sp]
 1204 016c 264B     		ldr	r3, .L54+56
 1205 016e D3E90001 		ldrd	r0, [r3]
 1206 0172 0022     		movs	r2, #0
 1207 0174 2A4B     		ldr	r3, .L54+80
 1208 0176 FFF7FEFF 		bl	__aeabi_dmul
 1209              	.LVL77:
 1210 017a CDE90201 		strd	r0, [sp, #8]
 1211 017e 2046     		mov	r0, r4
 1212 0180 2849     		ldr	r1, .L54+84
 1213 0182 3246     		mov	r2, r6
 1214 0184 3B46     		mov	r3, r7
 1215 0186 FFF7FEFF 		bl	sprintf
 1216              	.LVL78:
 203:Src/main.c    ****             sprintf(buffer2, "tot : %d / %d / %d / %d\n",tim4Tot, tim5Tot, consigneDroit, consigneG
 1217              		.loc 1 203 0
 1218 018a 303D     		subs	r5, r5, #48
 1219 018c 2846     		mov	r0, r5
 1220 018e 2146     		mov	r1, r4
 1221 0190 3222     		movs	r2, #50
 1222 0192 4FF0FF33 		mov	r3, #-1
 1223 0196 FFF7FEFF 		bl	HAL_UART_Transmit
 1224              	.LVL79:
 204:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 1225              		.loc 1 204 0
 1226 019a 234C     		ldr	r4, .L54+88
 1227 019c 1B4B     		ldr	r3, .L54+60
 1228 019e 1A68     		ldr	r2, [r3]
 1229 01a0 1B4B     		ldr	r3, .L54+64
 1230 01a2 1B68     		ldr	r3, [r3]
 1231 01a4 D9F80010 		ldr	r1, [r9]
 1232 01a8 0091     		str	r1, [sp]
 1233 01aa DAF80010 		ldr	r1, [r10]
 1234 01ae 0191     		str	r1, [sp, #4]
 1235 01b0 2046     		mov	r0, r4
 1236 01b2 1E49     		ldr	r1, .L54+92
 1237 01b4 FFF7FEFF 		bl	sprintf
 1238              	.LVL80:
 205:Src/main.c    ****             debugCounter = 0;
 1239              		.loc 1 205 0
 1240 01b8 2846     		mov	r0, r5
 1241 01ba 2146     		mov	r1, r4
 1242 01bc 3222     		movs	r2, #50
 1243 01be 4FF0FF33 		mov	r3, #-1
 1244 01c2 FFF7FEFF 		bl	HAL_UART_Transmit
 1245              	.LVL81:
 206:Src/main.c    ****         }
 1246              		.loc 1 206 0
 1247 01c6 0022     		movs	r2, #0
 1248 01c8 124B     		ldr	r3, .L54+68
 1249 01ca 1A60     		str	r2, [r3]
 1250 01cc 61E7     		b	.L50
 1251              	.L55:
 1252 01ce 00BF     		.align	3
 1253              	.L54:
 1254 01d0 5B423EE8 		.word	3896394331
ARM GAS  /tmp/ccdSbIYL.s 			page 37


 1255 01d4 D9ACF03F 		.word	1072737497
 1256 01d8 00000000 		.word	htim2
 1257 01dc 00000000 		.word	htim3
 1258 01e0 00000000 		.word	htim4
 1259 01e4 00000000 		.word	htim5
 1260 01e8 00000000 		.word	htim1
 1261 01ec 00000000 		.word	huart2
 1262 01f0 00000000 		.word	.LC0
 1263 01f4 00080040 		.word	1073743872
 1264 01f8 00080240 		.word	1073874944
 1265 01fc 00000000 		.word	.LANCHOR0
 1266 0200 000C0040 		.word	1073744896
 1267 0204 00000000 		.word	.LANCHOR2
 1268 0208 00000000 		.word	.LANCHOR3
 1269 020c 00000000 		.word	.LANCHOR4
 1270 0210 00000000 		.word	.LANCHOR5
 1271 0214 00000000 		.word	.LANCHOR8
 1272 0218 00000000 		.word	.LANCHOR9
 1273 021c 00000000 		.word	.LANCHOR10
 1274 0220 00408F40 		.word	1083129856
 1275 0224 1C000000 		.word	.LC1
 1276 0228 00000000 		.word	.LANCHOR11
 1277 022c 30000000 		.word	.LC2
 1278 0230 00000000 		.word	.LANCHOR1
 1279 0234 00000000 		.word	.LANCHOR6
 1280 0238 00000000 		.word	.LANCHOR7
 1281              	.LBE8:
 1282              		.cfi_endproc
 1283              	.LFE123:
 1285              		.section	.text.Error_Handler,"ax",%progbits
 1286              		.align	2
 1287              		.global	Error_Handler
 1288              		.thumb
 1289              		.thumb_func
 1291              	Error_Handler:
 1292              	.LFB134:
 640:Src/main.c    **** 	}
 641:Src/main.c    **** }
 642:Src/main.c    **** 
 643:Src/main.c    **** 
 644:Src/main.c    **** /* USER CODE END 4 */
 645:Src/main.c    **** 
 646:Src/main.c    **** /**
 647:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 648:Src/main.c    ****   * @retval None
 649:Src/main.c    ****   */
 650:Src/main.c    **** void Error_Handler(void)
 651:Src/main.c    **** {
 1293              		.loc 1 651 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298 0000 7047     		bx	lr
 1299              		.cfi_endproc
 1300              	.LFE134:
 1302              		.global	debugMessageFrequency
ARM GAS  /tmp/ccdSbIYL.s 			page 38


 1303              		.global	fixedFrequency
 1304              		.global	buffer2
 1305              		.global	buffer
 1306              		.global	tim5Tot
 1307              		.global	tim4Tot
 1308              		.global	debugCounter
 1309              		.global	consigneGauche
 1310              		.global	consigneDroit
 1311              		.global	angle
 1312              		.global	positionY
 1313              		.global	positionX
 1314              		.comm	huart2,64,4
 1315              		.comm	htim5,60,4
 1316              		.comm	htim4,60,4
 1317              		.comm	htim3,60,4
 1318              		.comm	htim2,60,4
 1319              		.comm	htim1,60,4
 1320 0002 00BF     		.section	.bss.consigneDroit,"aw",%nobits
 1321              		.align	2
 1322              		.set	.LANCHOR6,. + 0
 1325              	consigneDroit:
 1326 0000 00000000 		.space	4
 1327              		.section	.bss.positionX,"aw",%nobits
 1328              		.align	3
 1329              		.set	.LANCHOR1,. + 0
 1332              	positionX:
 1333 0000 00000000 		.space	8
 1333      00000000 
 1334              		.section	.bss.positionY,"aw",%nobits
 1335              		.align	3
 1336              		.set	.LANCHOR2,. + 0
 1339              	positionY:
 1340 0000 00000000 		.space	8
 1340      00000000 
 1341              		.section	.data.debugMessageFrequency,"aw",%progbits
 1342              		.align	2
 1343              		.set	.LANCHOR9,. + 0
 1346              	debugMessageFrequency:
 1347 0000 0A000000 		.word	10
 1348              		.section	.bss.tim4Tot,"aw",%nobits
 1349              		.align	2
 1350              		.set	.LANCHOR4,. + 0
 1353              	tim4Tot:
 1354 0000 00000000 		.space	4
 1355              		.section	.bss.tim5Tot,"aw",%nobits
 1356              		.align	2
 1357              		.set	.LANCHOR5,. + 0
 1360              	tim5Tot:
 1361 0000 00000000 		.space	4
 1362              		.section	.data.fixedFrequency,"aw",%progbits
 1363              		.align	2
 1364              		.set	.LANCHOR0,. + 0
 1367              	fixedFrequency:
 1368 0000 28000000 		.word	40
 1369              		.section	.rodata.str1.4,"aMS",%progbits,1
 1370              		.align	2
 1371              	.LC0:
ARM GAS  /tmp/ccdSbIYL.s 			page 39


 1372 0000 41747474 		.ascii	"Atttenzion, zest barti !\000"
 1372      656E7A69 
 1372      6F6E2C20 
 1372      7A657374 
 1372      20626172 
 1373 0019 000000   		.space	3
 1374              	.LC1:
 1375 001c 706F7320 		.ascii	"pos : %f / %f / %f\012\000"
 1375      3A202566 
 1375      202F2025 
 1375      66202F20 
 1375      25660A00 
 1376              	.LC2:
 1377 0030 746F7420 		.ascii	"tot : %d / %d / %d / %d\012\000"
 1377      3A202564 
 1377      202F2025 
 1377      64202F20 
 1377      2564202F 
 1378              		.section	.bss.buffer2,"aw",%nobits
 1379              		.align	2
 1380              		.set	.LANCHOR11,. + 0
 1383              	buffer2:
 1384 0000 00000000 		.space	50
 1384      00000000 
 1384      00000000 
 1384      00000000 
 1384      00000000 
 1385              		.section	.bss.debugCounter,"aw",%nobits
 1386              		.align	2
 1387              		.set	.LANCHOR8,. + 0
 1390              	debugCounter:
 1391 0000 00000000 		.space	4
 1392              		.section	.bss.buffer,"aw",%nobits
 1393              		.align	2
 1394              		.set	.LANCHOR10,. + 0
 1397              	buffer:
 1398 0000 00000000 		.space	50
 1398      00000000 
 1398      00000000 
 1398      00000000 
 1398      00000000 
 1399              		.section	.bss.angle,"aw",%nobits
 1400              		.align	3
 1401              		.set	.LANCHOR3,. + 0
 1404              	angle:
 1405 0000 00000000 		.space	8
 1405      00000000 
 1406              		.section	.bss.consigneGauche,"aw",%nobits
 1407              		.align	2
 1408              		.set	.LANCHOR7,. + 0
 1411              	consigneGauche:
 1412 0000 00000000 		.space	4
 1413              		.text
 1414              	.Letext0:
 1415              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1416              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1417              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
ARM GAS  /tmp/ccdSbIYL.s 			page 40


 1418              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1419              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1420              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1421              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1422              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1423              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1424              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1425              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1426              		.file 13 "<built-in>"
 1427              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 1428              		.file 15 "Inc/main.h"
 1429              		.file 16 "Inc/assert.h"
 1430              		.file 17 "/usr/include/newlib/stdio.h"
 1431              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccdSbIYL.s 			page 41


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccdSbIYL.s:21     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccdSbIYL.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccdSbIYL.s:182    .text.MX_GPIO_Init:00000000000000e0 $d
     /tmp/ccdSbIYL.s:191    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccdSbIYL.s:195    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccdSbIYL.s:234    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccdSbIYL.s:240    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccdSbIYL.s:244    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccdSbIYL.s:325    .text.MX_TIM2_Init:000000000000005c $d
                            *COM*:000000000000003c htim2
     /tmp/ccdSbIYL.s:330    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccdSbIYL.s:334    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccdSbIYL.s:415    .text.MX_TIM3_Init:000000000000005c $d
                            *COM*:000000000000003c htim3
     /tmp/ccdSbIYL.s:421    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccdSbIYL.s:425    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccdSbIYL.s:497    .text.MX_TIM4_Init:000000000000004c $d
                            *COM*:000000000000003c htim4
     /tmp/ccdSbIYL.s:503    .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccdSbIYL.s:507    .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccdSbIYL.s:579    .text.MX_TIM5_Init:000000000000004c $d
                            *COM*:000000000000003c htim5
     /tmp/ccdSbIYL.s:585    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccdSbIYL.s:589    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccdSbIYL.s:706    .text.MX_TIM1_Init:0000000000000090 $d
                            *COM*:000000000000003c htim1
     /tmp/ccdSbIYL.s:712    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccdSbIYL.s:717    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccdSbIYL.s:831    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccdSbIYL.s:837    .text.moteurDroit:0000000000000000 $t
     /tmp/ccdSbIYL.s:842    .text.moteurDroit:0000000000000000 moteurDroit
     /tmp/ccdSbIYL.s:896    .text.moteurDroit:0000000000000044 $d
     /tmp/ccdSbIYL.s:902    .text.moteurGauche:0000000000000000 $t
     /tmp/ccdSbIYL.s:907    .text.moteurGauche:0000000000000000 moteurGauche
     /tmp/ccdSbIYL.s:961    .text.moteurGauche:0000000000000040 $d
     /tmp/ccdSbIYL.s:970    .text.main:0000000000000000 $t
     /tmp/ccdSbIYL.s:975    .text.main:0000000000000000 main
     /tmp/ccdSbIYL.s:1254   .text.main:00000000000001d0 $d
     /tmp/ccdSbIYL.s:1286   .text.Error_Handler:0000000000000000 $t
     /tmp/ccdSbIYL.s:1291   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccdSbIYL.s:1346   .data.debugMessageFrequency:0000000000000000 debugMessageFrequency
     /tmp/ccdSbIYL.s:1367   .data.fixedFrequency:0000000000000000 fixedFrequency
     /tmp/ccdSbIYL.s:1383   .bss.buffer2:0000000000000000 buffer2
     /tmp/ccdSbIYL.s:1397   .bss.buffer:0000000000000000 buffer
     /tmp/ccdSbIYL.s:1360   .bss.tim5Tot:0000000000000000 tim5Tot
     /tmp/ccdSbIYL.s:1353   .bss.tim4Tot:0000000000000000 tim4Tot
     /tmp/ccdSbIYL.s:1390   .bss.debugCounter:0000000000000000 debugCounter
     /tmp/ccdSbIYL.s:1411   .bss.consigneGauche:0000000000000000 consigneGauche
     /tmp/ccdSbIYL.s:1325   .bss.consigneDroit:0000000000000000 consigneDroit
     /tmp/ccdSbIYL.s:1404   .bss.angle:0000000000000000 angle
     /tmp/ccdSbIYL.s:1339   .bss.positionY:0000000000000000 positionY
     /tmp/ccdSbIYL.s:1332   .bss.positionX:0000000000000000 positionX
     /tmp/ccdSbIYL.s:1321   .bss.consigneDroit:0000000000000000 $d
     /tmp/ccdSbIYL.s:1328   .bss.positionX:0000000000000000 $d
ARM GAS  /tmp/ccdSbIYL.s 			page 42


     /tmp/ccdSbIYL.s:1335   .bss.positionY:0000000000000000 $d
     /tmp/ccdSbIYL.s:1342   .data.debugMessageFrequency:0000000000000000 $d
     /tmp/ccdSbIYL.s:1349   .bss.tim4Tot:0000000000000000 $d
     /tmp/ccdSbIYL.s:1356   .bss.tim5Tot:0000000000000000 $d
     /tmp/ccdSbIYL.s:1363   .data.fixedFrequency:0000000000000000 $d
     /tmp/ccdSbIYL.s:1370   .rodata.str1.4:0000000000000000 $d
     /tmp/ccdSbIYL.s:1379   .bss.buffer2:0000000000000000 $d
     /tmp/ccdSbIYL.s:1386   .bss.debugCounter:0000000000000000 $d
     /tmp/ccdSbIYL.s:1393   .bss.buffer:0000000000000000 $d
     /tmp/ccdSbIYL.s:1400   .bss.angle:0000000000000000 $d
     /tmp/ccdSbIYL.s:1407   .bss.consigneGauche:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_TIM_Encoder_Init
HAL_TIMEx_ConfigBreakDeadTime
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_i2d
__aeabi_dmul
__aeabi_d2iz
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_Encoder_Start
HAL_UART_Transmit
HAL_Delay
HAL_GetTick
updatePos
stateMachine
sprintf
