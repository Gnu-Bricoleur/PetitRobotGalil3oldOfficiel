ARM GAS  /tmp/cczYmwTC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB131:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/cczYmwTC.s 			page 2


  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** #include "assert.h"
  47:Src/main.c    **** /* USER CODE END Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PTD */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PTD */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PD */
  56:Src/main.c    **** 
  57:Src/main.c    **** #define _DEBUG 1       //print all the debug info
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PD */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  62:Src/main.c    **** /* USER CODE BEGIN PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PM */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  67:Src/main.c    **** TIM_HandleTypeDef htim1;
  68:Src/main.c    **** TIM_HandleTypeDef htim2;
  69:Src/main.c    **** TIM_HandleTypeDef htim3;
  70:Src/main.c    **** TIM_HandleTypeDef htim4;
  71:Src/main.c    **** TIM_HandleTypeDef htim5;
  72:Src/main.c    **** 
  73:Src/main.c    **** UART_HandleTypeDef huart2;
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PV */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE END PV */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  80:Src/main.c    **** void SystemClock_Config(void);
  81:Src/main.c    **** static void MX_GPIO_Init(void);
  82:Src/main.c    **** static void MX_USART2_UART_Init(void);
  83:Src/main.c    **** static void MX_TIM2_Init(void);
  84:Src/main.c    **** static void MX_TIM3_Init(void);
  85:Src/main.c    **** static void MX_TIM4_Init(void);
  86:Src/main.c    **** static void MX_TIM5_Init(void);
  87:Src/main.c    **** static void MX_TIM1_Init(void);
  88:Src/main.c    **** /* USER CODE BEGIN PFP */
ARM GAS  /tmp/cczYmwTC.s 			page 3


  89:Src/main.c    **** 
  90:Src/main.c    **** /* USER CODE END PFP */
  91:Src/main.c    **** 
  92:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  93:Src/main.c    **** /* USER CODE BEGIN 0 */
  94:Src/main.c    **** double positionX = 0.0;
  95:Src/main.c    **** double positionY = 0.0;
  96:Src/main.c    **** double angle = 0.0;
  97:Src/main.c    **** 
  98:Src/main.c    **** int consigneDroit = 0;
  99:Src/main.c    **** int consigneGauche = 0;
 100:Src/main.c    **** 
 101:Src/main.c    **** int debugCounter = 0;
 102:Src/main.c    **** 
 103:Src/main.c    **** int tim4Tot= 0;
 104:Src/main.c    **** int tim5Tot=0;
 105:Src/main.c    **** 
 106:Src/main.c    **** char buffer[50] = "";
 107:Src/main.c    **** char buffer2[50] = "";
 108:Src/main.c    **** 
 109:Src/main.c    **** int fixedFrequency = 40;//frequency of the loop in ms
 110:Src/main.c    **** int debugMessageFrequency = 10;//in number of loop
 111:Src/main.c    **** 
 112:Src/main.c    **** /* USER CODE END 0 */
 113:Src/main.c    **** 
 114:Src/main.c    **** /**
 115:Src/main.c    ****   * @brief  The application entry point.
 116:Src/main.c    ****   * @retval int
 117:Src/main.c    ****   */
 118:Src/main.c    **** int main(void)
 119:Src/main.c    **** {
 120:Src/main.c    ****   /* USER CODE BEGIN 1 */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END 1 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 127:Src/main.c    ****   HAL_Init();
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE BEGIN Init */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE END Init */
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* Configure the system clock */
 134:Src/main.c    ****   SystemClock_Config();
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE END SysInit */
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* Initialize all configured peripherals */
 141:Src/main.c    ****   MX_GPIO_Init();
 142:Src/main.c    ****   MX_USART2_UART_Init();
 143:Src/main.c    ****   MX_TIM2_Init();
 144:Src/main.c    ****   MX_TIM3_Init();
 145:Src/main.c    ****   MX_TIM4_Init();
ARM GAS  /tmp/cczYmwTC.s 			page 4


 146:Src/main.c    ****   MX_TIM5_Init();
 147:Src/main.c    ****   MX_TIM1_Init();
 148:Src/main.c    ****   /* USER CODE BEGIN 2 */
 149:Src/main.c    ****   HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_2);
 150:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 151:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 152:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 153:Src/main.c    ****   HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_4);
 154:Src/main.c    ****   /* USER CODE END 2 */
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* Infinite loop */
 157:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 158:Src/main.c    ****   HAL_UART_Transmit(&huart2, "Tire moi la tirette, que ma bobinette choisse\n", sizeof("Tire moi la
 159:Src/main.c    ****   while(HAL_GPIO_ReadPin(Tirette_GPIO_Port, Tirette_Pin))
 160:Src/main.c    ****   {}
 161:Src/main.c    ****   uint32_t matchStartTicks = HAL_GetTick();
 162:Src/main.c    ****     
 163:Src/main.c    ****   HAL_UART_Transmit(&huart2, "Atttenzion, zest barti !\n", sizeof("Atttenzion, zest barti !\n"), HA
 164:Src/main.c    ****   HAL_Delay(1000);
 165:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick(); //init the time tracking variable for the fixed frequency PID 
 166:Src/main.c    **** 
 167:Src/main.c    **** 
 168:Src/main.c    **** 
 169:Src/main.c    ****   //center the encoder values
 170:Src/main.c    ****   TIM4->CNT = 30000;
 171:Src/main.c    ****   TIM5->CNT = 30000;
 172:Src/main.c    ****   
 173:Src/main.c    ****   htim1.Instance->CCR4 = 1500;//servo
 174:Src/main.c    **** 
 175:Src/main.c    **** 
 176:Src/main.c    ****   while (1)
 177:Src/main.c    ****   {
 178:Src/main.c    ****     while(HAL_GetTick() - oldTicks < fixedFrequency)
 179:Src/main.c    ****     {HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_SET);}
 180:Src/main.c    ****     HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 181:Src/main.c    ****     oldTicks = HAL_GetTick();
 182:Src/main.c    ****     
 183:Src/main.c    ****     if (HAL_GetTick() - matchStartTicks > 90000) //make sure the robot stops after 100seconds (actu
 184:Src/main.c    ****     {
 185:Src/main.c    ****         HAL_UART_Transmit(&huart2, "Fin de match -- Timeout \n", sizeof("Fin de match -- Timeout \n
 186:Src/main.c    ****         moteurGauche(0);
 187:Src/main.c    **** 		moteurDroit(0);
 188:Src/main.c    ****         while(1){}
 189:Src/main.c    ****     }
 190:Src/main.c    ****     
 191:Src/main.c    ****     if (HAL_GPIO_ReadPin(ObstacleDetection_GPIO_Port, ObstacleDetection_Pin))
 192:Src/main.c    ****     {
 193:Src/main.c    ****         HAL_UART_Transmit(&huart2, "Fin de match -- Obstacle \n", sizeof("Fin de match -- Obstacle 
 194:Src/main.c    ****         moteurGauche(0);
 195:Src/main.c    **** 		moteurDroit(0);
 196:Src/main.c    ****         while(1){}
 197:Src/main.c    ****     }
 198:Src/main.c    ****     
 199:Src/main.c    ****     
 200:Src/main.c    ****     int tim4 = (TIM4->CNT-30000);
 201:Src/main.c    ****     int tim5 = (-TIM5->CNT+30000);
 202:Src/main.c    ****     TIM4->CNT = 30000;
ARM GAS  /tmp/cczYmwTC.s 			page 5


 203:Src/main.c    ****     TIM5->CNT = 30000;
 204:Src/main.c    ****     
 205:Src/main.c    ****     tim5 *= 1.0422;
 206:Src/main.c    ****     
 207:Src/main.c    ****     updatePos(tim4, tim5, &positionX, &positionY, &angle);
 208:Src/main.c    ****     tim4Tot += tim4;//for debug
 209:Src/main.c    ****     tim5Tot += tim5;
 210:Src/main.c    ****     
 211:Src/main.c    ****     stateMachine(&consigneDroit, &consigneGauche, positionX, positionY, angle, tim4, tim5, huart2);
 212:Src/main.c    ****     
 213:Src/main.c    ****     moteurGauche(consigneGauche);
 214:Src/main.c    ****     moteurDroit(consigneDroit);
 215:Src/main.c    ****     
 216:Src/main.c    ****     
 217:Src/main.c    ****     debugCounter += 1;
 218:Src/main.c    ****     if (_DEBUG == 1)
 219:Src/main.c    ****     {
 220:Src/main.c    ****         if (debugCounter == debugMessageFrequency)
 221:Src/main.c    ****         {
 222:Src/main.c    ****             sprintf(buffer, "pos : %f / %f / %f\n",positionX, positionY, (angle*1000));
 223:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 224:Src/main.c    ****             sprintf(buffer2, "tot : %d / %d / %d / %d\n",tim4Tot, tim5Tot, consigneDroit, consigneG
 225:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 226:Src/main.c    ****             debugCounter = 0;
 227:Src/main.c    ****         }
 228:Src/main.c    ****     }
 229:Src/main.c    **** 
 230:Src/main.c    ****     /* USER CODE END WHILE */
 231:Src/main.c    **** 
 232:Src/main.c    ****     /* USER CODE BEGIN 3 */
 233:Src/main.c    ****   }
 234:Src/main.c    ****   /* USER CODE END 3 */
 235:Src/main.c    **** }
 236:Src/main.c    **** 
 237:Src/main.c    **** /**
 238:Src/main.c    ****   * @brief System Clock Configuration
 239:Src/main.c    ****   * @retval None
 240:Src/main.c    ****   */
 241:Src/main.c    **** void SystemClock_Config(void)
 242:Src/main.c    **** {
 243:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 244:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 245:Src/main.c    **** 
 246:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 247:Src/main.c    ****   */
 248:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 249:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 250:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 251:Src/main.c    ****   */
 252:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 253:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 254:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 255:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 256:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 257:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
ARM GAS  /tmp/cczYmwTC.s 			page 6


 260:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 261:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 262:Src/main.c    ****   {
 263:Src/main.c    ****     Error_Handler();
 264:Src/main.c    ****   }
 265:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 266:Src/main.c    ****   */
 267:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 268:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 269:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 270:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 271:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 272:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 273:Src/main.c    **** 
 274:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 275:Src/main.c    ****   {
 276:Src/main.c    ****     Error_Handler();
 277:Src/main.c    ****   }
 278:Src/main.c    **** }
 279:Src/main.c    **** 
 280:Src/main.c    **** /**
 281:Src/main.c    ****   * @brief TIM1 Initialization Function
 282:Src/main.c    ****   * @param None
 283:Src/main.c    ****   * @retval None
 284:Src/main.c    ****   */
 285:Src/main.c    **** static void MX_TIM1_Init(void)
 286:Src/main.c    **** {
 287:Src/main.c    **** 
 288:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 289:Src/main.c    **** 
 290:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 291:Src/main.c    **** 
 292:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 293:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 294:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 295:Src/main.c    **** 
 296:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 297:Src/main.c    **** 
 298:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 299:Src/main.c    ****   htim1.Instance = TIM1;
 300:Src/main.c    ****   htim1.Init.Prescaler = 72;
 301:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 302:Src/main.c    ****   htim1.Init.Period = 20000;
 303:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 304:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 305:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 306:Src/main.c    ****   {
 307:Src/main.c    ****     Error_Handler();
 308:Src/main.c    ****   }
 309:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 310:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 311:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 312:Src/main.c    ****   {
 313:Src/main.c    ****     Error_Handler();
 314:Src/main.c    ****   }
 315:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 316:Src/main.c    ****   sConfigOC.Pulse = 1500;
ARM GAS  /tmp/cczYmwTC.s 			page 7


 317:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 318:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 319:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 320:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 321:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 322:Src/main.c    ****   {
 323:Src/main.c    ****     Error_Handler();
 324:Src/main.c    ****   }
 325:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 326:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 327:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 328:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 329:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 330:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 331:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 332:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 333:Src/main.c    ****   {
 334:Src/main.c    ****     Error_Handler();
 335:Src/main.c    ****   }
 336:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 337:Src/main.c    **** 
 338:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 339:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 340:Src/main.c    **** 
 341:Src/main.c    **** }
 342:Src/main.c    **** 
 343:Src/main.c    **** /**
 344:Src/main.c    ****   * @brief TIM2 Initialization Function
 345:Src/main.c    ****   * @param None
 346:Src/main.c    ****   * @retval None
 347:Src/main.c    ****   */
 348:Src/main.c    **** static void MX_TIM2_Init(void)
 349:Src/main.c    **** {
 350:Src/main.c    **** 
 351:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 352:Src/main.c    **** 
 353:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 354:Src/main.c    **** 
 355:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 356:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 357:Src/main.c    **** 
 358:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 359:Src/main.c    **** 
 360:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 361:Src/main.c    ****   htim2.Instance = TIM2;
 362:Src/main.c    ****   htim2.Init.Prescaler = 0;
 363:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 364:Src/main.c    ****   htim2.Init.Period = 10000;
 365:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 366:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 367:Src/main.c    ****   {
 368:Src/main.c    ****     Error_Handler();
 369:Src/main.c    ****   }
 370:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 371:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 372:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 373:Src/main.c    ****   {
ARM GAS  /tmp/cczYmwTC.s 			page 8


 374:Src/main.c    ****     Error_Handler();
 375:Src/main.c    ****   }
 376:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 377:Src/main.c    ****   sConfigOC.Pulse = 0;
 378:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 379:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 380:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 381:Src/main.c    ****   {
 382:Src/main.c    ****     Error_Handler();
 383:Src/main.c    ****   }
 384:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 385:Src/main.c    **** 
 386:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 387:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 388:Src/main.c    **** 
 389:Src/main.c    **** }
 390:Src/main.c    **** 
 391:Src/main.c    **** /**
 392:Src/main.c    ****   * @brief TIM3 Initialization Function
 393:Src/main.c    ****   * @param None
 394:Src/main.c    ****   * @retval None
 395:Src/main.c    ****   */
 396:Src/main.c    **** static void MX_TIM3_Init(void)
 397:Src/main.c    **** {
 398:Src/main.c    **** 
 399:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 400:Src/main.c    **** 
 401:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 402:Src/main.c    **** 
 403:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 404:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 405:Src/main.c    **** 
 406:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 407:Src/main.c    **** 
 408:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 409:Src/main.c    ****   htim3.Instance = TIM3;
 410:Src/main.c    ****   htim3.Init.Prescaler = 0;
 411:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 412:Src/main.c    ****   htim3.Init.Period = 10000;
 413:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 414:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 415:Src/main.c    ****   {
 416:Src/main.c    ****     Error_Handler();
 417:Src/main.c    ****   }
 418:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 419:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 420:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 421:Src/main.c    ****   {
 422:Src/main.c    ****     Error_Handler();
 423:Src/main.c    ****   }
 424:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 425:Src/main.c    ****   sConfigOC.Pulse = 0;
 426:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 427:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 428:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 429:Src/main.c    ****   {
 430:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/cczYmwTC.s 			page 9


 431:Src/main.c    ****   }
 432:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 433:Src/main.c    **** 
 434:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 435:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 436:Src/main.c    **** 
 437:Src/main.c    **** }
 438:Src/main.c    **** 
 439:Src/main.c    **** /**
 440:Src/main.c    ****   * @brief TIM4 Initialization Function
 441:Src/main.c    ****   * @param None
 442:Src/main.c    ****   * @retval None
 443:Src/main.c    ****   */
 444:Src/main.c    **** static void MX_TIM4_Init(void)
 445:Src/main.c    **** {
 446:Src/main.c    **** 
 447:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 448:Src/main.c    **** 
 449:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 450:Src/main.c    **** 
 451:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 452:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 453:Src/main.c    **** 
 454:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 455:Src/main.c    **** 
 456:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 457:Src/main.c    ****   htim4.Instance = TIM4;
 458:Src/main.c    ****   htim4.Init.Prescaler = 0;
 459:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 460:Src/main.c    ****   htim4.Init.Period = 0xffff;
 461:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 462:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 463:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 464:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 465:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 466:Src/main.c    ****   sConfig.IC1Filter = 5;
 467:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 468:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 469:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 470:Src/main.c    ****   sConfig.IC2Filter = 5;
 471:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 472:Src/main.c    ****   {
 473:Src/main.c    ****     Error_Handler();
 474:Src/main.c    ****   }
 475:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 476:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 477:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 478:Src/main.c    ****   {
 479:Src/main.c    ****     Error_Handler();
 480:Src/main.c    ****   }
 481:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 482:Src/main.c    **** 
 483:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 484:Src/main.c    **** 
 485:Src/main.c    **** }
 486:Src/main.c    **** 
 487:Src/main.c    **** /**
ARM GAS  /tmp/cczYmwTC.s 			page 10


 488:Src/main.c    ****   * @brief TIM5 Initialization Function
 489:Src/main.c    ****   * @param None
 490:Src/main.c    ****   * @retval None
 491:Src/main.c    ****   */
 492:Src/main.c    **** static void MX_TIM5_Init(void)
 493:Src/main.c    **** {
 494:Src/main.c    **** 
 495:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 0 */
 496:Src/main.c    **** 
 497:Src/main.c    ****   /* USER CODE END TIM5_Init 0 */
 498:Src/main.c    **** 
 499:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 500:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 501:Src/main.c    **** 
 502:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 1 */
 503:Src/main.c    **** 
 504:Src/main.c    ****   /* USER CODE END TIM5_Init 1 */
 505:Src/main.c    ****   htim5.Instance = TIM5;
 506:Src/main.c    ****   htim5.Init.Prescaler = 0;
 507:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 508:Src/main.c    ****   htim5.Init.Period = 0xffff;
 509:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 510:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 511:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 512:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 513:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 514:Src/main.c    ****   sConfig.IC1Filter = 5;
 515:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 516:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 517:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 518:Src/main.c    ****   sConfig.IC2Filter = 5;
 519:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 520:Src/main.c    ****   {
 521:Src/main.c    ****     Error_Handler();
 522:Src/main.c    ****   }
 523:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 524:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 525:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 526:Src/main.c    ****   {
 527:Src/main.c    ****     Error_Handler();
 528:Src/main.c    ****   }
 529:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 2 */
 530:Src/main.c    **** 
 531:Src/main.c    ****   /* USER CODE END TIM5_Init 2 */
 532:Src/main.c    **** 
 533:Src/main.c    **** }
 534:Src/main.c    **** 
 535:Src/main.c    **** /**
 536:Src/main.c    ****   * @brief USART2 Initialization Function
 537:Src/main.c    ****   * @param None
 538:Src/main.c    ****   * @retval None
 539:Src/main.c    ****   */
 540:Src/main.c    **** static void MX_USART2_UART_Init(void)
 541:Src/main.c    **** {
 542:Src/main.c    **** 
 543:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 544:Src/main.c    **** 
ARM GAS  /tmp/cczYmwTC.s 			page 11


 545:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 546:Src/main.c    **** 
 547:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 548:Src/main.c    **** 
 549:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 550:Src/main.c    ****   huart2.Instance = USART2;
 551:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 552:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 553:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 554:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 555:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 556:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 557:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 558:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 559:Src/main.c    ****   {
 560:Src/main.c    ****     Error_Handler();
 561:Src/main.c    ****   }
 562:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 563:Src/main.c    **** 
 564:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 565:Src/main.c    **** 
 566:Src/main.c    **** }
 567:Src/main.c    **** 
 568:Src/main.c    **** /**
 569:Src/main.c    ****   * @brief GPIO Initialization Function
 570:Src/main.c    ****   * @param None
 571:Src/main.c    ****   * @retval None
 572:Src/main.c    ****   */
 573:Src/main.c    **** static void MX_GPIO_Init(void)
 574:Src/main.c    **** {
  28              		.loc 1 574 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 28
  35              		.cfi_offset 4, -28
  36              		.cfi_offset 5, -24
  37              		.cfi_offset 6, -20
  38              		.cfi_offset 7, -16
  39              		.cfi_offset 8, -12
  40              		.cfi_offset 9, -8
  41              		.cfi_offset 14, -4
  42 0004 8BB0     		sub	sp, sp, #44
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 72
 575:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  45              		.loc 1 575 0
  46 0006 0024     		movs	r4, #0
  47 0008 0594     		str	r4, [sp, #20]
  48 000a 0694     		str	r4, [sp, #24]
  49 000c 0794     		str	r4, [sp, #28]
  50 000e 0894     		str	r4, [sp, #32]
  51 0010 0994     		str	r4, [sp, #36]
  52              	.LBB2:
 576:Src/main.c    **** 
ARM GAS  /tmp/cczYmwTC.s 			page 12


 577:Src/main.c    ****   /* GPIO Ports Clock Enable */
 578:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  53              		.loc 1 578 0
  54 0012 0194     		str	r4, [sp, #4]
  55 0014 3C4B     		ldr	r3, .L3
  56 0016 1A6B     		ldr	r2, [r3, #48]
  57 0018 42F00402 		orr	r2, r2, #4
  58 001c 1A63     		str	r2, [r3, #48]
  59 001e 1A6B     		ldr	r2, [r3, #48]
  60 0020 02F00402 		and	r2, r2, #4
  61 0024 0192     		str	r2, [sp, #4]
  62 0026 019A     		ldr	r2, [sp, #4]
  63              	.LBE2:
  64              	.LBB3:
 579:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 579 0
  66 0028 0294     		str	r4, [sp, #8]
  67 002a 1A6B     		ldr	r2, [r3, #48]
  68 002c 42F08002 		orr	r2, r2, #128
  69 0030 1A63     		str	r2, [r3, #48]
  70 0032 1A6B     		ldr	r2, [r3, #48]
  71 0034 02F08002 		and	r2, r2, #128
  72 0038 0292     		str	r2, [sp, #8]
  73 003a 029A     		ldr	r2, [sp, #8]
  74              	.LBE3:
  75              	.LBB4:
 580:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  76              		.loc 1 580 0
  77 003c 0394     		str	r4, [sp, #12]
  78 003e 1A6B     		ldr	r2, [r3, #48]
  79 0040 42F00102 		orr	r2, r2, #1
  80 0044 1A63     		str	r2, [r3, #48]
  81 0046 1A6B     		ldr	r2, [r3, #48]
  82 0048 02F00102 		and	r2, r2, #1
  83 004c 0392     		str	r2, [sp, #12]
  84 004e 039A     		ldr	r2, [sp, #12]
  85              	.LBE4:
  86              	.LBB5:
 581:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  87              		.loc 1 581 0
  88 0050 0494     		str	r4, [sp, #16]
  89 0052 1A6B     		ldr	r2, [r3, #48]
  90 0054 42F00202 		orr	r2, r2, #2
  91 0058 1A63     		str	r2, [r3, #48]
  92 005a 1B6B     		ldr	r3, [r3, #48]
  93 005c 03F00203 		and	r3, r3, #2
  94 0060 0493     		str	r3, [sp, #16]
  95 0062 049B     		ldr	r3, [sp, #16]
  96              	.LBE5:
 582:Src/main.c    **** 
 583:Src/main.c    ****   /*Configure GPIO pin Output Level */
 584:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR1_Pin, GPIO_PIN_RESET);
  97              		.loc 1 584 0
  98 0064 294F     		ldr	r7, .L3+4
  99 0066 3846     		mov	r0, r7
 100 0068 4FF48461 		mov	r1, #1056
 101 006c 2246     		mov	r2, r4
ARM GAS  /tmp/cczYmwTC.s 			page 13


 102 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 103              	.LVL0:
 585:Src/main.c    **** 
 586:Src/main.c    ****   /*Configure GPIO pin Output Level */
 587:Src/main.c    ****   HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 104              		.loc 1 587 0
 105 0072 274D     		ldr	r5, .L3+8
 106 0074 2846     		mov	r0, r5
 107 0076 1021     		movs	r1, #16
 108 0078 2246     		mov	r2, r4
 109 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 110              	.LVL1:
 588:Src/main.c    **** 
 589:Src/main.c    ****   /*Configure GPIO pin Output Level */
 590:Src/main.c    ****   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 111              		.loc 1 590 0
 112 007e DFF89880 		ldr	r8, .L3+16
 113 0082 4046     		mov	r0, r8
 114 0084 2021     		movs	r1, #32
 115 0086 2246     		mov	r2, r4
 116 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 117              	.LVL2:
 591:Src/main.c    **** 
 592:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 593:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 118              		.loc 1 593 0
 119 008c 4FF40053 		mov	r3, #8192
 120 0090 0593     		str	r3, [sp, #20]
 594:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 121              		.loc 1 594 0
 122 0092 204B     		ldr	r3, .L3+12
 123 0094 0693     		str	r3, [sp, #24]
 595:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 124              		.loc 1 595 0
 125 0096 0794     		str	r4, [sp, #28]
 596:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 126              		.loc 1 596 0
 127 0098 2846     		mov	r0, r5
 128 009a 05A9     		add	r1, sp, #20
 129 009c FFF7FEFF 		bl	HAL_GPIO_Init
 130              	.LVL3:
 597:Src/main.c    **** 
 598:Src/main.c    ****   /*Configure GPIO pin : ObstacleDetection_Pin */
 599:Src/main.c    ****   GPIO_InitStruct.Pin = ObstacleDetection_Pin;
 131              		.loc 1 599 0
 132 00a0 4FF01009 		mov	r9, #16
 133 00a4 CDF81490 		str	r9, [sp, #20]
 600:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 134              		.loc 1 600 0
 135 00a8 0694     		str	r4, [sp, #24]
 601:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 136              		.loc 1 601 0
 137 00aa 0223     		movs	r3, #2
 138 00ac 0793     		str	r3, [sp, #28]
 602:Src/main.c    ****   HAL_GPIO_Init(ObstacleDetection_GPIO_Port, &GPIO_InitStruct);
 139              		.loc 1 602 0
 140 00ae 3846     		mov	r0, r7
ARM GAS  /tmp/cczYmwTC.s 			page 14


 141 00b0 05A9     		add	r1, sp, #20
 142 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 143              	.LVL4:
 603:Src/main.c    **** 
 604:Src/main.c    ****   /*Configure GPIO pins : LD2_Pin DIR1_Pin */
 605:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin|DIR1_Pin;
 144              		.loc 1 605 0
 145 00b6 4FF48463 		mov	r3, #1056
 146 00ba 0593     		str	r3, [sp, #20]
 606:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 147              		.loc 1 606 0
 148 00bc 0126     		movs	r6, #1
 149 00be 0696     		str	r6, [sp, #24]
 607:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 150              		.loc 1 607 0
 151 00c0 0794     		str	r4, [sp, #28]
 608:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 152              		.loc 1 608 0
 153 00c2 0894     		str	r4, [sp, #32]
 609:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 154              		.loc 1 609 0
 155 00c4 3846     		mov	r0, r7
 156 00c6 05A9     		add	r1, sp, #20
 157 00c8 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL5:
 610:Src/main.c    **** 
 611:Src/main.c    ****   /*Configure GPIO pin : DebugTiming_Pin */
 612:Src/main.c    ****   GPIO_InitStruct.Pin = DebugTiming_Pin;
 159              		.loc 1 612 0
 160 00cc CDF81490 		str	r9, [sp, #20]
 613:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 161              		.loc 1 613 0
 162 00d0 0696     		str	r6, [sp, #24]
 614:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 163              		.loc 1 614 0
 164 00d2 0794     		str	r4, [sp, #28]
 615:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 165              		.loc 1 615 0
 166 00d4 0894     		str	r4, [sp, #32]
 616:Src/main.c    ****   HAL_GPIO_Init(DebugTiming_GPIO_Port, &GPIO_InitStruct);
 167              		.loc 1 616 0
 168 00d6 2846     		mov	r0, r5
 169 00d8 05A9     		add	r1, sp, #20
 170 00da FFF7FEFF 		bl	HAL_GPIO_Init
 171              	.LVL6:
 617:Src/main.c    **** 
 618:Src/main.c    ****   /*Configure GPIO pin : Tirette_Pin */
 619:Src/main.c    ****   GPIO_InitStruct.Pin = Tirette_Pin;
 172              		.loc 1 619 0
 173 00de 4FF48053 		mov	r3, #4096
 174 00e2 0593     		str	r3, [sp, #20]
 620:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 175              		.loc 1 620 0
 176 00e4 0694     		str	r4, [sp, #24]
 621:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 177              		.loc 1 621 0
 178 00e6 0794     		str	r4, [sp, #28]
ARM GAS  /tmp/cczYmwTC.s 			page 15


 622:Src/main.c    ****   HAL_GPIO_Init(Tirette_GPIO_Port, &GPIO_InitStruct);
 179              		.loc 1 622 0
 180 00e8 2846     		mov	r0, r5
 181 00ea 05A9     		add	r1, sp, #20
 182 00ec FFF7FEFF 		bl	HAL_GPIO_Init
 183              	.LVL7:
 623:Src/main.c    **** 
 624:Src/main.c    ****   /*Configure GPIO pin : DIR2_Pin */
 625:Src/main.c    ****   GPIO_InitStruct.Pin = DIR2_Pin;
 184              		.loc 1 625 0
 185 00f0 2023     		movs	r3, #32
 186 00f2 0593     		str	r3, [sp, #20]
 626:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 187              		.loc 1 626 0
 188 00f4 0696     		str	r6, [sp, #24]
 627:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 189              		.loc 1 627 0
 190 00f6 0794     		str	r4, [sp, #28]
 628:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 191              		.loc 1 628 0
 192 00f8 0894     		str	r4, [sp, #32]
 629:Src/main.c    ****   HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 193              		.loc 1 629 0
 194 00fa 4046     		mov	r0, r8
 195 00fc 05A9     		add	r1, sp, #20
 196 00fe FFF7FEFF 		bl	HAL_GPIO_Init
 197              	.LVL8:
 630:Src/main.c    **** 
 631:Src/main.c    **** }
 198              		.loc 1 631 0
 199 0102 0BB0     		add	sp, sp, #44
 200              	.LCFI2:
 201              		.cfi_def_cfa_offset 28
 202              		@ sp needed
 203 0104 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 204              	.L4:
 205              		.align	2
 206              	.L3:
 207 0108 00380240 		.word	1073887232
 208 010c 00000240 		.word	1073872896
 209 0110 00080240 		.word	1073874944
 210 0114 00002110 		.word	270598144
 211 0118 00040240 		.word	1073873920
 212              		.cfi_endproc
 213              	.LFE131:
 215              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 216              		.align	2
 217              		.thumb
 218              		.thumb_func
 220              	MX_USART2_UART_Init:
 221              	.LFB130:
 541:Src/main.c    **** 
 222              		.loc 1 541 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cczYmwTC.s 			page 16


 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 3, -8
 230              		.cfi_offset 14, -4
 550:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 231              		.loc 1 550 0
 232 0002 0848     		ldr	r0, .L7
 233 0004 084B     		ldr	r3, .L7+4
 234 0006 0360     		str	r3, [r0]
 551:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 235              		.loc 1 551 0
 236 0008 4FF4E133 		mov	r3, #115200
 237 000c 4360     		str	r3, [r0, #4]
 552:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 238              		.loc 1 552 0
 239 000e 0023     		movs	r3, #0
 240 0010 8360     		str	r3, [r0, #8]
 553:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 241              		.loc 1 553 0
 242 0012 C360     		str	r3, [r0, #12]
 554:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 243              		.loc 1 554 0
 244 0014 0361     		str	r3, [r0, #16]
 555:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 245              		.loc 1 555 0
 246 0016 0C22     		movs	r2, #12
 247 0018 4261     		str	r2, [r0, #20]
 556:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 248              		.loc 1 556 0
 249 001a 8361     		str	r3, [r0, #24]
 557:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 250              		.loc 1 557 0
 251 001c C361     		str	r3, [r0, #28]
 558:Src/main.c    ****   {
 252              		.loc 1 558 0
 253 001e FFF7FEFF 		bl	HAL_UART_Init
 254              	.LVL9:
 255 0022 08BD     		pop	{r3, pc}
 256              	.L8:
 257              		.align	2
 258              	.L7:
 259 0024 00000000 		.word	huart2
 260 0028 00440040 		.word	1073759232
 261              		.cfi_endproc
 262              	.LFE130:
 264              		.section	.text.MX_TIM2_Init,"ax",%progbits
 265              		.align	2
 266              		.thumb
 267              		.thumb_func
 269              	MX_TIM2_Init:
 270              	.LFB126:
 349:Src/main.c    **** 
 271              		.loc 1 349 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 40
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/cczYmwTC.s 			page 17


 276              	.LCFI4:
 277              		.cfi_def_cfa_offset 12
 278              		.cfi_offset 4, -12
 279              		.cfi_offset 5, -8
 280              		.cfi_offset 14, -4
 281 0002 8BB0     		sub	sp, sp, #44
 282              	.LCFI5:
 283              		.cfi_def_cfa_offset 56
 355:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 284              		.loc 1 355 0
 285 0004 0024     		movs	r4, #0
 286 0006 0894     		str	r4, [sp, #32]
 287 0008 0994     		str	r4, [sp, #36]
 356:Src/main.c    **** 
 288              		.loc 1 356 0
 289 000a 0194     		str	r4, [sp, #4]
 290 000c 0294     		str	r4, [sp, #8]
 291 000e 0394     		str	r4, [sp, #12]
 292 0010 0494     		str	r4, [sp, #16]
 293 0012 0594     		str	r4, [sp, #20]
 294 0014 0694     		str	r4, [sp, #24]
 295 0016 0794     		str	r4, [sp, #28]
 361:Src/main.c    ****   htim2.Init.Prescaler = 0;
 296              		.loc 1 361 0
 297 0018 104D     		ldr	r5, .L11
 298 001a 4FF08043 		mov	r3, #1073741824
 299 001e 2B60     		str	r3, [r5]
 362:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 300              		.loc 1 362 0
 301 0020 6C60     		str	r4, [r5, #4]
 363:Src/main.c    ****   htim2.Init.Period = 10000;
 302              		.loc 1 363 0
 303 0022 AC60     		str	r4, [r5, #8]
 364:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 304              		.loc 1 364 0
 305 0024 42F21073 		movw	r3, #10000
 306 0028 EB60     		str	r3, [r5, #12]
 365:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 307              		.loc 1 365 0
 308 002a 2C61     		str	r4, [r5, #16]
 366:Src/main.c    ****   {
 309              		.loc 1 366 0
 310 002c 2846     		mov	r0, r5
 311 002e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 312              	.LVL10:
 370:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 313              		.loc 1 370 0
 314 0032 0894     		str	r4, [sp, #32]
 371:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 315              		.loc 1 371 0
 316 0034 0994     		str	r4, [sp, #36]
 372:Src/main.c    ****   {
 317              		.loc 1 372 0
 318 0036 2846     		mov	r0, r5
 319 0038 08A9     		add	r1, sp, #32
 320 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 321              	.LVL11:
ARM GAS  /tmp/cczYmwTC.s 			page 18


 376:Src/main.c    ****   sConfigOC.Pulse = 0;
 322              		.loc 1 376 0
 323 003e 6023     		movs	r3, #96
 324 0040 0193     		str	r3, [sp, #4]
 377:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 325              		.loc 1 377 0
 326 0042 0294     		str	r4, [sp, #8]
 378:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 327              		.loc 1 378 0
 328 0044 0394     		str	r4, [sp, #12]
 379:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 329              		.loc 1 379 0
 330 0046 0594     		str	r4, [sp, #20]
 380:Src/main.c    ****   {
 331              		.loc 1 380 0
 332 0048 2846     		mov	r0, r5
 333 004a 01A9     		add	r1, sp, #4
 334 004c 0422     		movs	r2, #4
 335 004e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 336              	.LVL12:
 387:Src/main.c    **** 
 337              		.loc 1 387 0
 338 0052 2846     		mov	r0, r5
 339 0054 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 340              	.LVL13:
 389:Src/main.c    **** 
 341              		.loc 1 389 0
 342 0058 0BB0     		add	sp, sp, #44
 343              	.LCFI6:
 344              		.cfi_def_cfa_offset 12
 345              		@ sp needed
 346 005a 30BD     		pop	{r4, r5, pc}
 347              	.L12:
 348              		.align	2
 349              	.L11:
 350 005c 00000000 		.word	htim2
 351              		.cfi_endproc
 352              	.LFE126:
 354              		.section	.text.MX_TIM3_Init,"ax",%progbits
 355              		.align	2
 356              		.thumb
 357              		.thumb_func
 359              	MX_TIM3_Init:
 360              	.LFB127:
 397:Src/main.c    **** 
 361              		.loc 1 397 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 40
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365 0000 30B5     		push	{r4, r5, lr}
 366              	.LCFI7:
 367              		.cfi_def_cfa_offset 12
 368              		.cfi_offset 4, -12
 369              		.cfi_offset 5, -8
 370              		.cfi_offset 14, -4
 371 0002 8BB0     		sub	sp, sp, #44
 372              	.LCFI8:
ARM GAS  /tmp/cczYmwTC.s 			page 19


 373              		.cfi_def_cfa_offset 56
 403:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 374              		.loc 1 403 0
 375 0004 0024     		movs	r4, #0
 376 0006 0894     		str	r4, [sp, #32]
 377 0008 0994     		str	r4, [sp, #36]
 404:Src/main.c    **** 
 378              		.loc 1 404 0
 379 000a 0194     		str	r4, [sp, #4]
 380 000c 0294     		str	r4, [sp, #8]
 381 000e 0394     		str	r4, [sp, #12]
 382 0010 0494     		str	r4, [sp, #16]
 383 0012 0594     		str	r4, [sp, #20]
 384 0014 0694     		str	r4, [sp, #24]
 385 0016 0794     		str	r4, [sp, #28]
 409:Src/main.c    ****   htim3.Init.Prescaler = 0;
 386              		.loc 1 409 0
 387 0018 104D     		ldr	r5, .L15
 388 001a 114B     		ldr	r3, .L15+4
 389 001c 2B60     		str	r3, [r5]
 410:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 390              		.loc 1 410 0
 391 001e 6C60     		str	r4, [r5, #4]
 411:Src/main.c    ****   htim3.Init.Period = 10000;
 392              		.loc 1 411 0
 393 0020 AC60     		str	r4, [r5, #8]
 412:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 394              		.loc 1 412 0
 395 0022 42F21073 		movw	r3, #10000
 396 0026 EB60     		str	r3, [r5, #12]
 413:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 397              		.loc 1 413 0
 398 0028 2C61     		str	r4, [r5, #16]
 414:Src/main.c    ****   {
 399              		.loc 1 414 0
 400 002a 2846     		mov	r0, r5
 401 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 402              	.LVL14:
 418:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 403              		.loc 1 418 0
 404 0030 0894     		str	r4, [sp, #32]
 419:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 405              		.loc 1 419 0
 406 0032 0994     		str	r4, [sp, #36]
 420:Src/main.c    ****   {
 407              		.loc 1 420 0
 408 0034 2846     		mov	r0, r5
 409 0036 08A9     		add	r1, sp, #32
 410 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 411              	.LVL15:
 424:Src/main.c    ****   sConfigOC.Pulse = 0;
 412              		.loc 1 424 0
 413 003c 6023     		movs	r3, #96
 414 003e 0193     		str	r3, [sp, #4]
 425:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 415              		.loc 1 425 0
 416 0040 0294     		str	r4, [sp, #8]
ARM GAS  /tmp/cczYmwTC.s 			page 20


 426:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 417              		.loc 1 426 0
 418 0042 0394     		str	r4, [sp, #12]
 427:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 419              		.loc 1 427 0
 420 0044 0594     		str	r4, [sp, #20]
 428:Src/main.c    ****   {
 421              		.loc 1 428 0
 422 0046 2846     		mov	r0, r5
 423 0048 01A9     		add	r1, sp, #4
 424 004a 2246     		mov	r2, r4
 425 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 426              	.LVL16:
 435:Src/main.c    **** 
 427              		.loc 1 435 0
 428 0050 2846     		mov	r0, r5
 429 0052 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 430              	.LVL17:
 437:Src/main.c    **** 
 431              		.loc 1 437 0
 432 0056 0BB0     		add	sp, sp, #44
 433              	.LCFI9:
 434              		.cfi_def_cfa_offset 12
 435              		@ sp needed
 436 0058 30BD     		pop	{r4, r5, pc}
 437              	.L16:
 438 005a 00BF     		.align	2
 439              	.L15:
 440 005c 00000000 		.word	htim3
 441 0060 00040040 		.word	1073742848
 442              		.cfi_endproc
 443              	.LFE127:
 445              		.section	.text.MX_TIM4_Init,"ax",%progbits
 446              		.align	2
 447              		.thumb
 448              		.thumb_func
 450              	MX_TIM4_Init:
 451              	.LFB128:
 445:Src/main.c    **** 
 452              		.loc 1 445 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 48
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456 0000 30B5     		push	{r4, r5, lr}
 457              	.LCFI10:
 458              		.cfi_def_cfa_offset 12
 459              		.cfi_offset 4, -12
 460              		.cfi_offset 5, -8
 461              		.cfi_offset 14, -4
 462 0002 8DB0     		sub	sp, sp, #52
 463              	.LCFI11:
 464              		.cfi_def_cfa_offset 64
 451:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 465              		.loc 1 451 0
 466 0004 0024     		movs	r4, #0
 467 0006 0494     		str	r4, [sp, #16]
 468 0008 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/cczYmwTC.s 			page 21


 469 000a 0894     		str	r4, [sp, #32]
 470 000c 0A94     		str	r4, [sp, #40]
 452:Src/main.c    **** 
 471              		.loc 1 452 0
 472 000e 0194     		str	r4, [sp, #4]
 473 0010 0294     		str	r4, [sp, #8]
 457:Src/main.c    ****   htim4.Init.Prescaler = 0;
 474              		.loc 1 457 0
 475 0012 0E4D     		ldr	r5, .L19
 476 0014 0E4B     		ldr	r3, .L19+4
 477 0016 2B60     		str	r3, [r5]
 458:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 478              		.loc 1 458 0
 479 0018 6C60     		str	r4, [r5, #4]
 459:Src/main.c    ****   htim4.Init.Period = 0xffff;
 480              		.loc 1 459 0
 481 001a AC60     		str	r4, [r5, #8]
 460:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 482              		.loc 1 460 0
 483 001c 4FF6FF73 		movw	r3, #65535
 484 0020 EB60     		str	r3, [r5, #12]
 461:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 485              		.loc 1 461 0
 486 0022 2C61     		str	r4, [r5, #16]
 462:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 487              		.loc 1 462 0
 488 0024 0123     		movs	r3, #1
 489 0026 0393     		str	r3, [sp, #12]
 464:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 490              		.loc 1 464 0
 491 0028 0593     		str	r3, [sp, #20]
 466:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 492              		.loc 1 466 0
 493 002a 0522     		movs	r2, #5
 494 002c 0792     		str	r2, [sp, #28]
 468:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 495              		.loc 1 468 0
 496 002e 0993     		str	r3, [sp, #36]
 470:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 497              		.loc 1 470 0
 498 0030 0B92     		str	r2, [sp, #44]
 471:Src/main.c    ****   {
 499              		.loc 1 471 0
 500 0032 2846     		mov	r0, r5
 501 0034 03A9     		add	r1, sp, #12
 502 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 503              	.LVL18:
 475:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 504              		.loc 1 475 0
 505 003a 0194     		str	r4, [sp, #4]
 476:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 506              		.loc 1 476 0
 507 003c 0294     		str	r4, [sp, #8]
 477:Src/main.c    ****   {
 508              		.loc 1 477 0
 509 003e 2846     		mov	r0, r5
 510 0040 01A9     		add	r1, sp, #4
ARM GAS  /tmp/cczYmwTC.s 			page 22


 511 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 512              	.LVL19:
 485:Src/main.c    **** 
 513              		.loc 1 485 0
 514 0046 0DB0     		add	sp, sp, #52
 515              	.LCFI12:
 516              		.cfi_def_cfa_offset 12
 517              		@ sp needed
 518 0048 30BD     		pop	{r4, r5, pc}
 519              	.L20:
 520 004a 00BF     		.align	2
 521              	.L19:
 522 004c 00000000 		.word	htim4
 523 0050 00080040 		.word	1073743872
 524              		.cfi_endproc
 525              	.LFE128:
 527              		.section	.text.MX_TIM5_Init,"ax",%progbits
 528              		.align	2
 529              		.thumb
 530              		.thumb_func
 532              	MX_TIM5_Init:
 533              	.LFB129:
 493:Src/main.c    **** 
 534              		.loc 1 493 0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 48
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538 0000 30B5     		push	{r4, r5, lr}
 539              	.LCFI13:
 540              		.cfi_def_cfa_offset 12
 541              		.cfi_offset 4, -12
 542              		.cfi_offset 5, -8
 543              		.cfi_offset 14, -4
 544 0002 8DB0     		sub	sp, sp, #52
 545              	.LCFI14:
 546              		.cfi_def_cfa_offset 64
 499:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 547              		.loc 1 499 0
 548 0004 0024     		movs	r4, #0
 549 0006 0494     		str	r4, [sp, #16]
 550 0008 0694     		str	r4, [sp, #24]
 551 000a 0894     		str	r4, [sp, #32]
 552 000c 0A94     		str	r4, [sp, #40]
 500:Src/main.c    **** 
 553              		.loc 1 500 0
 554 000e 0194     		str	r4, [sp, #4]
 555 0010 0294     		str	r4, [sp, #8]
 505:Src/main.c    ****   htim5.Init.Prescaler = 0;
 556              		.loc 1 505 0
 557 0012 0E4D     		ldr	r5, .L23
 558 0014 0E4B     		ldr	r3, .L23+4
 559 0016 2B60     		str	r3, [r5]
 506:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 560              		.loc 1 506 0
 561 0018 6C60     		str	r4, [r5, #4]
 507:Src/main.c    ****   htim5.Init.Period = 0xffff;
 562              		.loc 1 507 0
ARM GAS  /tmp/cczYmwTC.s 			page 23


 563 001a AC60     		str	r4, [r5, #8]
 508:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 564              		.loc 1 508 0
 565 001c 4FF6FF73 		movw	r3, #65535
 566 0020 EB60     		str	r3, [r5, #12]
 509:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 567              		.loc 1 509 0
 568 0022 2C61     		str	r4, [r5, #16]
 510:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 569              		.loc 1 510 0
 570 0024 0123     		movs	r3, #1
 571 0026 0393     		str	r3, [sp, #12]
 512:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 572              		.loc 1 512 0
 573 0028 0593     		str	r3, [sp, #20]
 514:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 574              		.loc 1 514 0
 575 002a 0522     		movs	r2, #5
 576 002c 0792     		str	r2, [sp, #28]
 516:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 577              		.loc 1 516 0
 578 002e 0993     		str	r3, [sp, #36]
 518:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 579              		.loc 1 518 0
 580 0030 0B92     		str	r2, [sp, #44]
 519:Src/main.c    ****   {
 581              		.loc 1 519 0
 582 0032 2846     		mov	r0, r5
 583 0034 03A9     		add	r1, sp, #12
 584 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 585              	.LVL20:
 523:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 586              		.loc 1 523 0
 587 003a 0194     		str	r4, [sp, #4]
 524:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 588              		.loc 1 524 0
 589 003c 0294     		str	r4, [sp, #8]
 525:Src/main.c    ****   {
 590              		.loc 1 525 0
 591 003e 2846     		mov	r0, r5
 592 0040 01A9     		add	r1, sp, #4
 593 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 594              	.LVL21:
 533:Src/main.c    **** 
 595              		.loc 1 533 0
 596 0046 0DB0     		add	sp, sp, #52
 597              	.LCFI15:
 598              		.cfi_def_cfa_offset 12
 599              		@ sp needed
 600 0048 30BD     		pop	{r4, r5, pc}
 601              	.L24:
 602 004a 00BF     		.align	2
 603              	.L23:
 604 004c 00000000 		.word	htim5
 605 0050 000C0040 		.word	1073744896
 606              		.cfi_endproc
 607              	.LFE129:
ARM GAS  /tmp/cczYmwTC.s 			page 24


 609              		.section	.text.MX_TIM1_Init,"ax",%progbits
 610              		.align	2
 611              		.thumb
 612              		.thumb_func
 614              	MX_TIM1_Init:
 615              	.LFB125:
 286:Src/main.c    **** 
 616              		.loc 1 286 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 64
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620 0000 30B5     		push	{r4, r5, lr}
 621              	.LCFI16:
 622              		.cfi_def_cfa_offset 12
 623              		.cfi_offset 4, -12
 624              		.cfi_offset 5, -8
 625              		.cfi_offset 14, -4
 626 0002 91B0     		sub	sp, sp, #68
 627              	.LCFI17:
 628              		.cfi_def_cfa_offset 80
 292:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 629              		.loc 1 292 0
 630 0004 0024     		movs	r4, #0
 631 0006 0E94     		str	r4, [sp, #56]
 632 0008 0F94     		str	r4, [sp, #60]
 293:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 633              		.loc 1 293 0
 634 000a 0794     		str	r4, [sp, #28]
 635 000c 0894     		str	r4, [sp, #32]
 636 000e 0994     		str	r4, [sp, #36]
 637 0010 0A94     		str	r4, [sp, #40]
 638 0012 0B94     		str	r4, [sp, #44]
 639 0014 0C94     		str	r4, [sp, #48]
 640 0016 0D94     		str	r4, [sp, #52]
 294:Src/main.c    **** 
 641              		.loc 1 294 0
 642 0018 0094     		str	r4, [sp]
 643 001a 0194     		str	r4, [sp, #4]
 644 001c 0294     		str	r4, [sp, #8]
 645 001e 0394     		str	r4, [sp, #12]
 646 0020 0494     		str	r4, [sp, #16]
 647 0022 0594     		str	r4, [sp, #20]
 648 0024 0694     		str	r4, [sp, #24]
 299:Src/main.c    ****   htim1.Init.Prescaler = 72;
 649              		.loc 1 299 0
 650 0026 1A4D     		ldr	r5, .L27
 651 0028 1A4B     		ldr	r3, .L27+4
 652 002a 2B60     		str	r3, [r5]
 300:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 653              		.loc 1 300 0
 654 002c 4823     		movs	r3, #72
 655 002e 6B60     		str	r3, [r5, #4]
 301:Src/main.c    ****   htim1.Init.Period = 20000;
 656              		.loc 1 301 0
 657 0030 AC60     		str	r4, [r5, #8]
 302:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 658              		.loc 1 302 0
ARM GAS  /tmp/cczYmwTC.s 			page 25


 659 0032 44F62063 		movw	r3, #20000
 660 0036 EB60     		str	r3, [r5, #12]
 303:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 661              		.loc 1 303 0
 662 0038 2C61     		str	r4, [r5, #16]
 304:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 663              		.loc 1 304 0
 664 003a 6C61     		str	r4, [r5, #20]
 305:Src/main.c    ****   {
 665              		.loc 1 305 0
 666 003c 2846     		mov	r0, r5
 667 003e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 668              	.LVL22:
 309:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 669              		.loc 1 309 0
 670 0042 0E94     		str	r4, [sp, #56]
 310:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 671              		.loc 1 310 0
 672 0044 0F94     		str	r4, [sp, #60]
 311:Src/main.c    ****   {
 673              		.loc 1 311 0
 674 0046 2846     		mov	r0, r5
 675 0048 0EA9     		add	r1, sp, #56
 676 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 677              	.LVL23:
 315:Src/main.c    ****   sConfigOC.Pulse = 1500;
 678              		.loc 1 315 0
 679 004e 6023     		movs	r3, #96
 680 0050 0793     		str	r3, [sp, #28]
 316:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 681              		.loc 1 316 0
 682 0052 40F2DC53 		movw	r3, #1500
 683 0056 0893     		str	r3, [sp, #32]
 317:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 684              		.loc 1 317 0
 685 0058 0994     		str	r4, [sp, #36]
 318:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 686              		.loc 1 318 0
 687 005a 0B94     		str	r4, [sp, #44]
 319:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 688              		.loc 1 319 0
 689 005c 0C94     		str	r4, [sp, #48]
 320:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 690              		.loc 1 320 0
 691 005e 0D94     		str	r4, [sp, #52]
 321:Src/main.c    ****   {
 692              		.loc 1 321 0
 693 0060 2846     		mov	r0, r5
 694 0062 07A9     		add	r1, sp, #28
 695 0064 0C22     		movs	r2, #12
 696 0066 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 697              	.LVL24:
 325:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 698              		.loc 1 325 0
 699 006a 0094     		str	r4, [sp]
 326:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 700              		.loc 1 326 0
ARM GAS  /tmp/cczYmwTC.s 			page 26


 701 006c 0194     		str	r4, [sp, #4]
 327:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 702              		.loc 1 327 0
 703 006e 0294     		str	r4, [sp, #8]
 328:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 704              		.loc 1 328 0
 705 0070 0394     		str	r4, [sp, #12]
 329:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 706              		.loc 1 329 0
 707 0072 0494     		str	r4, [sp, #16]
 330:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 708              		.loc 1 330 0
 709 0074 4FF40053 		mov	r3, #8192
 710 0078 0593     		str	r3, [sp, #20]
 331:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 711              		.loc 1 331 0
 712 007a 0694     		str	r4, [sp, #24]
 332:Src/main.c    ****   {
 713              		.loc 1 332 0
 714 007c 2846     		mov	r0, r5
 715 007e 6946     		mov	r1, sp
 716 0080 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 717              	.LVL25:
 339:Src/main.c    **** 
 718              		.loc 1 339 0
 719 0084 2846     		mov	r0, r5
 720 0086 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 721              	.LVL26:
 341:Src/main.c    **** 
 722              		.loc 1 341 0
 723 008a 11B0     		add	sp, sp, #68
 724              	.LCFI18:
 725              		.cfi_def_cfa_offset 12
 726              		@ sp needed
 727 008c 30BD     		pop	{r4, r5, pc}
 728              	.L28:
 729 008e 00BF     		.align	2
 730              	.L27:
 731 0090 00000000 		.word	htim1
 732 0094 00000140 		.word	1073807360
 733              		.cfi_endproc
 734              	.LFE125:
 736              		.section	.text.SystemClock_Config,"ax",%progbits
 737              		.align	2
 738              		.global	SystemClock_Config
 739              		.thumb
 740              		.thumb_func
 742              	SystemClock_Config:
 743              	.LFB124:
 242:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 744              		.loc 1 242 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 80
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748 0000 30B5     		push	{r4, r5, lr}
 749              	.LCFI19:
 750              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cczYmwTC.s 			page 27


 751              		.cfi_offset 4, -12
 752              		.cfi_offset 5, -8
 753              		.cfi_offset 14, -4
 754 0002 95B0     		sub	sp, sp, #84
 755              	.LCFI20:
 756              		.cfi_def_cfa_offset 96
 243:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 757              		.loc 1 243 0
 758 0004 0024     		movs	r4, #0
 759 0006 0894     		str	r4, [sp, #32]
 760 0008 0994     		str	r4, [sp, #36]
 761 000a 0A94     		str	r4, [sp, #40]
 762 000c 0B94     		str	r4, [sp, #44]
 763 000e 0C94     		str	r4, [sp, #48]
 764 0010 0D94     		str	r4, [sp, #52]
 765 0012 0E94     		str	r4, [sp, #56]
 766 0014 0F94     		str	r4, [sp, #60]
 767 0016 1094     		str	r4, [sp, #64]
 768 0018 1194     		str	r4, [sp, #68]
 769 001a 1294     		str	r4, [sp, #72]
 770 001c 1394     		str	r4, [sp, #76]
 244:Src/main.c    **** 
 771              		.loc 1 244 0
 772 001e 0394     		str	r4, [sp, #12]
 773 0020 0494     		str	r4, [sp, #16]
 774 0022 0594     		str	r4, [sp, #20]
 775 0024 0694     		str	r4, [sp, #24]
 776 0026 0794     		str	r4, [sp, #28]
 777              	.LBB6:
 248:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 778              		.loc 1 248 0
 779 0028 0194     		str	r4, [sp, #4]
 780 002a 1C4B     		ldr	r3, .L31
 781 002c 1A6C     		ldr	r2, [r3, #64]
 782 002e 42F08052 		orr	r2, r2, #268435456
 783 0032 1A64     		str	r2, [r3, #64]
 784 0034 1B6C     		ldr	r3, [r3, #64]
 785 0036 03F08053 		and	r3, r3, #268435456
 786 003a 0193     		str	r3, [sp, #4]
 787 003c 019B     		ldr	r3, [sp, #4]
 788              	.LBE6:
 789              	.LBB7:
 249:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 790              		.loc 1 249 0
 791 003e 0294     		str	r4, [sp, #8]
 792 0040 174A     		ldr	r2, .L31+4
 793 0042 1368     		ldr	r3, [r2]
 794 0044 23F44043 		bic	r3, r3, #49152
 795 0048 43F40043 		orr	r3, r3, #32768
 796 004c 1360     		str	r3, [r2]
 797 004e 1368     		ldr	r3, [r2]
 798 0050 03F44043 		and	r3, r3, #49152
 799 0054 0293     		str	r3, [sp, #8]
 800 0056 029B     		ldr	r3, [sp, #8]
 801              	.LBE7:
 252:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 802              		.loc 1 252 0
ARM GAS  /tmp/cczYmwTC.s 			page 28


 803 0058 0225     		movs	r5, #2
 804 005a 0895     		str	r5, [sp, #32]
 253:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 805              		.loc 1 253 0
 806 005c 0123     		movs	r3, #1
 807 005e 0B93     		str	r3, [sp, #44]
 254:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 808              		.loc 1 254 0
 809 0060 1023     		movs	r3, #16
 810 0062 0C93     		str	r3, [sp, #48]
 255:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 811              		.loc 1 255 0
 812 0064 0E95     		str	r5, [sp, #56]
 256:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 813              		.loc 1 256 0
 814 0066 0F94     		str	r4, [sp, #60]
 257:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 815              		.loc 1 257 0
 816 0068 1093     		str	r3, [sp, #64]
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 817              		.loc 1 258 0
 818 006a 4FF4A873 		mov	r3, #336
 819 006e 1193     		str	r3, [sp, #68]
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 820              		.loc 1 259 0
 821 0070 0423     		movs	r3, #4
 822 0072 1293     		str	r3, [sp, #72]
 260:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 823              		.loc 1 260 0
 824 0074 0723     		movs	r3, #7
 825 0076 1393     		str	r3, [sp, #76]
 261:Src/main.c    ****   {
 826              		.loc 1 261 0
 827 0078 08A8     		add	r0, sp, #32
 828 007a FFF7FEFF 		bl	HAL_RCC_OscConfig
 829              	.LVL27:
 267:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 830              		.loc 1 267 0
 831 007e 0F23     		movs	r3, #15
 832 0080 0393     		str	r3, [sp, #12]
 269:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 833              		.loc 1 269 0
 834 0082 0495     		str	r5, [sp, #16]
 270:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 835              		.loc 1 270 0
 836 0084 0594     		str	r4, [sp, #20]
 271:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 837              		.loc 1 271 0
 838 0086 4FF48053 		mov	r3, #4096
 839 008a 0693     		str	r3, [sp, #24]
 272:Src/main.c    **** 
 840              		.loc 1 272 0
 841 008c 0794     		str	r4, [sp, #28]
 274:Src/main.c    ****   {
 842              		.loc 1 274 0
 843 008e 03A8     		add	r0, sp, #12
 844 0090 2946     		mov	r1, r5
ARM GAS  /tmp/cczYmwTC.s 			page 29


 845 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 846              	.LVL28:
 278:Src/main.c    **** 
 847              		.loc 1 278 0
 848 0096 15B0     		add	sp, sp, #84
 849              	.LCFI21:
 850              		.cfi_def_cfa_offset 12
 851              		@ sp needed
 852 0098 30BD     		pop	{r4, r5, pc}
 853              	.L32:
 854 009a 00BF     		.align	2
 855              	.L31:
 856 009c 00380240 		.word	1073887232
 857 00a0 00700040 		.word	1073770496
 858              		.cfi_endproc
 859              	.LFE124:
 861              		.section	.text.moteurDroit,"ax",%progbits
 862              		.align	2
 863              		.global	moteurDroit
 864              		.thumb
 865              		.thumb_func
 867              	moteurDroit:
 868              	.LFB132:
 632:Src/main.c    **** 
 633:Src/main.c    **** /* USER CODE BEGIN 4 */
 634:Src/main.c    **** void moteurDroit(int PWM)
 635:Src/main.c    **** {
 869              		.loc 1 635 0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 0
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              	.LVL29:
 874 0000 10B5     		push	{r4, lr}
 875              	.LCFI22:
 876              		.cfi_def_cfa_offset 8
 877              		.cfi_offset 4, -8
 878              		.cfi_offset 14, -4
 636:Src/main.c    ****     if(PWM == abs(PWM))
 879              		.loc 1 636 0
 880 0002 80EAE074 		eor	r4, r0, r0, asr #31
 881 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 882 000a 8442     		cmp	r4, r0
 883 000c 06D1     		bne	.L34
 637:Src/main.c    ****     {
 638:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 884              		.loc 1 638 0
 885 000e 0D48     		ldr	r0, .L39
 886              	.LVL30:
 887 0010 4FF48061 		mov	r1, #1024
 888 0014 0022     		movs	r2, #0
 889 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 890              	.LVL31:
 891 001a 05E0     		b	.L35
 892              	.LVL32:
 893              	.L34:
 639:Src/main.c    ****     }
 640:Src/main.c    ****     else
ARM GAS  /tmp/cczYmwTC.s 			page 30


 641:Src/main.c    ****     {
 642:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 894              		.loc 1 642 0
 895 001c 0948     		ldr	r0, .L39
 896              	.LVL33:
 897 001e 4FF48061 		mov	r1, #1024
 898 0022 0122     		movs	r2, #1
 899 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 900              	.LVL34:
 901              	.L35:
 643:Src/main.c    ****     }
 644:Src/main.c    ****     if (abs(PWM) > 10000)
 902              		.loc 1 644 0
 903 0028 42F21073 		movw	r3, #10000
 904 002c 9C42     		cmp	r4, r3
 905 002e 05DD     		ble	.L36
 645:Src/main.c    ****     {
 646:Src/main.c    **** 		htim2.Instance->CCR2 = 10000;
 906              		.loc 1 646 0
 907 0030 054B     		ldr	r3, .L39+4
 908 0032 1B68     		ldr	r3, [r3]
 909 0034 42F21072 		movw	r2, #10000
 910 0038 9A63     		str	r2, [r3, #56]
 911 003a 10BD     		pop	{r4, pc}
 912              	.L36:
 647:Src/main.c    ****     }
 648:Src/main.c    ****     else 
 649:Src/main.c    ****     {
 650:Src/main.c    **** 		htim2.Instance->CCR2 = abs(PWM);
 913              		.loc 1 650 0
 914 003c 024B     		ldr	r3, .L39+4
 915 003e 1B68     		ldr	r3, [r3]
 916 0040 9C63     		str	r4, [r3, #56]
 917 0042 10BD     		pop	{r4, pc}
 918              	.L40:
 919              		.align	2
 920              	.L39:
 921 0044 00000240 		.word	1073872896
 922 0048 00000000 		.word	htim2
 923              		.cfi_endproc
 924              	.LFE132:
 926              		.section	.text.moteurGauche,"ax",%progbits
 927              		.align	2
 928              		.global	moteurGauche
 929              		.thumb
 930              		.thumb_func
 932              	moteurGauche:
 933              	.LFB133:
 651:Src/main.c    **** 	}
 652:Src/main.c    **** }
 653:Src/main.c    **** 
 654:Src/main.c    **** 
 655:Src/main.c    **** void moteurGauche(int PWM)
 656:Src/main.c    **** {
 934              		.loc 1 656 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cczYmwTC.s 			page 31


 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              	.LVL35:
 939 0000 10B5     		push	{r4, lr}
 940              	.LCFI23:
 941              		.cfi_def_cfa_offset 8
 942              		.cfi_offset 4, -8
 943              		.cfi_offset 14, -4
 657:Src/main.c    ****     if(PWM == abs(PWM))
 944              		.loc 1 657 0
 945 0002 80EAE074 		eor	r4, r0, r0, asr #31
 946 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 947 000a 8442     		cmp	r4, r0
 948 000c 05D1     		bne	.L42
 658:Src/main.c    ****     {
 659:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_SET);
 949              		.loc 1 659 0
 950 000e 0C48     		ldr	r0, .L47
 951              	.LVL36:
 952 0010 2021     		movs	r1, #32
 953 0012 0122     		movs	r2, #1
 954 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 955              	.LVL37:
 956 0018 04E0     		b	.L43
 957              	.LVL38:
 958              	.L42:
 660:Src/main.c    ****     }
 661:Src/main.c    ****     else
 662:Src/main.c    ****     {
 663:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 959              		.loc 1 663 0
 960 001a 0948     		ldr	r0, .L47
 961              	.LVL39:
 962 001c 2021     		movs	r1, #32
 963 001e 0022     		movs	r2, #0
 964 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 965              	.LVL40:
 966              	.L43:
 664:Src/main.c    ****     }
 665:Src/main.c    ****     if (abs(PWM) > 10000)
 967              		.loc 1 665 0
 968 0024 42F21073 		movw	r3, #10000
 969 0028 9C42     		cmp	r4, r3
 970 002a 05DD     		ble	.L44
 666:Src/main.c    ****     {
 667:Src/main.c    **** 		htim3.Instance->CCR1 = 10000;
 971              		.loc 1 667 0
 972 002c 054B     		ldr	r3, .L47+4
 973 002e 1B68     		ldr	r3, [r3]
 974 0030 42F21072 		movw	r2, #10000
 975 0034 5A63     		str	r2, [r3, #52]
 976 0036 10BD     		pop	{r4, pc}
 977              	.L44:
 668:Src/main.c    ****     }
 669:Src/main.c    ****     else 
 670:Src/main.c    ****     {
 671:Src/main.c    **** 		htim3.Instance->CCR1 = abs(PWM);
 978              		.loc 1 671 0
ARM GAS  /tmp/cczYmwTC.s 			page 32


 979 0038 024B     		ldr	r3, .L47+4
 980 003a 1B68     		ldr	r3, [r3]
 981 003c 5C63     		str	r4, [r3, #52]
 982 003e 10BD     		pop	{r4, pc}
 983              	.L48:
 984              		.align	2
 985              	.L47:
 986 0040 00040240 		.word	1073873920
 987 0044 00000000 		.word	htim3
 988              		.cfi_endproc
 989              	.LFE133:
 991              		.global	__aeabi_i2d
 992              		.global	__aeabi_dmul
 993              		.global	__aeabi_d2iz
 994              		.section	.text.main,"ax",%progbits
 995              		.align	2
 996              		.global	main
 997              		.thumb
 998              		.thumb_func
 1000              	main:
 1001              	.LFB123:
 119:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1002              		.loc 1 119 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 8
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1007              	.LCFI24:
 1008              		.cfi_def_cfa_offset 36
 1009              		.cfi_offset 4, -36
 1010              		.cfi_offset 5, -32
 1011              		.cfi_offset 6, -28
 1012              		.cfi_offset 7, -24
 1013              		.cfi_offset 8, -20
 1014              		.cfi_offset 9, -16
 1015              		.cfi_offset 10, -12
 1016              		.cfi_offset 11, -8
 1017              		.cfi_offset 14, -4
 1018 0004 93B0     		sub	sp, sp, #76
 1019              	.LCFI25:
 1020              		.cfi_def_cfa_offset 112
 127:Src/main.c    **** 
 1021              		.loc 1 127 0
 1022 0006 FFF7FEFF 		bl	HAL_Init
 1023              	.LVL41:
 134:Src/main.c    **** 
 1024              		.loc 1 134 0
 1025 000a FFF7FEFF 		bl	SystemClock_Config
 1026              	.LVL42:
 141:Src/main.c    ****   MX_USART2_UART_Init();
 1027              		.loc 1 141 0
 1028 000e FFF7FEFF 		bl	MX_GPIO_Init
 1029              	.LVL43:
 142:Src/main.c    ****   MX_TIM2_Init();
 1030              		.loc 1 142 0
 1031 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 1032              	.LVL44:
ARM GAS  /tmp/cczYmwTC.s 			page 33


 143:Src/main.c    ****   MX_TIM3_Init();
 1033              		.loc 1 143 0
 1034 0016 FFF7FEFF 		bl	MX_TIM2_Init
 1035              	.LVL45:
 144:Src/main.c    ****   MX_TIM4_Init();
 1036              		.loc 1 144 0
 1037 001a FFF7FEFF 		bl	MX_TIM3_Init
 1038              	.LVL46:
 145:Src/main.c    ****   MX_TIM5_Init();
 1039              		.loc 1 145 0
 1040 001e FFF7FEFF 		bl	MX_TIM4_Init
 1041              	.LVL47:
 146:Src/main.c    ****   MX_TIM1_Init();
 1042              		.loc 1 146 0
 1043 0022 FFF7FEFF 		bl	MX_TIM5_Init
 1044              	.LVL48:
 147:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1045              		.loc 1 147 0
 1046 0026 FFF7FEFF 		bl	MX_TIM1_Init
 1047              	.LVL49:
 149:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 1048              		.loc 1 149 0
 1049 002a 8B48     		ldr	r0, .L59+8
 1050 002c 0421     		movs	r1, #4
 1051 002e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1052              	.LVL50:
 150:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 1053              		.loc 1 150 0
 1054 0032 8A48     		ldr	r0, .L59+12
 1055 0034 0021     		movs	r1, #0
 1056 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1057              	.LVL51:
 151:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1058              		.loc 1 151 0
 1059 003a 8948     		ldr	r0, .L59+16
 1060 003c 1821     		movs	r1, #24
 1061 003e FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1062              	.LVL52:
 152:Src/main.c    ****   HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_4);
 1063              		.loc 1 152 0
 1064 0042 8848     		ldr	r0, .L59+20
 1065 0044 1821     		movs	r1, #24
 1066 0046 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1067              	.LVL53:
 153:Src/main.c    ****   /* USER CODE END 2 */
 1068              		.loc 1 153 0
 1069 004a 8748     		ldr	r0, .L59+24
 1070 004c 0C21     		movs	r1, #12
 1071 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1072              	.LVL54:
 158:Src/main.c    ****   while(HAL_GPIO_ReadPin(Tirette_GPIO_Port, Tirette_Pin))
 1073              		.loc 1 158 0
 1074 0052 8648     		ldr	r0, .L59+28
 1075 0054 8649     		ldr	r1, .L59+32
 1076 0056 2F22     		movs	r2, #47
 1077 0058 4FF0FF33 		mov	r3, #-1
 1078 005c FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/cczYmwTC.s 			page 34


 1079              	.LVL55:
 1080              	.L50:
 159:Src/main.c    ****   {}
 1081              		.loc 1 159 0 discriminator 1
 1082 0060 8448     		ldr	r0, .L59+36
 1083 0062 4FF48051 		mov	r1, #4096
 1084 0066 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1085              	.LVL56:
 1086 006a 0028     		cmp	r0, #0
 1087 006c F8D1     		bne	.L50
 161:Src/main.c    ****     
 1088              		.loc 1 161 0
 1089 006e FFF7FEFF 		bl	HAL_GetTick
 1090              	.LVL57:
 1091 0072 1190     		str	r0, [sp, #68]
 1092              	.LVL58:
 163:Src/main.c    ****   HAL_Delay(1000);
 1093              		.loc 1 163 0
 1094 0074 7D48     		ldr	r0, .L59+28
 1095              	.LVL59:
 1096 0076 8049     		ldr	r1, .L59+40
 1097 0078 1A22     		movs	r2, #26
 1098 007a 4FF0FF33 		mov	r3, #-1
 1099 007e FFF7FEFF 		bl	HAL_UART_Transmit
 1100              	.LVL60:
 164:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick(); //init the time tracking variable for the fixed frequency PID 
 1101              		.loc 1 164 0
 1102 0082 4FF47A70 		mov	r0, #1000
 1103 0086 FFF7FEFF 		bl	HAL_Delay
 1104              	.LVL61:
 165:Src/main.c    **** 
 1105              		.loc 1 165 0
 1106 008a FFF7FEFF 		bl	HAL_GetTick
 1107              	.LVL62:
 1108 008e 0646     		mov	r6, r0
 1109              	.LVL63:
 170:Src/main.c    ****   TIM5->CNT = 30000;
 1110              		.loc 1 170 0
 1111 0090 47F23053 		movw	r3, #30000
 1112 0094 794A     		ldr	r2, .L59+44
 1113 0096 5362     		str	r3, [r2, #36]
 1114              	.LVL64:
 171:Src/main.c    ****   
 1115              		.loc 1 171 0
 1116 0098 02F58062 		add	r2, r2, #1024
 1117 009c 5362     		str	r3, [r2, #36]
 173:Src/main.c    **** 
 1118              		.loc 1 173 0
 1119 009e 724B     		ldr	r3, .L59+24
 1120 00a0 1B68     		ldr	r3, [r3]
 1121 00a2 40F2DC52 		movw	r2, #1500
 1122 00a6 1A64     		str	r2, [r3, #64]
 1123 00a8 04E0     		b	.L51
 1124              	.LVL65:
 1125              	.L52:
 1126              	.LBB8:
 179:Src/main.c    ****     HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
ARM GAS  /tmp/cczYmwTC.s 			page 35


 1127              		.loc 1 179 0
 1128 00aa 7248     		ldr	r0, .L59+36
 1129 00ac 1021     		movs	r1, #16
 1130 00ae 0122     		movs	r2, #1
 1131 00b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1132              	.LVL66:
 1133              	.L51:
 178:Src/main.c    ****     {HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_SET);}
 1134              		.loc 1 178 0
 1135 00b4 FFF7FEFF 		bl	HAL_GetTick
 1136              	.LVL67:
 1137 00b8 801B     		subs	r0, r0, r6
 1138 00ba 714B     		ldr	r3, .L59+48
 1139 00bc 1B68     		ldr	r3, [r3]
 1140 00be 9842     		cmp	r0, r3
 1141 00c0 F3D3     		bcc	.L52
 180:Src/main.c    ****     oldTicks = HAL_GetTick();
 1142              		.loc 1 180 0
 1143 00c2 6C48     		ldr	r0, .L59+36
 1144 00c4 1021     		movs	r1, #16
 1145 00c6 0022     		movs	r2, #0
 1146 00c8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1147              	.LVL68:
 181:Src/main.c    ****     
 1148              		.loc 1 181 0
 1149 00cc FFF7FEFF 		bl	HAL_GetTick
 1150              	.LVL69:
 1151 00d0 0646     		mov	r6, r0
 1152              	.LVL70:
 183:Src/main.c    ****     {
 1153              		.loc 1 183 0
 1154 00d2 FFF7FEFF 		bl	HAL_GetTick
 1155              	.LVL71:
 1156 00d6 119B     		ldr	r3, [sp, #68]
 1157 00d8 C01A     		subs	r0, r0, r3
 1158 00da 6A4B     		ldr	r3, .L59+52
 1159 00dc 9842     		cmp	r0, r3
 1160 00de 0DD9     		bls	.L53
 185:Src/main.c    ****         moteurGauche(0);
 1161              		.loc 1 185 0
 1162 00e0 6248     		ldr	r0, .L59+28
 1163 00e2 6949     		ldr	r1, .L59+56
 1164 00e4 1A22     		movs	r2, #26
 1165 00e6 4FF0FF33 		mov	r3, #-1
 1166 00ea FFF7FEFF 		bl	HAL_UART_Transmit
 1167              	.LVL72:
 186:Src/main.c    **** 		moteurDroit(0);
 1168              		.loc 1 186 0
 1169 00ee 0020     		movs	r0, #0
 1170 00f0 FFF7FEFF 		bl	moteurGauche
 1171              	.LVL73:
 187:Src/main.c    ****         while(1){}
 1172              		.loc 1 187 0
 1173 00f4 0020     		movs	r0, #0
 1174 00f6 FFF7FEFF 		bl	moteurDroit
 1175              	.LVL74:
 1176              	.L54:
ARM GAS  /tmp/cczYmwTC.s 			page 36


 188:Src/main.c    ****     }
 1177              		.loc 1 188 0 discriminator 1
 1178 00fa FEE7     		b	.L54
 1179              	.L53:
 191:Src/main.c    ****     {
 1180              		.loc 1 191 0
 1181 00fc 6348     		ldr	r0, .L59+60
 1182 00fe 1021     		movs	r1, #16
 1183 0100 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1184              	.LVL75:
 1185 0104 68B1     		cbz	r0, .L55
 193:Src/main.c    ****         moteurGauche(0);
 1186              		.loc 1 193 0
 1187 0106 5948     		ldr	r0, .L59+28
 1188 0108 6149     		ldr	r1, .L59+64
 1189 010a 1B22     		movs	r2, #27
 1190 010c 4FF0FF33 		mov	r3, #-1
 1191 0110 FFF7FEFF 		bl	HAL_UART_Transmit
 1192              	.LVL76:
 194:Src/main.c    **** 		moteurDroit(0);
 1193              		.loc 1 194 0
 1194 0114 0020     		movs	r0, #0
 1195 0116 FFF7FEFF 		bl	moteurGauche
 1196              	.LVL77:
 195:Src/main.c    ****         while(1){}
 1197              		.loc 1 195 0
 1198 011a 0020     		movs	r0, #0
 1199 011c FFF7FEFF 		bl	moteurDroit
 1200              	.LVL78:
 1201              	.L56:
 196:Src/main.c    ****     }
 1202              		.loc 1 196 0 discriminator 2
 1203 0120 FEE7     		b	.L56
 1204              	.L55:
 200:Src/main.c    ****     int tim5 = (-TIM5->CNT+30000);
 1205              		.loc 1 200 0
 1206 0122 5649     		ldr	r1, .L59+44
 1207 0124 4C6A     		ldr	r4, [r1, #36]
 1208 0126 A4F5EA44 		sub	r4, r4, #29952
 1209 012a 303C     		subs	r4, r4, #48
 1210              	.LVL79:
 201:Src/main.c    ****     TIM4->CNT = 30000;
 1211              		.loc 1 201 0
 1212 012c 594A     		ldr	r2, .L59+68
 1213 012e 506A     		ldr	r0, [r2, #36]
 1214 0130 47F23053 		movw	r3, #30000
 1215              	.LVL80:
 202:Src/main.c    ****     TIM5->CNT = 30000;
 1216              		.loc 1 202 0
 1217 0134 4B62     		str	r3, [r1, #36]
 203:Src/main.c    ****     
 1218              		.loc 1 203 0
 1219 0136 5362     		str	r3, [r2, #36]
 205:Src/main.c    ****     
 1220              		.loc 1 205 0
 1221 0138 181A     		subs	r0, r3, r0
 1222              	.LVL81:
ARM GAS  /tmp/cczYmwTC.s 			page 37


 1223 013a FFF7FEFF 		bl	__aeabi_i2d
 1224              	.LVL82:
 1225 013e 44A3     		adr	r3, .L59
 1226 0140 D3E90023 		ldrd	r2, [r3]
 1227 0144 FFF7FEFF 		bl	__aeabi_dmul
 1228              	.LVL83:
 1229 0148 FFF7FEFF 		bl	__aeabi_d2iz
 1230              	.LVL84:
 1231 014c 0546     		mov	r5, r0
 1232              	.LVL85:
 207:Src/main.c    ****     tim4Tot += tim4;//for debug
 1233              		.loc 1 207 0
 1234 014e DFF878B1 		ldr	fp, .L59+120
 1235 0152 DFF878A1 		ldr	r10, .L59+124
 1236 0156 DFF85891 		ldr	r9, .L59+96
 1237 015a CDF80090 		str	r9, [sp]
 1238 015e 2046     		mov	r0, r4
 1239              	.LVL86:
 1240 0160 2946     		mov	r1, r5
 1241 0162 5A46     		mov	r2, fp
 1242 0164 5346     		mov	r3, r10
 1243 0166 FFF7FEFF 		bl	updatePos
 1244              	.LVL87:
 208:Src/main.c    ****     tim5Tot += tim5;
 1245              		.loc 1 208 0
 1246 016a 4B4A     		ldr	r2, .L59+72
 1247 016c 1368     		ldr	r3, [r2]
 1248 016e 2344     		add	r3, r3, r4
 1249 0170 1360     		str	r3, [r2]
 209:Src/main.c    ****     
 1250              		.loc 1 209 0
 1251 0172 4A4A     		ldr	r2, .L59+76
 1252 0174 1368     		ldr	r3, [r2]
 1253 0176 2B44     		add	r3, r3, r5
 1254 0178 1360     		str	r3, [r2]
 211:Src/main.c    ****     
 1255              		.loc 1 211 0
 1256 017a 494F     		ldr	r7, .L59+80
 1257 017c DFF84081 		ldr	r8, .L59+112
 1258 0180 9BED000B 		fldd	d0, [fp]
 1259 0184 9AED001B 		fldd	d1, [r10]
 1260 0188 99ED002B 		fldd	d2, [r9]
 1261 018c EE46     		mov	lr, sp
 1262 018e DFF8DCC0 		ldr	ip, .L59+28
 1263 0192 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1264 0196 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1265 019a BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1266 019e AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1267 01a2 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1268 01a6 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1269 01aa 9CE80F00 		ldmia	ip, {r0, r1, r2, r3}
 1270 01ae 8EE80F00 		stmia	lr, {r0, r1, r2, r3}
 1271 01b2 3846     		mov	r0, r7
 1272 01b4 4146     		mov	r1, r8
 1273 01b6 2246     		mov	r2, r4
 1274 01b8 2B46     		mov	r3, r5
 1275 01ba FFF7FEFF 		bl	stateMachine
ARM GAS  /tmp/cczYmwTC.s 			page 38


 1276              	.LVL88:
 213:Src/main.c    ****     moteurDroit(consigneDroit);
 1277              		.loc 1 213 0
 1278 01be D8F80000 		ldr	r0, [r8]
 1279 01c2 FFF7FEFF 		bl	moteurGauche
 1280              	.LVL89:
 214:Src/main.c    ****     
 1281              		.loc 1 214 0
 1282 01c6 3868     		ldr	r0, [r7]
 1283 01c8 FFF7FEFF 		bl	moteurDroit
 1284              	.LVL90:
 217:Src/main.c    ****     if (_DEBUG == 1)
 1285              		.loc 1 217 0
 1286 01cc 354A     		ldr	r2, .L59+84
 1287 01ce 1368     		ldr	r3, [r2]
 1288 01d0 0133     		adds	r3, r3, #1
 1289 01d2 1360     		str	r3, [r2]
 220:Src/main.c    ****         {
 1290              		.loc 1 220 0
 1291 01d4 344A     		ldr	r2, .L59+88
 1292 01d6 1268     		ldr	r2, [r2]
 1293 01d8 9342     		cmp	r3, r2
 1294 01da 7FF46BAF 		bne	.L51
 222:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 1295              		.loc 1 222 0
 1296 01de 334C     		ldr	r4, .L59+92
 1297              	.LVL91:
 1298 01e0 DBE90089 		ldrd	r8, [fp]
 1299 01e4 DAE90023 		ldrd	r2, [r10]
 1300 01e8 CDE90023 		strd	r2, [sp]
 1301 01ec 304B     		ldr	r3, .L59+96
 1302 01ee D3E90001 		ldrd	r0, [r3]
 1303 01f2 0022     		movs	r2, #0
 1304 01f4 2F4B     		ldr	r3, .L59+100
 1305 01f6 FFF7FEFF 		bl	__aeabi_dmul
 1306              	.LVL92:
 1307 01fa CDE90201 		strd	r0, [sp, #8]
 1308 01fe 2046     		mov	r0, r4
 1309 0200 2D49     		ldr	r1, .L59+104
 1310 0202 4246     		mov	r2, r8
 1311 0204 4B46     		mov	r3, r9
 1312 0206 FFF7FEFF 		bl	sprintf
 1313              	.LVL93:
 223:Src/main.c    ****             sprintf(buffer2, "tot : %d / %d / %d / %d\n",tim4Tot, tim5Tot, consigneDroit, consigneG
 1314              		.loc 1 223 0
 1315 020a 184D     		ldr	r5, .L59+28
 1316              	.LVL94:
 1317 020c 2846     		mov	r0, r5
 1318 020e 2146     		mov	r1, r4
 1319 0210 3222     		movs	r2, #50
 1320 0212 4FF0FF33 		mov	r3, #-1
 1321 0216 FFF7FEFF 		bl	HAL_UART_Transmit
 1322              	.LVL95:
 224:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 1323              		.loc 1 224 0
 1324 021a 284C     		ldr	r4, .L59+108
 1325 021c 1E4B     		ldr	r3, .L59+72
ARM GAS  /tmp/cczYmwTC.s 			page 39


 1326 021e 1A68     		ldr	r2, [r3]
 1327 0220 1E4B     		ldr	r3, .L59+76
 1328 0222 1B68     		ldr	r3, [r3]
 1329 0224 3968     		ldr	r1, [r7]
 1330 0226 0091     		str	r1, [sp]
 1331 0228 2549     		ldr	r1, .L59+112
 1332 022a 0968     		ldr	r1, [r1]
 1333 022c 0191     		str	r1, [sp, #4]
 1334 022e 2046     		mov	r0, r4
 1335 0230 2449     		ldr	r1, .L59+116
 1336 0232 FFF7FEFF 		bl	sprintf
 1337              	.LVL96:
 225:Src/main.c    ****             debugCounter = 0;
 1338              		.loc 1 225 0
 1339 0236 2846     		mov	r0, r5
 1340 0238 2146     		mov	r1, r4
 1341 023a 3222     		movs	r2, #50
 1342 023c 4FF0FF33 		mov	r3, #-1
 1343 0240 FFF7FEFF 		bl	HAL_UART_Transmit
 1344              	.LVL97:
 226:Src/main.c    ****         }
 1345              		.loc 1 226 0
 1346 0244 0022     		movs	r2, #0
 1347 0246 174B     		ldr	r3, .L59+84
 1348 0248 1A60     		str	r2, [r3]
 1349 024a 33E7     		b	.L51
 1350              	.L60:
 1351 024c AFF30080 		.align	3
 1352              	.L59:
 1353 0250 5B423EE8 		.word	3896394331
 1354 0254 D9ACF03F 		.word	1072737497
 1355 0258 00000000 		.word	htim2
 1356 025c 00000000 		.word	htim3
 1357 0260 00000000 		.word	htim4
 1358 0264 00000000 		.word	htim5
 1359 0268 00000000 		.word	htim1
 1360 026c 00000000 		.word	huart2
 1361 0270 00000000 		.word	.LC0
 1362 0274 00080240 		.word	1073874944
 1363 0278 30000000 		.word	.LC1
 1364 027c 00080040 		.word	1073743872
 1365 0280 00000000 		.word	.LANCHOR0
 1366 0284 905F0100 		.word	90000
 1367 0288 4C000000 		.word	.LC2
 1368 028c 00000240 		.word	1073872896
 1369 0290 68000000 		.word	.LC3
 1370 0294 000C0040 		.word	1073744896
 1371 0298 00000000 		.word	.LANCHOR4
 1372 029c 00000000 		.word	.LANCHOR5
 1373 02a0 00000000 		.word	.LANCHOR6
 1374 02a4 00000000 		.word	.LANCHOR8
 1375 02a8 00000000 		.word	.LANCHOR9
 1376 02ac 00000000 		.word	.LANCHOR10
 1377 02b0 00000000 		.word	.LANCHOR3
 1378 02b4 00408F40 		.word	1083129856
 1379 02b8 84000000 		.word	.LC4
 1380 02bc 00000000 		.word	.LANCHOR11
ARM GAS  /tmp/cczYmwTC.s 			page 40


 1381 02c0 00000000 		.word	.LANCHOR7
 1382 02c4 98000000 		.word	.LC5
 1383 02c8 00000000 		.word	.LANCHOR1
 1384 02cc 00000000 		.word	.LANCHOR2
 1385              	.LBE8:
 1386              		.cfi_endproc
 1387              	.LFE123:
 1389              		.section	.text.Error_Handler,"ax",%progbits
 1390              		.align	2
 1391              		.global	Error_Handler
 1392              		.thumb
 1393              		.thumb_func
 1395              	Error_Handler:
 1396              	.LFB134:
 672:Src/main.c    **** 	}
 673:Src/main.c    **** }
 674:Src/main.c    **** 
 675:Src/main.c    **** 
 676:Src/main.c    **** /* USER CODE END 4 */
 677:Src/main.c    **** 
 678:Src/main.c    **** /**
 679:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 680:Src/main.c    ****   * @retval None
 681:Src/main.c    ****   */
 682:Src/main.c    **** void Error_Handler(void)
 683:Src/main.c    **** {
 1397              		.loc 1 683 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 0
 1400              		@ frame_needed = 0, uses_anonymous_args = 0
 1401              		@ link register save eliminated.
 1402 0000 7047     		bx	lr
 1403              		.cfi_endproc
 1404              	.LFE134:
 1406              		.global	debugMessageFrequency
 1407              		.global	fixedFrequency
 1408              		.global	buffer2
 1409              		.global	buffer
 1410              		.global	tim5Tot
 1411              		.global	tim4Tot
 1412              		.global	debugCounter
 1413              		.global	consigneGauche
 1414              		.global	consigneDroit
 1415              		.global	angle
 1416              		.global	positionY
 1417              		.global	positionX
 1418              		.comm	huart2,64,4
 1419              		.comm	htim5,60,4
 1420              		.comm	htim4,60,4
 1421              		.comm	htim3,60,4
 1422              		.comm	htim2,60,4
 1423              		.comm	htim1,60,4
 1424 0002 00BF     		.section	.bss.consigneDroit,"aw",%nobits
 1425              		.align	2
 1426              		.set	.LANCHOR6,. + 0
 1429              	consigneDroit:
 1430 0000 00000000 		.space	4
ARM GAS  /tmp/cczYmwTC.s 			page 41


 1431              		.section	.bss.positionX,"aw",%nobits
 1432              		.align	3
 1433              		.set	.LANCHOR1,. + 0
 1436              	positionX:
 1437 0000 00000000 		.space	8
 1437      00000000 
 1438              		.section	.bss.positionY,"aw",%nobits
 1439              		.align	3
 1440              		.set	.LANCHOR2,. + 0
 1443              	positionY:
 1444 0000 00000000 		.space	8
 1444      00000000 
 1445              		.section	.data.debugMessageFrequency,"aw",%progbits
 1446              		.align	2
 1447              		.set	.LANCHOR9,. + 0
 1450              	debugMessageFrequency:
 1451 0000 0A000000 		.word	10
 1452              		.section	.bss.tim4Tot,"aw",%nobits
 1453              		.align	2
 1454              		.set	.LANCHOR4,. + 0
 1457              	tim4Tot:
 1458 0000 00000000 		.space	4
 1459              		.section	.bss.tim5Tot,"aw",%nobits
 1460              		.align	2
 1461              		.set	.LANCHOR5,. + 0
 1464              	tim5Tot:
 1465 0000 00000000 		.space	4
 1466              		.section	.data.fixedFrequency,"aw",%progbits
 1467              		.align	2
 1468              		.set	.LANCHOR0,. + 0
 1471              	fixedFrequency:
 1472 0000 28000000 		.word	40
 1473              		.section	.rodata.str1.4,"aMS",%progbits,1
 1474              		.align	2
 1475              	.LC0:
 1476 0000 54697265 		.ascii	"Tire moi la tirette, que ma bobinette choisse\012\000"
 1476      206D6F69 
 1476      206C6120 
 1476      74697265 
 1476      7474652C 
 1477 002f 00       		.space	1
 1478              	.LC1:
 1479 0030 41747474 		.ascii	"Atttenzion, zest barti !\012\000"
 1479      656E7A69 
 1479      6F6E2C20 
 1479      7A657374 
 1479      20626172 
 1480 004a 0000     		.space	2
 1481              	.LC2:
 1482 004c 46696E20 		.ascii	"Fin de match -- Timeout \012\000"
 1482      6465206D 
 1482      61746368 
 1482      202D2D20 
 1482      54696D65 
 1483 0066 0000     		.space	2
 1484              	.LC3:
 1485 0068 46696E20 		.ascii	"Fin de match -- Obstacle \012\000"
ARM GAS  /tmp/cczYmwTC.s 			page 42


 1485      6465206D 
 1485      61746368 
 1485      202D2D20 
 1485      4F627374 
 1486 0083 00       		.space	1
 1487              	.LC4:
 1488 0084 706F7320 		.ascii	"pos : %f / %f / %f\012\000"
 1488      3A202566 
 1488      202F2025 
 1488      66202F20 
 1488      25660A00 
 1489              	.LC5:
 1490 0098 746F7420 		.ascii	"tot : %d / %d / %d / %d\012\000"
 1490      3A202564 
 1490      202F2025 
 1490      64202F20 
 1490      2564202F 
 1491              		.section	.bss.buffer2,"aw",%nobits
 1492              		.align	2
 1493              		.set	.LANCHOR11,. + 0
 1496              	buffer2:
 1497 0000 00000000 		.space	50
 1497      00000000 
 1497      00000000 
 1497      00000000 
 1497      00000000 
 1498              		.section	.bss.debugCounter,"aw",%nobits
 1499              		.align	2
 1500              		.set	.LANCHOR8,. + 0
 1503              	debugCounter:
 1504 0000 00000000 		.space	4
 1505              		.section	.bss.buffer,"aw",%nobits
 1506              		.align	2
 1507              		.set	.LANCHOR10,. + 0
 1510              	buffer:
 1511 0000 00000000 		.space	50
 1511      00000000 
 1511      00000000 
 1511      00000000 
 1511      00000000 
 1512              		.section	.bss.angle,"aw",%nobits
 1513              		.align	3
 1514              		.set	.LANCHOR3,. + 0
 1517              	angle:
 1518 0000 00000000 		.space	8
 1518      00000000 
 1519              		.section	.bss.consigneGauche,"aw",%nobits
 1520              		.align	2
 1521              		.set	.LANCHOR7,. + 0
 1524              	consigneGauche:
 1525 0000 00000000 		.space	4
 1526              		.text
 1527              	.Letext0:
 1528              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1529              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1530              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1531              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
ARM GAS  /tmp/cczYmwTC.s 			page 43


 1532              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1533              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1534              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1535              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1536              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1537              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1538              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1539              		.file 13 "<built-in>"
 1540              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 1541              		.file 15 "Inc/main.h"
 1542              		.file 16 "Inc/assert.h"
 1543              		.file 17 "/usr/include/newlib/stdio.h"
 1544              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cczYmwTC.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cczYmwTC.s:21     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cczYmwTC.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cczYmwTC.s:207    .text.MX_GPIO_Init:0000000000000108 $d
     /tmp/cczYmwTC.s:216    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cczYmwTC.s:220    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cczYmwTC.s:259    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/cczYmwTC.s:265    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cczYmwTC.s:269    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cczYmwTC.s:350    .text.MX_TIM2_Init:000000000000005c $d
                            *COM*:000000000000003c htim2
     /tmp/cczYmwTC.s:355    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cczYmwTC.s:359    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cczYmwTC.s:440    .text.MX_TIM3_Init:000000000000005c $d
                            *COM*:000000000000003c htim3
     /tmp/cczYmwTC.s:446    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/cczYmwTC.s:450    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/cczYmwTC.s:522    .text.MX_TIM4_Init:000000000000004c $d
                            *COM*:000000000000003c htim4
     /tmp/cczYmwTC.s:528    .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/cczYmwTC.s:532    .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/cczYmwTC.s:604    .text.MX_TIM5_Init:000000000000004c $d
                            *COM*:000000000000003c htim5
     /tmp/cczYmwTC.s:610    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/cczYmwTC.s:614    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/cczYmwTC.s:731    .text.MX_TIM1_Init:0000000000000090 $d
                            *COM*:000000000000003c htim1
     /tmp/cczYmwTC.s:737    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cczYmwTC.s:742    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cczYmwTC.s:856    .text.SystemClock_Config:000000000000009c $d
     /tmp/cczYmwTC.s:862    .text.moteurDroit:0000000000000000 $t
     /tmp/cczYmwTC.s:867    .text.moteurDroit:0000000000000000 moteurDroit
     /tmp/cczYmwTC.s:921    .text.moteurDroit:0000000000000044 $d
     /tmp/cczYmwTC.s:927    .text.moteurGauche:0000000000000000 $t
     /tmp/cczYmwTC.s:932    .text.moteurGauche:0000000000000000 moteurGauche
     /tmp/cczYmwTC.s:986    .text.moteurGauche:0000000000000040 $d
     /tmp/cczYmwTC.s:995    .text.main:0000000000000000 $t
     /tmp/cczYmwTC.s:1000   .text.main:0000000000000000 main
     /tmp/cczYmwTC.s:1353   .text.main:0000000000000250 $d
     /tmp/cczYmwTC.s:1390   .text.Error_Handler:0000000000000000 $t
     /tmp/cczYmwTC.s:1395   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cczYmwTC.s:1450   .data.debugMessageFrequency:0000000000000000 debugMessageFrequency
     /tmp/cczYmwTC.s:1471   .data.fixedFrequency:0000000000000000 fixedFrequency
     /tmp/cczYmwTC.s:1496   .bss.buffer2:0000000000000000 buffer2
     /tmp/cczYmwTC.s:1510   .bss.buffer:0000000000000000 buffer
     /tmp/cczYmwTC.s:1464   .bss.tim5Tot:0000000000000000 tim5Tot
     /tmp/cczYmwTC.s:1457   .bss.tim4Tot:0000000000000000 tim4Tot
     /tmp/cczYmwTC.s:1503   .bss.debugCounter:0000000000000000 debugCounter
     /tmp/cczYmwTC.s:1524   .bss.consigneGauche:0000000000000000 consigneGauche
     /tmp/cczYmwTC.s:1429   .bss.consigneDroit:0000000000000000 consigneDroit
     /tmp/cczYmwTC.s:1517   .bss.angle:0000000000000000 angle
     /tmp/cczYmwTC.s:1443   .bss.positionY:0000000000000000 positionY
     /tmp/cczYmwTC.s:1436   .bss.positionX:0000000000000000 positionX
     /tmp/cczYmwTC.s:1425   .bss.consigneDroit:0000000000000000 $d
     /tmp/cczYmwTC.s:1432   .bss.positionX:0000000000000000 $d
ARM GAS  /tmp/cczYmwTC.s 			page 45


     /tmp/cczYmwTC.s:1439   .bss.positionY:0000000000000000 $d
     /tmp/cczYmwTC.s:1446   .data.debugMessageFrequency:0000000000000000 $d
     /tmp/cczYmwTC.s:1453   .bss.tim4Tot:0000000000000000 $d
     /tmp/cczYmwTC.s:1460   .bss.tim5Tot:0000000000000000 $d
     /tmp/cczYmwTC.s:1467   .data.fixedFrequency:0000000000000000 $d
     /tmp/cczYmwTC.s:1474   .rodata.str1.4:0000000000000000 $d
     /tmp/cczYmwTC.s:1492   .bss.buffer2:0000000000000000 $d
     /tmp/cczYmwTC.s:1499   .bss.debugCounter:0000000000000000 $d
     /tmp/cczYmwTC.s:1506   .bss.buffer:0000000000000000 $d
     /tmp/cczYmwTC.s:1513   .bss.angle:0000000000000000 $d
     /tmp/cczYmwTC.s:1520   .bss.consigneGauche:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_TIM_Encoder_Init
HAL_TIMEx_ConfigBreakDeadTime
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_i2d
__aeabi_dmul
__aeabi_d2iz
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_Encoder_Start
HAL_UART_Transmit
HAL_GPIO_ReadPin
HAL_GetTick
HAL_Delay
updatePos
stateMachine
sprintf
