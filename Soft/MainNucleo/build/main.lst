ARM GAS  /tmp/ccGrxFJK.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB131:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccGrxFJK.s 			page 2


  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** #include "assert.h"
  47:Src/main.c    **** /* USER CODE END Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PTD */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PTD */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PD */
  56:Src/main.c    **** 
  57:Src/main.c    **** #define _DEBUG 1       //print all the debug info
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PD */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  62:Src/main.c    **** /* USER CODE BEGIN PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PM */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  67:Src/main.c    **** TIM_HandleTypeDef htim1;
  68:Src/main.c    **** TIM_HandleTypeDef htim2;
  69:Src/main.c    **** TIM_HandleTypeDef htim3;
  70:Src/main.c    **** TIM_HandleTypeDef htim4;
  71:Src/main.c    **** TIM_HandleTypeDef htim5;
  72:Src/main.c    **** 
  73:Src/main.c    **** UART_HandleTypeDef huart2;
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PV */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE END PV */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  80:Src/main.c    **** void SystemClock_Config(void);
  81:Src/main.c    **** static void MX_GPIO_Init(void);
  82:Src/main.c    **** static void MX_USART2_UART_Init(void);
  83:Src/main.c    **** static void MX_TIM2_Init(void);
  84:Src/main.c    **** static void MX_TIM3_Init(void);
  85:Src/main.c    **** static void MX_TIM4_Init(void);
  86:Src/main.c    **** static void MX_TIM5_Init(void);
  87:Src/main.c    **** static void MX_TIM1_Init(void);
  88:Src/main.c    **** /* USER CODE BEGIN PFP */
ARM GAS  /tmp/ccGrxFJK.s 			page 3


  89:Src/main.c    **** 
  90:Src/main.c    **** /* USER CODE END PFP */
  91:Src/main.c    **** 
  92:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  93:Src/main.c    **** /* USER CODE BEGIN 0 */
  94:Src/main.c    **** double positionX = 0.0;
  95:Src/main.c    **** double positionY = 0.0;
  96:Src/main.c    **** double angle = 0.0;
  97:Src/main.c    **** 
  98:Src/main.c    **** int consigneDroit = 0;
  99:Src/main.c    **** int consigneGauche = 0;
 100:Src/main.c    **** 
 101:Src/main.c    **** int debugCounter = 0;
 102:Src/main.c    **** 
 103:Src/main.c    **** int tim4Tot= 0;
 104:Src/main.c    **** int tim5Tot=0;
 105:Src/main.c    **** 
 106:Src/main.c    **** char buffer[50] = "";
 107:Src/main.c    **** char buffer2[50] = "";
 108:Src/main.c    **** 
 109:Src/main.c    **** int fixedFrequency = 40;//frequency of the loop in ms
 110:Src/main.c    **** int debugMessageFrequency = 10;//in number of loop
 111:Src/main.c    **** 
 112:Src/main.c    **** /* USER CODE END 0 */
 113:Src/main.c    **** 
 114:Src/main.c    **** /**
 115:Src/main.c    ****   * @brief  The application entry point.
 116:Src/main.c    ****   * @retval int
 117:Src/main.c    ****   */
 118:Src/main.c    **** int main(void)
 119:Src/main.c    **** {
 120:Src/main.c    ****   /* USER CODE BEGIN 1 */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END 1 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 127:Src/main.c    ****   HAL_Init();
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE BEGIN Init */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE END Init */
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* Configure the system clock */
 134:Src/main.c    ****   SystemClock_Config();
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE END SysInit */
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* Initialize all configured peripherals */
 141:Src/main.c    ****   MX_GPIO_Init();
 142:Src/main.c    ****   MX_USART2_UART_Init();
 143:Src/main.c    ****   MX_TIM2_Init();
 144:Src/main.c    ****   MX_TIM3_Init();
 145:Src/main.c    ****   MX_TIM4_Init();
ARM GAS  /tmp/ccGrxFJK.s 			page 4


 146:Src/main.c    ****   MX_TIM5_Init();
 147:Src/main.c    ****   MX_TIM1_Init();
 148:Src/main.c    ****   /* USER CODE BEGIN 2 */
 149:Src/main.c    ****   HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_2);
 150:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 151:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 152:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 153:Src/main.c    ****   HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_4);
 154:Src/main.c    ****   /* USER CODE END 2 */
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* Infinite loop */
 157:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 158:Src/main.c    ****   HAL_GPIO_WritePin(VaccumPump_GPIO_Port, VaccumPump_Pin, GPIO_PIN_SET);
 159:Src/main.c    ****   servoPos(1500);
 160:Src/main.c    ****   
 161:Src/main.c    ****   HAL_UART_Transmit(&huart2, "Tire moi la tirette, que ma bobinette choisse\n", sizeof("Tire moi la
 162:Src/main.c    ****   while(HAL_GPIO_ReadPin(Tirette_GPIO_Port, Tirette_Pin))
 163:Src/main.c    ****   {}
 164:Src/main.c    ****   uint32_t matchStartTicks = HAL_GetTick();
 165:Src/main.c    ****     
 166:Src/main.c    ****   HAL_UART_Transmit(&huart2, "Atttenzion, zest barti !\n", sizeof("Atttenzion, zest barti !\n"), HA
 167:Src/main.c    ****   HAL_Delay(1000);
 168:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick(); //init the time tracking variable for the fixed frequency PID 
 169:Src/main.c    **** 
 170:Src/main.c    **** 
 171:Src/main.c    **** 
 172:Src/main.c    ****   //center the encoder values
 173:Src/main.c    ****   TIM4->CNT = 30000;
 174:Src/main.c    ****   TIM5->CNT = 30000;
 175:Src/main.c    ****   
 176:Src/main.c    ****   
 177:Src/main.c    **** 
 178:Src/main.c    **** 
 179:Src/main.c    ****   while (1)
 180:Src/main.c    ****   {
 181:Src/main.c    ****     while(HAL_GetTick() - oldTicks < fixedFrequency)
 182:Src/main.c    ****     {HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_SET);}
 183:Src/main.c    ****     HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 184:Src/main.c    ****     oldTicks = HAL_GetTick();
 185:Src/main.c    ****     
 186:Src/main.c    ****     if (HAL_GetTick() - matchStartTicks > 90000) //make sure the robot stops after 100seconds (actu
 187:Src/main.c    ****     {
 188:Src/main.c    ****         HAL_UART_Transmit(&huart2, "Fin de match -- Timeout \n", sizeof("Fin de match -- Timeout \n
 189:Src/main.c    ****         moteurGauche(0);
 190:Src/main.c    **** 		moteurDroit(0);
 191:Src/main.c    ****         while(1){}
 192:Src/main.c    ****     }
 193:Src/main.c    ****     /*
 194:Src/main.c    ****     if (HAL_GPIO_ReadPin(ObstacleDetection_GPIO_Port, ObstacleDetection_Pin))
 195:Src/main.c    ****     {
 196:Src/main.c    ****         HAL_UART_Transmit(&huart2, "Fin de match -- Obstacle \n", sizeof("Fin de match -- Obstacle 
 197:Src/main.c    ****         moteurGauche(0);
 198:Src/main.c    **** 		moteurDroit(0);
 199:Src/main.c    ****         while(1){}
 200:Src/main.c    ****     }
 201:Src/main.c    ****     */
 202:Src/main.c    ****     
ARM GAS  /tmp/ccGrxFJK.s 			page 5


 203:Src/main.c    ****     int tim4 = (TIM4->CNT-30000);
 204:Src/main.c    ****     int tim5 = (-TIM5->CNT+30000);
 205:Src/main.c    ****     TIM4->CNT = 30000;
 206:Src/main.c    ****     TIM5->CNT = 30000;
 207:Src/main.c    ****     
 208:Src/main.c    ****     tim5 *= 1.0422;
 209:Src/main.c    ****     
 210:Src/main.c    ****     updatePos(tim4, tim5, &positionX, &positionY, &angle);
 211:Src/main.c    ****     tim4Tot += tim4;//for debug
 212:Src/main.c    ****     tim5Tot += tim5;
 213:Src/main.c    ****     
 214:Src/main.c    ****     stateMachine(&consigneDroit, &consigneGauche, positionX, positionY, angle, tim4, tim5, huart2);
 215:Src/main.c    ****     
 216:Src/main.c    ****     moteurGauche(consigneGauche);
 217:Src/main.c    ****     moteurDroit(consigneDroit);
 218:Src/main.c    ****     
 219:Src/main.c    ****     
 220:Src/main.c    ****     debugCounter += 1;
 221:Src/main.c    ****     if (_DEBUG == 1)
 222:Src/main.c    ****     {
 223:Src/main.c    ****         if (debugCounter == debugMessageFrequency)
 224:Src/main.c    ****         {
 225:Src/main.c    ****             sprintf(buffer, "pos : %f / %f / %f\n",positionX, positionY, (angle*1000));
 226:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 227:Src/main.c    ****             sprintf(buffer2, "tot : %d / %d / %d / %d\n",tim4Tot, tim5Tot, consigneDroit, consigneG
 228:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 229:Src/main.c    ****             debugCounter = 0;
 230:Src/main.c    ****         }
 231:Src/main.c    ****     }
 232:Src/main.c    **** 
 233:Src/main.c    ****     /* USER CODE END WHILE */
 234:Src/main.c    **** 
 235:Src/main.c    ****     /* USER CODE BEGIN 3 */
 236:Src/main.c    ****   }
 237:Src/main.c    ****   /* USER CODE END 3 */
 238:Src/main.c    **** }
 239:Src/main.c    **** 
 240:Src/main.c    **** /**
 241:Src/main.c    ****   * @brief System Clock Configuration
 242:Src/main.c    ****   * @retval None
 243:Src/main.c    ****   */
 244:Src/main.c    **** void SystemClock_Config(void)
 245:Src/main.c    **** {
 246:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 247:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 248:Src/main.c    **** 
 249:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 250:Src/main.c    ****   */
 251:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 252:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 253:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 254:Src/main.c    ****   */
 255:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 256:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 257:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
ARM GAS  /tmp/ccGrxFJK.s 			page 6


 260:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 261:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 262:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 263:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 264:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 265:Src/main.c    ****   {
 266:Src/main.c    ****     Error_Handler();
 267:Src/main.c    ****   }
 268:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 269:Src/main.c    ****   */
 270:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 271:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 272:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 273:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 274:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 275:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 276:Src/main.c    **** 
 277:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 278:Src/main.c    ****   {
 279:Src/main.c    ****     Error_Handler();
 280:Src/main.c    ****   }
 281:Src/main.c    **** }
 282:Src/main.c    **** 
 283:Src/main.c    **** /**
 284:Src/main.c    ****   * @brief TIM1 Initialization Function
 285:Src/main.c    ****   * @param None
 286:Src/main.c    ****   * @retval None
 287:Src/main.c    ****   */
 288:Src/main.c    **** static void MX_TIM1_Init(void)
 289:Src/main.c    **** {
 290:Src/main.c    **** 
 291:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 292:Src/main.c    **** 
 293:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 294:Src/main.c    **** 
 295:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 296:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 297:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 298:Src/main.c    **** 
 299:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 300:Src/main.c    **** 
 301:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 302:Src/main.c    ****   htim1.Instance = TIM1;
 303:Src/main.c    ****   htim1.Init.Prescaler = 72;
 304:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 305:Src/main.c    ****   htim1.Init.Period = 20000;
 306:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 307:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 308:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 309:Src/main.c    ****   {
 310:Src/main.c    ****     Error_Handler();
 311:Src/main.c    ****   }
 312:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 313:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 314:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 315:Src/main.c    ****   {
 316:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccGrxFJK.s 			page 7


 317:Src/main.c    ****   }
 318:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 319:Src/main.c    ****   sConfigOC.Pulse = 1500;
 320:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 321:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 322:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 323:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 324:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 325:Src/main.c    ****   {
 326:Src/main.c    ****     Error_Handler();
 327:Src/main.c    ****   }
 328:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 329:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 330:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 331:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 332:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 333:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 334:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 335:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 336:Src/main.c    ****   {
 337:Src/main.c    ****     Error_Handler();
 338:Src/main.c    ****   }
 339:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 340:Src/main.c    **** 
 341:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 342:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 343:Src/main.c    **** 
 344:Src/main.c    **** }
 345:Src/main.c    **** 
 346:Src/main.c    **** /**
 347:Src/main.c    ****   * @brief TIM2 Initialization Function
 348:Src/main.c    ****   * @param None
 349:Src/main.c    ****   * @retval None
 350:Src/main.c    ****   */
 351:Src/main.c    **** static void MX_TIM2_Init(void)
 352:Src/main.c    **** {
 353:Src/main.c    **** 
 354:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 355:Src/main.c    **** 
 356:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 357:Src/main.c    **** 
 358:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 359:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 360:Src/main.c    **** 
 361:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 362:Src/main.c    **** 
 363:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 364:Src/main.c    ****   htim2.Instance = TIM2;
 365:Src/main.c    ****   htim2.Init.Prescaler = 0;
 366:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 367:Src/main.c    ****   htim2.Init.Period = 10000;
 368:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 369:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 370:Src/main.c    ****   {
 371:Src/main.c    ****     Error_Handler();
 372:Src/main.c    ****   }
 373:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
ARM GAS  /tmp/ccGrxFJK.s 			page 8


 374:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 375:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 376:Src/main.c    ****   {
 377:Src/main.c    ****     Error_Handler();
 378:Src/main.c    ****   }
 379:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 380:Src/main.c    ****   sConfigOC.Pulse = 0;
 381:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 382:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 383:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 384:Src/main.c    ****   {
 385:Src/main.c    ****     Error_Handler();
 386:Src/main.c    ****   }
 387:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 388:Src/main.c    **** 
 389:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 390:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 391:Src/main.c    **** 
 392:Src/main.c    **** }
 393:Src/main.c    **** 
 394:Src/main.c    **** /**
 395:Src/main.c    ****   * @brief TIM3 Initialization Function
 396:Src/main.c    ****   * @param None
 397:Src/main.c    ****   * @retval None
 398:Src/main.c    ****   */
 399:Src/main.c    **** static void MX_TIM3_Init(void)
 400:Src/main.c    **** {
 401:Src/main.c    **** 
 402:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 403:Src/main.c    **** 
 404:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 405:Src/main.c    **** 
 406:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 407:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 410:Src/main.c    **** 
 411:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 412:Src/main.c    ****   htim3.Instance = TIM3;
 413:Src/main.c    ****   htim3.Init.Prescaler = 0;
 414:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 415:Src/main.c    ****   htim3.Init.Period = 10000;
 416:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 417:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 418:Src/main.c    ****   {
 419:Src/main.c    ****     Error_Handler();
 420:Src/main.c    ****   }
 421:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 422:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 423:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 424:Src/main.c    ****   {
 425:Src/main.c    ****     Error_Handler();
 426:Src/main.c    ****   }
 427:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 428:Src/main.c    ****   sConfigOC.Pulse = 0;
 429:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 430:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
ARM GAS  /tmp/ccGrxFJK.s 			page 9


 431:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 432:Src/main.c    ****   {
 433:Src/main.c    ****     Error_Handler();
 434:Src/main.c    ****   }
 435:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 436:Src/main.c    **** 
 437:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 438:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 439:Src/main.c    **** 
 440:Src/main.c    **** }
 441:Src/main.c    **** 
 442:Src/main.c    **** /**
 443:Src/main.c    ****   * @brief TIM4 Initialization Function
 444:Src/main.c    ****   * @param None
 445:Src/main.c    ****   * @retval None
 446:Src/main.c    ****   */
 447:Src/main.c    **** static void MX_TIM4_Init(void)
 448:Src/main.c    **** {
 449:Src/main.c    **** 
 450:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 451:Src/main.c    **** 
 452:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 453:Src/main.c    **** 
 454:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 455:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 456:Src/main.c    **** 
 457:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 458:Src/main.c    **** 
 459:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 460:Src/main.c    ****   htim4.Instance = TIM4;
 461:Src/main.c    ****   htim4.Init.Prescaler = 0;
 462:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 463:Src/main.c    ****   htim4.Init.Period = 0xffff;
 464:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 465:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 466:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 467:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 468:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 469:Src/main.c    ****   sConfig.IC1Filter = 5;
 470:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 471:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 472:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 473:Src/main.c    ****   sConfig.IC2Filter = 5;
 474:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 475:Src/main.c    ****   {
 476:Src/main.c    ****     Error_Handler();
 477:Src/main.c    ****   }
 478:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 479:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 480:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 481:Src/main.c    ****   {
 482:Src/main.c    ****     Error_Handler();
 483:Src/main.c    ****   }
 484:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 485:Src/main.c    **** 
 486:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 487:Src/main.c    **** 
ARM GAS  /tmp/ccGrxFJK.s 			page 10


 488:Src/main.c    **** }
 489:Src/main.c    **** 
 490:Src/main.c    **** /**
 491:Src/main.c    ****   * @brief TIM5 Initialization Function
 492:Src/main.c    ****   * @param None
 493:Src/main.c    ****   * @retval None
 494:Src/main.c    ****   */
 495:Src/main.c    **** static void MX_TIM5_Init(void)
 496:Src/main.c    **** {
 497:Src/main.c    **** 
 498:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 0 */
 499:Src/main.c    **** 
 500:Src/main.c    ****   /* USER CODE END TIM5_Init 0 */
 501:Src/main.c    **** 
 502:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 503:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 504:Src/main.c    **** 
 505:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 1 */
 506:Src/main.c    **** 
 507:Src/main.c    ****   /* USER CODE END TIM5_Init 1 */
 508:Src/main.c    ****   htim5.Instance = TIM5;
 509:Src/main.c    ****   htim5.Init.Prescaler = 0;
 510:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 511:Src/main.c    ****   htim5.Init.Period = 0xffff;
 512:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 513:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 514:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 515:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 516:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 517:Src/main.c    ****   sConfig.IC1Filter = 5;
 518:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 519:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 520:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 521:Src/main.c    ****   sConfig.IC2Filter = 5;
 522:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 523:Src/main.c    ****   {
 524:Src/main.c    ****     Error_Handler();
 525:Src/main.c    ****   }
 526:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 527:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 528:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 529:Src/main.c    ****   {
 530:Src/main.c    ****     Error_Handler();
 531:Src/main.c    ****   }
 532:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 2 */
 533:Src/main.c    **** 
 534:Src/main.c    ****   /* USER CODE END TIM5_Init 2 */
 535:Src/main.c    **** 
 536:Src/main.c    **** }
 537:Src/main.c    **** 
 538:Src/main.c    **** /**
 539:Src/main.c    ****   * @brief USART2 Initialization Function
 540:Src/main.c    ****   * @param None
 541:Src/main.c    ****   * @retval None
 542:Src/main.c    ****   */
 543:Src/main.c    **** static void MX_USART2_UART_Init(void)
 544:Src/main.c    **** {
ARM GAS  /tmp/ccGrxFJK.s 			page 11


 545:Src/main.c    **** 
 546:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 547:Src/main.c    **** 
 548:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 549:Src/main.c    **** 
 550:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 551:Src/main.c    **** 
 552:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 553:Src/main.c    ****   huart2.Instance = USART2;
 554:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 555:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 556:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 557:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 558:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 559:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 560:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 561:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 562:Src/main.c    ****   {
 563:Src/main.c    ****     Error_Handler();
 564:Src/main.c    ****   }
 565:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 566:Src/main.c    **** 
 567:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 568:Src/main.c    **** 
 569:Src/main.c    **** }
 570:Src/main.c    **** 
 571:Src/main.c    **** /**
 572:Src/main.c    ****   * @brief GPIO Initialization Function
 573:Src/main.c    ****   * @param None
 574:Src/main.c    ****   * @retval None
 575:Src/main.c    ****   */
 576:Src/main.c    **** static void MX_GPIO_Init(void)
 577:Src/main.c    **** {
  28              		.loc 1 577 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 24
  35              		.cfi_offset 4, -24
  36              		.cfi_offset 5, -20
  37              		.cfi_offset 6, -16
  38              		.cfi_offset 7, -12
  39              		.cfi_offset 8, -8
  40              		.cfi_offset 14, -4
  41 0004 8AB0     		sub	sp, sp, #40
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 64
 578:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  44              		.loc 1 578 0
  45 0006 0024     		movs	r4, #0
  46 0008 0594     		str	r4, [sp, #20]
  47 000a 0694     		str	r4, [sp, #24]
  48 000c 0794     		str	r4, [sp, #28]
  49 000e 0894     		str	r4, [sp, #32]
  50 0010 0994     		str	r4, [sp, #36]
ARM GAS  /tmp/ccGrxFJK.s 			page 12


  51              	.LBB2:
 579:Src/main.c    **** 
 580:Src/main.c    ****   /* GPIO Ports Clock Enable */
 581:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  52              		.loc 1 581 0
  53 0012 0194     		str	r4, [sp, #4]
  54 0014 3B4B     		ldr	r3, .L3
  55 0016 1A6B     		ldr	r2, [r3, #48]
  56 0018 42F00402 		orr	r2, r2, #4
  57 001c 1A63     		str	r2, [r3, #48]
  58 001e 1A6B     		ldr	r2, [r3, #48]
  59 0020 02F00402 		and	r2, r2, #4
  60 0024 0192     		str	r2, [sp, #4]
  61 0026 019A     		ldr	r2, [sp, #4]
  62              	.LBE2:
  63              	.LBB3:
 582:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  64              		.loc 1 582 0
  65 0028 0294     		str	r4, [sp, #8]
  66 002a 1A6B     		ldr	r2, [r3, #48]
  67 002c 42F08002 		orr	r2, r2, #128
  68 0030 1A63     		str	r2, [r3, #48]
  69 0032 1A6B     		ldr	r2, [r3, #48]
  70 0034 02F08002 		and	r2, r2, #128
  71 0038 0292     		str	r2, [sp, #8]
  72 003a 029A     		ldr	r2, [sp, #8]
  73              	.LBE3:
  74              	.LBB4:
 583:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  75              		.loc 1 583 0
  76 003c 0394     		str	r4, [sp, #12]
  77 003e 1A6B     		ldr	r2, [r3, #48]
  78 0040 42F00102 		orr	r2, r2, #1
  79 0044 1A63     		str	r2, [r3, #48]
  80 0046 1A6B     		ldr	r2, [r3, #48]
  81 0048 02F00102 		and	r2, r2, #1
  82 004c 0392     		str	r2, [sp, #12]
  83 004e 039A     		ldr	r2, [sp, #12]
  84              	.LBE4:
  85              	.LBB5:
 584:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  86              		.loc 1 584 0
  87 0050 0494     		str	r4, [sp, #16]
  88 0052 1A6B     		ldr	r2, [r3, #48]
  89 0054 42F00202 		orr	r2, r2, #2
  90 0058 1A63     		str	r2, [r3, #48]
  91 005a 1B6B     		ldr	r3, [r3, #48]
  92 005c 03F00203 		and	r3, r3, #2
  93 0060 0493     		str	r3, [sp, #16]
  94 0062 049B     		ldr	r3, [sp, #16]
  95              	.LBE5:
 585:Src/main.c    **** 
 586:Src/main.c    ****   /*Configure GPIO pin Output Level */
 587:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, VaccumPump_Pin|DebugTiming_Pin, GPIO_PIN_RESET);
  96              		.loc 1 587 0
  97 0064 284D     		ldr	r5, .L3+4
  98 0066 2846     		mov	r0, r5
ARM GAS  /tmp/ccGrxFJK.s 			page 13


  99 0068 1121     		movs	r1, #17
 100 006a 2246     		mov	r2, r4
 101 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 102              	.LVL0:
 588:Src/main.c    **** 
 589:Src/main.c    ****   /*Configure GPIO pin Output Level */
 590:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR1_Pin, GPIO_PIN_RESET);
 103              		.loc 1 590 0
 104 0070 264F     		ldr	r7, .L3+8
 105 0072 3846     		mov	r0, r7
 106 0074 4FF48461 		mov	r1, #1056
 107 0078 2246     		mov	r2, r4
 108 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 109              	.LVL1:
 591:Src/main.c    **** 
 592:Src/main.c    ****   /*Configure GPIO pin Output Level */
 593:Src/main.c    ****   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 110              		.loc 1 593 0
 111 007e DFF89480 		ldr	r8, .L3+16
 112 0082 4046     		mov	r0, r8
 113 0084 2021     		movs	r1, #32
 114 0086 2246     		mov	r2, r4
 115 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 116              	.LVL2:
 594:Src/main.c    **** 
 595:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 596:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 117              		.loc 1 596 0
 118 008c 4FF40053 		mov	r3, #8192
 119 0090 0593     		str	r3, [sp, #20]
 597:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 120              		.loc 1 597 0
 121 0092 1F4B     		ldr	r3, .L3+12
 122 0094 0693     		str	r3, [sp, #24]
 598:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 123              		.loc 1 598 0
 124 0096 0794     		str	r4, [sp, #28]
 599:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 125              		.loc 1 599 0
 126 0098 2846     		mov	r0, r5
 127 009a 05A9     		add	r1, sp, #20
 128 009c FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL3:
 600:Src/main.c    **** 
 601:Src/main.c    ****   /*Configure GPIO pins : VaccumPump_Pin DebugTiming_Pin */
 602:Src/main.c    ****   GPIO_InitStruct.Pin = VaccumPump_Pin|DebugTiming_Pin;
 130              		.loc 1 602 0
 131 00a0 1123     		movs	r3, #17
 132 00a2 0593     		str	r3, [sp, #20]
 603:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 133              		.loc 1 603 0
 134 00a4 0126     		movs	r6, #1
 135 00a6 0696     		str	r6, [sp, #24]
 604:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 604 0
 137 00a8 0794     		str	r4, [sp, #28]
 605:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccGrxFJK.s 			page 14


 138              		.loc 1 605 0
 139 00aa 0894     		str	r4, [sp, #32]
 606:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 140              		.loc 1 606 0
 141 00ac 2846     		mov	r0, r5
 142 00ae 05A9     		add	r1, sp, #20
 143 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 144              	.LVL4:
 607:Src/main.c    **** 
 608:Src/main.c    ****   /*Configure GPIO pin : ObstacleDetection_Pin */
 609:Src/main.c    ****   GPIO_InitStruct.Pin = ObstacleDetection_Pin;
 145              		.loc 1 609 0
 146 00b4 1023     		movs	r3, #16
 147 00b6 0593     		str	r3, [sp, #20]
 610:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 148              		.loc 1 610 0
 149 00b8 0694     		str	r4, [sp, #24]
 611:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 150              		.loc 1 611 0
 151 00ba 0223     		movs	r3, #2
 152 00bc 0793     		str	r3, [sp, #28]
 612:Src/main.c    ****   HAL_GPIO_Init(ObstacleDetection_GPIO_Port, &GPIO_InitStruct);
 153              		.loc 1 612 0
 154 00be 3846     		mov	r0, r7
 155 00c0 05A9     		add	r1, sp, #20
 156 00c2 FFF7FEFF 		bl	HAL_GPIO_Init
 157              	.LVL5:
 613:Src/main.c    **** 
 614:Src/main.c    ****   /*Configure GPIO pins : LD2_Pin DIR1_Pin */
 615:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin|DIR1_Pin;
 158              		.loc 1 615 0
 159 00c6 4FF48463 		mov	r3, #1056
 160 00ca 0593     		str	r3, [sp, #20]
 616:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 161              		.loc 1 616 0
 162 00cc 0696     		str	r6, [sp, #24]
 617:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 163              		.loc 1 617 0
 164 00ce 0794     		str	r4, [sp, #28]
 618:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 165              		.loc 1 618 0
 166 00d0 0894     		str	r4, [sp, #32]
 619:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 167              		.loc 1 619 0
 168 00d2 3846     		mov	r0, r7
 169 00d4 05A9     		add	r1, sp, #20
 170 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 171              	.LVL6:
 620:Src/main.c    **** 
 621:Src/main.c    ****   /*Configure GPIO pin : Tirette_Pin */
 622:Src/main.c    ****   GPIO_InitStruct.Pin = Tirette_Pin;
 172              		.loc 1 622 0
 173 00da 4FF48053 		mov	r3, #4096
 174 00de 0593     		str	r3, [sp, #20]
 623:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 175              		.loc 1 623 0
 176 00e0 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccGrxFJK.s 			page 15


 624:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 177              		.loc 1 624 0
 178 00e2 0794     		str	r4, [sp, #28]
 625:Src/main.c    ****   HAL_GPIO_Init(Tirette_GPIO_Port, &GPIO_InitStruct);
 179              		.loc 1 625 0
 180 00e4 2846     		mov	r0, r5
 181 00e6 05A9     		add	r1, sp, #20
 182 00e8 FFF7FEFF 		bl	HAL_GPIO_Init
 183              	.LVL7:
 626:Src/main.c    **** 
 627:Src/main.c    ****   /*Configure GPIO pin : DIR2_Pin */
 628:Src/main.c    ****   GPIO_InitStruct.Pin = DIR2_Pin;
 184              		.loc 1 628 0
 185 00ec 2023     		movs	r3, #32
 186 00ee 0593     		str	r3, [sp, #20]
 629:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 187              		.loc 1 629 0
 188 00f0 0696     		str	r6, [sp, #24]
 630:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 189              		.loc 1 630 0
 190 00f2 0794     		str	r4, [sp, #28]
 631:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 191              		.loc 1 631 0
 192 00f4 0894     		str	r4, [sp, #32]
 632:Src/main.c    ****   HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 193              		.loc 1 632 0
 194 00f6 4046     		mov	r0, r8
 195 00f8 05A9     		add	r1, sp, #20
 196 00fa FFF7FEFF 		bl	HAL_GPIO_Init
 197              	.LVL8:
 633:Src/main.c    **** 
 634:Src/main.c    **** }
 198              		.loc 1 634 0
 199 00fe 0AB0     		add	sp, sp, #40
 200              	.LCFI2:
 201              		.cfi_def_cfa_offset 24
 202              		@ sp needed
 203 0100 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 204              	.L4:
 205              		.align	2
 206              	.L3:
 207 0104 00380240 		.word	1073887232
 208 0108 00080240 		.word	1073874944
 209 010c 00000240 		.word	1073872896
 210 0110 00002110 		.word	270598144
 211 0114 00040240 		.word	1073873920
 212              		.cfi_endproc
 213              	.LFE131:
 215              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 216              		.align	2
 217              		.thumb
 218              		.thumb_func
 220              	MX_USART2_UART_Init:
 221              	.LFB130:
 544:Src/main.c    **** 
 222              		.loc 1 544 0
 223              		.cfi_startproc
ARM GAS  /tmp/ccGrxFJK.s 			page 16


 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226 0000 08B5     		push	{r3, lr}
 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 3, -8
 230              		.cfi_offset 14, -4
 553:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 231              		.loc 1 553 0
 232 0002 0848     		ldr	r0, .L7
 233 0004 084B     		ldr	r3, .L7+4
 234 0006 0360     		str	r3, [r0]
 554:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 235              		.loc 1 554 0
 236 0008 4FF4E133 		mov	r3, #115200
 237 000c 4360     		str	r3, [r0, #4]
 555:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 238              		.loc 1 555 0
 239 000e 0023     		movs	r3, #0
 240 0010 8360     		str	r3, [r0, #8]
 556:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 241              		.loc 1 556 0
 242 0012 C360     		str	r3, [r0, #12]
 557:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 243              		.loc 1 557 0
 244 0014 0361     		str	r3, [r0, #16]
 558:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 245              		.loc 1 558 0
 246 0016 0C22     		movs	r2, #12
 247 0018 4261     		str	r2, [r0, #20]
 559:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 248              		.loc 1 559 0
 249 001a 8361     		str	r3, [r0, #24]
 560:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 250              		.loc 1 560 0
 251 001c C361     		str	r3, [r0, #28]
 561:Src/main.c    ****   {
 252              		.loc 1 561 0
 253 001e FFF7FEFF 		bl	HAL_UART_Init
 254              	.LVL9:
 255 0022 08BD     		pop	{r3, pc}
 256              	.L8:
 257              		.align	2
 258              	.L7:
 259 0024 00000000 		.word	huart2
 260 0028 00440040 		.word	1073759232
 261              		.cfi_endproc
 262              	.LFE130:
 264              		.section	.text.MX_TIM2_Init,"ax",%progbits
 265              		.align	2
 266              		.thumb
 267              		.thumb_func
 269              	MX_TIM2_Init:
 270              	.LFB126:
 352:Src/main.c    **** 
 271              		.loc 1 352 0
 272              		.cfi_startproc
ARM GAS  /tmp/ccGrxFJK.s 			page 17


 273              		@ args = 0, pretend = 0, frame = 40
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275 0000 30B5     		push	{r4, r5, lr}
 276              	.LCFI4:
 277              		.cfi_def_cfa_offset 12
 278              		.cfi_offset 4, -12
 279              		.cfi_offset 5, -8
 280              		.cfi_offset 14, -4
 281 0002 8BB0     		sub	sp, sp, #44
 282              	.LCFI5:
 283              		.cfi_def_cfa_offset 56
 358:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 284              		.loc 1 358 0
 285 0004 0024     		movs	r4, #0
 286 0006 0894     		str	r4, [sp, #32]
 287 0008 0994     		str	r4, [sp, #36]
 359:Src/main.c    **** 
 288              		.loc 1 359 0
 289 000a 0194     		str	r4, [sp, #4]
 290 000c 0294     		str	r4, [sp, #8]
 291 000e 0394     		str	r4, [sp, #12]
 292 0010 0494     		str	r4, [sp, #16]
 293 0012 0594     		str	r4, [sp, #20]
 294 0014 0694     		str	r4, [sp, #24]
 295 0016 0794     		str	r4, [sp, #28]
 364:Src/main.c    ****   htim2.Init.Prescaler = 0;
 296              		.loc 1 364 0
 297 0018 104D     		ldr	r5, .L11
 298 001a 4FF08043 		mov	r3, #1073741824
 299 001e 2B60     		str	r3, [r5]
 365:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 300              		.loc 1 365 0
 301 0020 6C60     		str	r4, [r5, #4]
 366:Src/main.c    ****   htim2.Init.Period = 10000;
 302              		.loc 1 366 0
 303 0022 AC60     		str	r4, [r5, #8]
 367:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 304              		.loc 1 367 0
 305 0024 42F21073 		movw	r3, #10000
 306 0028 EB60     		str	r3, [r5, #12]
 368:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 307              		.loc 1 368 0
 308 002a 2C61     		str	r4, [r5, #16]
 369:Src/main.c    ****   {
 309              		.loc 1 369 0
 310 002c 2846     		mov	r0, r5
 311 002e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 312              	.LVL10:
 373:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 313              		.loc 1 373 0
 314 0032 0894     		str	r4, [sp, #32]
 374:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 315              		.loc 1 374 0
 316 0034 0994     		str	r4, [sp, #36]
 375:Src/main.c    ****   {
 317              		.loc 1 375 0
 318 0036 2846     		mov	r0, r5
ARM GAS  /tmp/ccGrxFJK.s 			page 18


 319 0038 08A9     		add	r1, sp, #32
 320 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 321              	.LVL11:
 379:Src/main.c    ****   sConfigOC.Pulse = 0;
 322              		.loc 1 379 0
 323 003e 6023     		movs	r3, #96
 324 0040 0193     		str	r3, [sp, #4]
 380:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 325              		.loc 1 380 0
 326 0042 0294     		str	r4, [sp, #8]
 381:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 327              		.loc 1 381 0
 328 0044 0394     		str	r4, [sp, #12]
 382:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 329              		.loc 1 382 0
 330 0046 0594     		str	r4, [sp, #20]
 383:Src/main.c    ****   {
 331              		.loc 1 383 0
 332 0048 2846     		mov	r0, r5
 333 004a 01A9     		add	r1, sp, #4
 334 004c 0422     		movs	r2, #4
 335 004e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 336              	.LVL12:
 390:Src/main.c    **** 
 337              		.loc 1 390 0
 338 0052 2846     		mov	r0, r5
 339 0054 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 340              	.LVL13:
 392:Src/main.c    **** 
 341              		.loc 1 392 0
 342 0058 0BB0     		add	sp, sp, #44
 343              	.LCFI6:
 344              		.cfi_def_cfa_offset 12
 345              		@ sp needed
 346 005a 30BD     		pop	{r4, r5, pc}
 347              	.L12:
 348              		.align	2
 349              	.L11:
 350 005c 00000000 		.word	htim2
 351              		.cfi_endproc
 352              	.LFE126:
 354              		.section	.text.MX_TIM3_Init,"ax",%progbits
 355              		.align	2
 356              		.thumb
 357              		.thumb_func
 359              	MX_TIM3_Init:
 360              	.LFB127:
 400:Src/main.c    **** 
 361              		.loc 1 400 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 40
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365 0000 30B5     		push	{r4, r5, lr}
 366              	.LCFI7:
 367              		.cfi_def_cfa_offset 12
 368              		.cfi_offset 4, -12
 369              		.cfi_offset 5, -8
ARM GAS  /tmp/ccGrxFJK.s 			page 19


 370              		.cfi_offset 14, -4
 371 0002 8BB0     		sub	sp, sp, #44
 372              	.LCFI8:
 373              		.cfi_def_cfa_offset 56
 406:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 374              		.loc 1 406 0
 375 0004 0024     		movs	r4, #0
 376 0006 0894     		str	r4, [sp, #32]
 377 0008 0994     		str	r4, [sp, #36]
 407:Src/main.c    **** 
 378              		.loc 1 407 0
 379 000a 0194     		str	r4, [sp, #4]
 380 000c 0294     		str	r4, [sp, #8]
 381 000e 0394     		str	r4, [sp, #12]
 382 0010 0494     		str	r4, [sp, #16]
 383 0012 0594     		str	r4, [sp, #20]
 384 0014 0694     		str	r4, [sp, #24]
 385 0016 0794     		str	r4, [sp, #28]
 412:Src/main.c    ****   htim3.Init.Prescaler = 0;
 386              		.loc 1 412 0
 387 0018 104D     		ldr	r5, .L15
 388 001a 114B     		ldr	r3, .L15+4
 389 001c 2B60     		str	r3, [r5]
 413:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 390              		.loc 1 413 0
 391 001e 6C60     		str	r4, [r5, #4]
 414:Src/main.c    ****   htim3.Init.Period = 10000;
 392              		.loc 1 414 0
 393 0020 AC60     		str	r4, [r5, #8]
 415:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 394              		.loc 1 415 0
 395 0022 42F21073 		movw	r3, #10000
 396 0026 EB60     		str	r3, [r5, #12]
 416:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 397              		.loc 1 416 0
 398 0028 2C61     		str	r4, [r5, #16]
 417:Src/main.c    ****   {
 399              		.loc 1 417 0
 400 002a 2846     		mov	r0, r5
 401 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 402              	.LVL14:
 421:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 403              		.loc 1 421 0
 404 0030 0894     		str	r4, [sp, #32]
 422:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 405              		.loc 1 422 0
 406 0032 0994     		str	r4, [sp, #36]
 423:Src/main.c    ****   {
 407              		.loc 1 423 0
 408 0034 2846     		mov	r0, r5
 409 0036 08A9     		add	r1, sp, #32
 410 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 411              	.LVL15:
 427:Src/main.c    ****   sConfigOC.Pulse = 0;
 412              		.loc 1 427 0
 413 003c 6023     		movs	r3, #96
 414 003e 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccGrxFJK.s 			page 20


 428:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 415              		.loc 1 428 0
 416 0040 0294     		str	r4, [sp, #8]
 429:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 417              		.loc 1 429 0
 418 0042 0394     		str	r4, [sp, #12]
 430:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 419              		.loc 1 430 0
 420 0044 0594     		str	r4, [sp, #20]
 431:Src/main.c    ****   {
 421              		.loc 1 431 0
 422 0046 2846     		mov	r0, r5
 423 0048 01A9     		add	r1, sp, #4
 424 004a 2246     		mov	r2, r4
 425 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 426              	.LVL16:
 438:Src/main.c    **** 
 427              		.loc 1 438 0
 428 0050 2846     		mov	r0, r5
 429 0052 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 430              	.LVL17:
 440:Src/main.c    **** 
 431              		.loc 1 440 0
 432 0056 0BB0     		add	sp, sp, #44
 433              	.LCFI9:
 434              		.cfi_def_cfa_offset 12
 435              		@ sp needed
 436 0058 30BD     		pop	{r4, r5, pc}
 437              	.L16:
 438 005a 00BF     		.align	2
 439              	.L15:
 440 005c 00000000 		.word	htim3
 441 0060 00040040 		.word	1073742848
 442              		.cfi_endproc
 443              	.LFE127:
 445              		.section	.text.MX_TIM4_Init,"ax",%progbits
 446              		.align	2
 447              		.thumb
 448              		.thumb_func
 450              	MX_TIM4_Init:
 451              	.LFB128:
 448:Src/main.c    **** 
 452              		.loc 1 448 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 48
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456 0000 30B5     		push	{r4, r5, lr}
 457              	.LCFI10:
 458              		.cfi_def_cfa_offset 12
 459              		.cfi_offset 4, -12
 460              		.cfi_offset 5, -8
 461              		.cfi_offset 14, -4
 462 0002 8DB0     		sub	sp, sp, #52
 463              	.LCFI11:
 464              		.cfi_def_cfa_offset 64
 454:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 465              		.loc 1 454 0
ARM GAS  /tmp/ccGrxFJK.s 			page 21


 466 0004 0024     		movs	r4, #0
 467 0006 0494     		str	r4, [sp, #16]
 468 0008 0694     		str	r4, [sp, #24]
 469 000a 0894     		str	r4, [sp, #32]
 470 000c 0A94     		str	r4, [sp, #40]
 455:Src/main.c    **** 
 471              		.loc 1 455 0
 472 000e 0194     		str	r4, [sp, #4]
 473 0010 0294     		str	r4, [sp, #8]
 460:Src/main.c    ****   htim4.Init.Prescaler = 0;
 474              		.loc 1 460 0
 475 0012 0E4D     		ldr	r5, .L19
 476 0014 0E4B     		ldr	r3, .L19+4
 477 0016 2B60     		str	r3, [r5]
 461:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 478              		.loc 1 461 0
 479 0018 6C60     		str	r4, [r5, #4]
 462:Src/main.c    ****   htim4.Init.Period = 0xffff;
 480              		.loc 1 462 0
 481 001a AC60     		str	r4, [r5, #8]
 463:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 482              		.loc 1 463 0
 483 001c 4FF6FF73 		movw	r3, #65535
 484 0020 EB60     		str	r3, [r5, #12]
 464:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 485              		.loc 1 464 0
 486 0022 2C61     		str	r4, [r5, #16]
 465:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 487              		.loc 1 465 0
 488 0024 0123     		movs	r3, #1
 489 0026 0393     		str	r3, [sp, #12]
 467:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 490              		.loc 1 467 0
 491 0028 0593     		str	r3, [sp, #20]
 469:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 492              		.loc 1 469 0
 493 002a 0522     		movs	r2, #5
 494 002c 0792     		str	r2, [sp, #28]
 471:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 495              		.loc 1 471 0
 496 002e 0993     		str	r3, [sp, #36]
 473:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 497              		.loc 1 473 0
 498 0030 0B92     		str	r2, [sp, #44]
 474:Src/main.c    ****   {
 499              		.loc 1 474 0
 500 0032 2846     		mov	r0, r5
 501 0034 03A9     		add	r1, sp, #12
 502 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 503              	.LVL18:
 478:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 504              		.loc 1 478 0
 505 003a 0194     		str	r4, [sp, #4]
 479:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 506              		.loc 1 479 0
 507 003c 0294     		str	r4, [sp, #8]
 480:Src/main.c    ****   {
ARM GAS  /tmp/ccGrxFJK.s 			page 22


 508              		.loc 1 480 0
 509 003e 2846     		mov	r0, r5
 510 0040 01A9     		add	r1, sp, #4
 511 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 512              	.LVL19:
 488:Src/main.c    **** 
 513              		.loc 1 488 0
 514 0046 0DB0     		add	sp, sp, #52
 515              	.LCFI12:
 516              		.cfi_def_cfa_offset 12
 517              		@ sp needed
 518 0048 30BD     		pop	{r4, r5, pc}
 519              	.L20:
 520 004a 00BF     		.align	2
 521              	.L19:
 522 004c 00000000 		.word	htim4
 523 0050 00080040 		.word	1073743872
 524              		.cfi_endproc
 525              	.LFE128:
 527              		.section	.text.MX_TIM5_Init,"ax",%progbits
 528              		.align	2
 529              		.thumb
 530              		.thumb_func
 532              	MX_TIM5_Init:
 533              	.LFB129:
 496:Src/main.c    **** 
 534              		.loc 1 496 0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 48
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538 0000 30B5     		push	{r4, r5, lr}
 539              	.LCFI13:
 540              		.cfi_def_cfa_offset 12
 541              		.cfi_offset 4, -12
 542              		.cfi_offset 5, -8
 543              		.cfi_offset 14, -4
 544 0002 8DB0     		sub	sp, sp, #52
 545              	.LCFI14:
 546              		.cfi_def_cfa_offset 64
 502:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 547              		.loc 1 502 0
 548 0004 0024     		movs	r4, #0
 549 0006 0494     		str	r4, [sp, #16]
 550 0008 0694     		str	r4, [sp, #24]
 551 000a 0894     		str	r4, [sp, #32]
 552 000c 0A94     		str	r4, [sp, #40]
 503:Src/main.c    **** 
 553              		.loc 1 503 0
 554 000e 0194     		str	r4, [sp, #4]
 555 0010 0294     		str	r4, [sp, #8]
 508:Src/main.c    ****   htim5.Init.Prescaler = 0;
 556              		.loc 1 508 0
 557 0012 0E4D     		ldr	r5, .L23
 558 0014 0E4B     		ldr	r3, .L23+4
 559 0016 2B60     		str	r3, [r5]
 509:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 560              		.loc 1 509 0
ARM GAS  /tmp/ccGrxFJK.s 			page 23


 561 0018 6C60     		str	r4, [r5, #4]
 510:Src/main.c    ****   htim5.Init.Period = 0xffff;
 562              		.loc 1 510 0
 563 001a AC60     		str	r4, [r5, #8]
 511:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 564              		.loc 1 511 0
 565 001c 4FF6FF73 		movw	r3, #65535
 566 0020 EB60     		str	r3, [r5, #12]
 512:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 567              		.loc 1 512 0
 568 0022 2C61     		str	r4, [r5, #16]
 513:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 569              		.loc 1 513 0
 570 0024 0123     		movs	r3, #1
 571 0026 0393     		str	r3, [sp, #12]
 515:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 572              		.loc 1 515 0
 573 0028 0593     		str	r3, [sp, #20]
 517:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 574              		.loc 1 517 0
 575 002a 0522     		movs	r2, #5
 576 002c 0792     		str	r2, [sp, #28]
 519:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 577              		.loc 1 519 0
 578 002e 0993     		str	r3, [sp, #36]
 521:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 579              		.loc 1 521 0
 580 0030 0B92     		str	r2, [sp, #44]
 522:Src/main.c    ****   {
 581              		.loc 1 522 0
 582 0032 2846     		mov	r0, r5
 583 0034 03A9     		add	r1, sp, #12
 584 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 585              	.LVL20:
 526:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 586              		.loc 1 526 0
 587 003a 0194     		str	r4, [sp, #4]
 527:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 588              		.loc 1 527 0
 589 003c 0294     		str	r4, [sp, #8]
 528:Src/main.c    ****   {
 590              		.loc 1 528 0
 591 003e 2846     		mov	r0, r5
 592 0040 01A9     		add	r1, sp, #4
 593 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 594              	.LVL21:
 536:Src/main.c    **** 
 595              		.loc 1 536 0
 596 0046 0DB0     		add	sp, sp, #52
 597              	.LCFI15:
 598              		.cfi_def_cfa_offset 12
 599              		@ sp needed
 600 0048 30BD     		pop	{r4, r5, pc}
 601              	.L24:
 602 004a 00BF     		.align	2
 603              	.L23:
 604 004c 00000000 		.word	htim5
ARM GAS  /tmp/ccGrxFJK.s 			page 24


 605 0050 000C0040 		.word	1073744896
 606              		.cfi_endproc
 607              	.LFE129:
 609              		.section	.text.MX_TIM1_Init,"ax",%progbits
 610              		.align	2
 611              		.thumb
 612              		.thumb_func
 614              	MX_TIM1_Init:
 615              	.LFB125:
 289:Src/main.c    **** 
 616              		.loc 1 289 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 64
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620 0000 30B5     		push	{r4, r5, lr}
 621              	.LCFI16:
 622              		.cfi_def_cfa_offset 12
 623              		.cfi_offset 4, -12
 624              		.cfi_offset 5, -8
 625              		.cfi_offset 14, -4
 626 0002 91B0     		sub	sp, sp, #68
 627              	.LCFI17:
 628              		.cfi_def_cfa_offset 80
 295:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 629              		.loc 1 295 0
 630 0004 0024     		movs	r4, #0
 631 0006 0E94     		str	r4, [sp, #56]
 632 0008 0F94     		str	r4, [sp, #60]
 296:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 633              		.loc 1 296 0
 634 000a 0794     		str	r4, [sp, #28]
 635 000c 0894     		str	r4, [sp, #32]
 636 000e 0994     		str	r4, [sp, #36]
 637 0010 0A94     		str	r4, [sp, #40]
 638 0012 0B94     		str	r4, [sp, #44]
 639 0014 0C94     		str	r4, [sp, #48]
 640 0016 0D94     		str	r4, [sp, #52]
 297:Src/main.c    **** 
 641              		.loc 1 297 0
 642 0018 0094     		str	r4, [sp]
 643 001a 0194     		str	r4, [sp, #4]
 644 001c 0294     		str	r4, [sp, #8]
 645 001e 0394     		str	r4, [sp, #12]
 646 0020 0494     		str	r4, [sp, #16]
 647 0022 0594     		str	r4, [sp, #20]
 648 0024 0694     		str	r4, [sp, #24]
 302:Src/main.c    ****   htim1.Init.Prescaler = 72;
 649              		.loc 1 302 0
 650 0026 1A4D     		ldr	r5, .L27
 651 0028 1A4B     		ldr	r3, .L27+4
 652 002a 2B60     		str	r3, [r5]
 303:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 653              		.loc 1 303 0
 654 002c 4823     		movs	r3, #72
 655 002e 6B60     		str	r3, [r5, #4]
 304:Src/main.c    ****   htim1.Init.Period = 20000;
 656              		.loc 1 304 0
ARM GAS  /tmp/ccGrxFJK.s 			page 25


 657 0030 AC60     		str	r4, [r5, #8]
 305:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 658              		.loc 1 305 0
 659 0032 44F62063 		movw	r3, #20000
 660 0036 EB60     		str	r3, [r5, #12]
 306:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 661              		.loc 1 306 0
 662 0038 2C61     		str	r4, [r5, #16]
 307:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 663              		.loc 1 307 0
 664 003a 6C61     		str	r4, [r5, #20]
 308:Src/main.c    ****   {
 665              		.loc 1 308 0
 666 003c 2846     		mov	r0, r5
 667 003e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 668              	.LVL22:
 312:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 669              		.loc 1 312 0
 670 0042 0E94     		str	r4, [sp, #56]
 313:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 671              		.loc 1 313 0
 672 0044 0F94     		str	r4, [sp, #60]
 314:Src/main.c    ****   {
 673              		.loc 1 314 0
 674 0046 2846     		mov	r0, r5
 675 0048 0EA9     		add	r1, sp, #56
 676 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 677              	.LVL23:
 318:Src/main.c    ****   sConfigOC.Pulse = 1500;
 678              		.loc 1 318 0
 679 004e 6023     		movs	r3, #96
 680 0050 0793     		str	r3, [sp, #28]
 319:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 681              		.loc 1 319 0
 682 0052 40F2DC53 		movw	r3, #1500
 683 0056 0893     		str	r3, [sp, #32]
 320:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 684              		.loc 1 320 0
 685 0058 0994     		str	r4, [sp, #36]
 321:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 686              		.loc 1 321 0
 687 005a 0B94     		str	r4, [sp, #44]
 322:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 688              		.loc 1 322 0
 689 005c 0C94     		str	r4, [sp, #48]
 323:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 690              		.loc 1 323 0
 691 005e 0D94     		str	r4, [sp, #52]
 324:Src/main.c    ****   {
 692              		.loc 1 324 0
 693 0060 2846     		mov	r0, r5
 694 0062 07A9     		add	r1, sp, #28
 695 0064 0C22     		movs	r2, #12
 696 0066 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 697              	.LVL24:
 328:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 698              		.loc 1 328 0
ARM GAS  /tmp/ccGrxFJK.s 			page 26


 699 006a 0094     		str	r4, [sp]
 329:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 700              		.loc 1 329 0
 701 006c 0194     		str	r4, [sp, #4]
 330:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 702              		.loc 1 330 0
 703 006e 0294     		str	r4, [sp, #8]
 331:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 704              		.loc 1 331 0
 705 0070 0394     		str	r4, [sp, #12]
 332:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 706              		.loc 1 332 0
 707 0072 0494     		str	r4, [sp, #16]
 333:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 708              		.loc 1 333 0
 709 0074 4FF40053 		mov	r3, #8192
 710 0078 0593     		str	r3, [sp, #20]
 334:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 711              		.loc 1 334 0
 712 007a 0694     		str	r4, [sp, #24]
 335:Src/main.c    ****   {
 713              		.loc 1 335 0
 714 007c 2846     		mov	r0, r5
 715 007e 6946     		mov	r1, sp
 716 0080 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 717              	.LVL25:
 342:Src/main.c    **** 
 718              		.loc 1 342 0
 719 0084 2846     		mov	r0, r5
 720 0086 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 721              	.LVL26:
 344:Src/main.c    **** 
 722              		.loc 1 344 0
 723 008a 11B0     		add	sp, sp, #68
 724              	.LCFI18:
 725              		.cfi_def_cfa_offset 12
 726              		@ sp needed
 727 008c 30BD     		pop	{r4, r5, pc}
 728              	.L28:
 729 008e 00BF     		.align	2
 730              	.L27:
 731 0090 00000000 		.word	htim1
 732 0094 00000140 		.word	1073807360
 733              		.cfi_endproc
 734              	.LFE125:
 736              		.section	.text.SystemClock_Config,"ax",%progbits
 737              		.align	2
 738              		.global	SystemClock_Config
 739              		.thumb
 740              		.thumb_func
 742              	SystemClock_Config:
 743              	.LFB124:
 245:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 744              		.loc 1 245 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 80
 747              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccGrxFJK.s 			page 27


 748 0000 30B5     		push	{r4, r5, lr}
 749              	.LCFI19:
 750              		.cfi_def_cfa_offset 12
 751              		.cfi_offset 4, -12
 752              		.cfi_offset 5, -8
 753              		.cfi_offset 14, -4
 754 0002 95B0     		sub	sp, sp, #84
 755              	.LCFI20:
 756              		.cfi_def_cfa_offset 96
 246:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 757              		.loc 1 246 0
 758 0004 0024     		movs	r4, #0
 759 0006 0894     		str	r4, [sp, #32]
 760 0008 0994     		str	r4, [sp, #36]
 761 000a 0A94     		str	r4, [sp, #40]
 762 000c 0B94     		str	r4, [sp, #44]
 763 000e 0C94     		str	r4, [sp, #48]
 764 0010 0D94     		str	r4, [sp, #52]
 765 0012 0E94     		str	r4, [sp, #56]
 766 0014 0F94     		str	r4, [sp, #60]
 767 0016 1094     		str	r4, [sp, #64]
 768 0018 1194     		str	r4, [sp, #68]
 769 001a 1294     		str	r4, [sp, #72]
 770 001c 1394     		str	r4, [sp, #76]
 247:Src/main.c    **** 
 771              		.loc 1 247 0
 772 001e 0394     		str	r4, [sp, #12]
 773 0020 0494     		str	r4, [sp, #16]
 774 0022 0594     		str	r4, [sp, #20]
 775 0024 0694     		str	r4, [sp, #24]
 776 0026 0794     		str	r4, [sp, #28]
 777              	.LBB6:
 251:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 778              		.loc 1 251 0
 779 0028 0194     		str	r4, [sp, #4]
 780 002a 1C4B     		ldr	r3, .L31
 781 002c 1A6C     		ldr	r2, [r3, #64]
 782 002e 42F08052 		orr	r2, r2, #268435456
 783 0032 1A64     		str	r2, [r3, #64]
 784 0034 1B6C     		ldr	r3, [r3, #64]
 785 0036 03F08053 		and	r3, r3, #268435456
 786 003a 0193     		str	r3, [sp, #4]
 787 003c 019B     		ldr	r3, [sp, #4]
 788              	.LBE6:
 789              	.LBB7:
 252:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 790              		.loc 1 252 0
 791 003e 0294     		str	r4, [sp, #8]
 792 0040 174A     		ldr	r2, .L31+4
 793 0042 1368     		ldr	r3, [r2]
 794 0044 23F44043 		bic	r3, r3, #49152
 795 0048 43F40043 		orr	r3, r3, #32768
 796 004c 1360     		str	r3, [r2]
 797 004e 1368     		ldr	r3, [r2]
 798 0050 03F44043 		and	r3, r3, #49152
 799 0054 0293     		str	r3, [sp, #8]
 800 0056 029B     		ldr	r3, [sp, #8]
ARM GAS  /tmp/ccGrxFJK.s 			page 28


 801              	.LBE7:
 255:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 802              		.loc 1 255 0
 803 0058 0225     		movs	r5, #2
 804 005a 0895     		str	r5, [sp, #32]
 256:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 805              		.loc 1 256 0
 806 005c 0123     		movs	r3, #1
 807 005e 0B93     		str	r3, [sp, #44]
 257:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 808              		.loc 1 257 0
 809 0060 1023     		movs	r3, #16
 810 0062 0C93     		str	r3, [sp, #48]
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 811              		.loc 1 258 0
 812 0064 0E95     		str	r5, [sp, #56]
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 813              		.loc 1 259 0
 814 0066 0F94     		str	r4, [sp, #60]
 260:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 815              		.loc 1 260 0
 816 0068 1093     		str	r3, [sp, #64]
 261:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 817              		.loc 1 261 0
 818 006a 4FF4A873 		mov	r3, #336
 819 006e 1193     		str	r3, [sp, #68]
 262:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 820              		.loc 1 262 0
 821 0070 0423     		movs	r3, #4
 822 0072 1293     		str	r3, [sp, #72]
 263:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 823              		.loc 1 263 0
 824 0074 0723     		movs	r3, #7
 825 0076 1393     		str	r3, [sp, #76]
 264:Src/main.c    ****   {
 826              		.loc 1 264 0
 827 0078 08A8     		add	r0, sp, #32
 828 007a FFF7FEFF 		bl	HAL_RCC_OscConfig
 829              	.LVL27:
 270:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 830              		.loc 1 270 0
 831 007e 0F23     		movs	r3, #15
 832 0080 0393     		str	r3, [sp, #12]
 272:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 833              		.loc 1 272 0
 834 0082 0495     		str	r5, [sp, #16]
 273:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 835              		.loc 1 273 0
 836 0084 0594     		str	r4, [sp, #20]
 274:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 837              		.loc 1 274 0
 838 0086 4FF48053 		mov	r3, #4096
 839 008a 0693     		str	r3, [sp, #24]
 275:Src/main.c    **** 
 840              		.loc 1 275 0
 841 008c 0794     		str	r4, [sp, #28]
 277:Src/main.c    ****   {
ARM GAS  /tmp/ccGrxFJK.s 			page 29


 842              		.loc 1 277 0
 843 008e 03A8     		add	r0, sp, #12
 844 0090 2946     		mov	r1, r5
 845 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 846              	.LVL28:
 281:Src/main.c    **** 
 847              		.loc 1 281 0
 848 0096 15B0     		add	sp, sp, #84
 849              	.LCFI21:
 850              		.cfi_def_cfa_offset 12
 851              		@ sp needed
 852 0098 30BD     		pop	{r4, r5, pc}
 853              	.L32:
 854 009a 00BF     		.align	2
 855              	.L31:
 856 009c 00380240 		.word	1073887232
 857 00a0 00700040 		.word	1073770496
 858              		.cfi_endproc
 859              	.LFE124:
 861              		.section	.text.moteurDroit,"ax",%progbits
 862              		.align	2
 863              		.global	moteurDroit
 864              		.thumb
 865              		.thumb_func
 867              	moteurDroit:
 868              	.LFB132:
 635:Src/main.c    **** 
 636:Src/main.c    **** /* USER CODE BEGIN 4 */
 637:Src/main.c    **** void moteurDroit(int PWM)
 638:Src/main.c    **** {
 869              		.loc 1 638 0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 0
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              	.LVL29:
 874 0000 10B5     		push	{r4, lr}
 875              	.LCFI22:
 876              		.cfi_def_cfa_offset 8
 877              		.cfi_offset 4, -8
 878              		.cfi_offset 14, -4
 639:Src/main.c    ****     if(PWM == abs(PWM))
 879              		.loc 1 639 0
 880 0002 80EAE074 		eor	r4, r0, r0, asr #31
 881 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 882 000a 8442     		cmp	r4, r0
 883 000c 06D1     		bne	.L34
 640:Src/main.c    ****     {
 641:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 884              		.loc 1 641 0
 885 000e 0D48     		ldr	r0, .L39
 886              	.LVL30:
 887 0010 4FF48061 		mov	r1, #1024
 888 0014 0022     		movs	r2, #0
 889 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 890              	.LVL31:
 891 001a 05E0     		b	.L35
 892              	.LVL32:
ARM GAS  /tmp/ccGrxFJK.s 			page 30


 893              	.L34:
 642:Src/main.c    ****     }
 643:Src/main.c    ****     else
 644:Src/main.c    ****     {
 645:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 894              		.loc 1 645 0
 895 001c 0948     		ldr	r0, .L39
 896              	.LVL33:
 897 001e 4FF48061 		mov	r1, #1024
 898 0022 0122     		movs	r2, #1
 899 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 900              	.LVL34:
 901              	.L35:
 646:Src/main.c    ****     }
 647:Src/main.c    ****     if (abs(PWM) > 10000)
 902              		.loc 1 647 0
 903 0028 42F21073 		movw	r3, #10000
 904 002c 9C42     		cmp	r4, r3
 905 002e 05DD     		ble	.L36
 648:Src/main.c    ****     {
 649:Src/main.c    **** 		htim2.Instance->CCR2 = 10000;
 906              		.loc 1 649 0
 907 0030 054B     		ldr	r3, .L39+4
 908 0032 1B68     		ldr	r3, [r3]
 909 0034 42F21072 		movw	r2, #10000
 910 0038 9A63     		str	r2, [r3, #56]
 911 003a 10BD     		pop	{r4, pc}
 912              	.L36:
 650:Src/main.c    ****     }
 651:Src/main.c    ****     else 
 652:Src/main.c    ****     {
 653:Src/main.c    **** 		htim2.Instance->CCR2 = abs(PWM);
 913              		.loc 1 653 0
 914 003c 024B     		ldr	r3, .L39+4
 915 003e 1B68     		ldr	r3, [r3]
 916 0040 9C63     		str	r4, [r3, #56]
 917 0042 10BD     		pop	{r4, pc}
 918              	.L40:
 919              		.align	2
 920              	.L39:
 921 0044 00000240 		.word	1073872896
 922 0048 00000000 		.word	htim2
 923              		.cfi_endproc
 924              	.LFE132:
 926              		.section	.text.moteurGauche,"ax",%progbits
 927              		.align	2
 928              		.global	moteurGauche
 929              		.thumb
 930              		.thumb_func
 932              	moteurGauche:
 933              	.LFB133:
 654:Src/main.c    **** 	}
 655:Src/main.c    **** }
 656:Src/main.c    **** 
 657:Src/main.c    **** 
 658:Src/main.c    **** void moteurGauche(int PWM)
 659:Src/main.c    **** {
ARM GAS  /tmp/ccGrxFJK.s 			page 31


 934              		.loc 1 659 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              	.LVL35:
 939 0000 10B5     		push	{r4, lr}
 940              	.LCFI23:
 941              		.cfi_def_cfa_offset 8
 942              		.cfi_offset 4, -8
 943              		.cfi_offset 14, -4
 660:Src/main.c    ****     if(PWM == abs(PWM))
 944              		.loc 1 660 0
 945 0002 80EAE074 		eor	r4, r0, r0, asr #31
 946 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 947 000a 8442     		cmp	r4, r0
 948 000c 05D1     		bne	.L42
 661:Src/main.c    ****     {
 662:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_SET);
 949              		.loc 1 662 0
 950 000e 0C48     		ldr	r0, .L47
 951              	.LVL36:
 952 0010 2021     		movs	r1, #32
 953 0012 0122     		movs	r2, #1
 954 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 955              	.LVL37:
 956 0018 04E0     		b	.L43
 957              	.LVL38:
 958              	.L42:
 663:Src/main.c    ****     }
 664:Src/main.c    ****     else
 665:Src/main.c    ****     {
 666:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 959              		.loc 1 666 0
 960 001a 0948     		ldr	r0, .L47
 961              	.LVL39:
 962 001c 2021     		movs	r1, #32
 963 001e 0022     		movs	r2, #0
 964 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 965              	.LVL40:
 966              	.L43:
 667:Src/main.c    ****     }
 668:Src/main.c    ****     if (abs(PWM) > 10000)
 967              		.loc 1 668 0
 968 0024 42F21073 		movw	r3, #10000
 969 0028 9C42     		cmp	r4, r3
 970 002a 05DD     		ble	.L44
 669:Src/main.c    ****     {
 670:Src/main.c    **** 		htim3.Instance->CCR1 = 10000;
 971              		.loc 1 670 0
 972 002c 054B     		ldr	r3, .L47+4
 973 002e 1B68     		ldr	r3, [r3]
 974 0030 42F21072 		movw	r2, #10000
 975 0034 5A63     		str	r2, [r3, #52]
 976 0036 10BD     		pop	{r4, pc}
 977              	.L44:
 671:Src/main.c    ****     }
 672:Src/main.c    ****     else 
ARM GAS  /tmp/ccGrxFJK.s 			page 32


 673:Src/main.c    ****     {
 674:Src/main.c    **** 		htim3.Instance->CCR1 = abs(PWM);
 978              		.loc 1 674 0
 979 0038 024B     		ldr	r3, .L47+4
 980 003a 1B68     		ldr	r3, [r3]
 981 003c 5C63     		str	r4, [r3, #52]
 982 003e 10BD     		pop	{r4, pc}
 983              	.L48:
 984              		.align	2
 985              	.L47:
 986 0040 00040240 		.word	1073873920
 987 0044 00000000 		.word	htim3
 988              		.cfi_endproc
 989              	.LFE133:
 991              		.section	.text.servoPos,"ax",%progbits
 992              		.align	2
 993              		.global	servoPos
 994              		.thumb
 995              		.thumb_func
 997              	servoPos:
 998              	.LFB134:
 675:Src/main.c    **** 	}
 676:Src/main.c    **** }
 677:Src/main.c    **** 
 678:Src/main.c    **** 
 679:Src/main.c    **** void servoPos(int Pos)
 680:Src/main.c    **** {
 999              		.loc 1 680 0
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 0
 1002              		@ frame_needed = 0, uses_anonymous_args = 0
 1003              		@ link register save eliminated.
 1004              	.LVL41:
 681:Src/main.c    **** 	htim1.Instance->CCR4 = Pos;//servo
 1005              		.loc 1 681 0
 1006 0000 014B     		ldr	r3, .L50
 1007 0002 1B68     		ldr	r3, [r3]
 1008 0004 1864     		str	r0, [r3, #64]
 1009 0006 7047     		bx	lr
 1010              	.L51:
 1011              		.align	2
 1012              	.L50:
 1013 0008 00000000 		.word	htim1
 1014              		.cfi_endproc
 1015              	.LFE134:
 1017              		.global	__aeabi_i2d
 1018              		.global	__aeabi_dmul
 1019              		.global	__aeabi_d2iz
 1020              		.section	.text.main,"ax",%progbits
 1021              		.align	2
 1022              		.global	main
 1023              		.thumb
 1024              		.thumb_func
 1026              	main:
 1027              	.LFB123:
 119:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1028              		.loc 1 119 0
ARM GAS  /tmp/ccGrxFJK.s 			page 33


 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 8
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1033              	.LCFI24:
 1034              		.cfi_def_cfa_offset 36
 1035              		.cfi_offset 4, -36
 1036              		.cfi_offset 5, -32
 1037              		.cfi_offset 6, -28
 1038              		.cfi_offset 7, -24
 1039              		.cfi_offset 8, -20
 1040              		.cfi_offset 9, -16
 1041              		.cfi_offset 10, -12
 1042              		.cfi_offset 11, -8
 1043              		.cfi_offset 14, -4
 1044 0004 93B0     		sub	sp, sp, #76
 1045              	.LCFI25:
 1046              		.cfi_def_cfa_offset 112
 127:Src/main.c    **** 
 1047              		.loc 1 127 0
 1048 0006 FFF7FEFF 		bl	HAL_Init
 1049              	.LVL42:
 134:Src/main.c    **** 
 1050              		.loc 1 134 0
 1051 000a FFF7FEFF 		bl	SystemClock_Config
 1052              	.LVL43:
 141:Src/main.c    ****   MX_USART2_UART_Init();
 1053              		.loc 1 141 0
 1054 000e FFF7FEFF 		bl	MX_GPIO_Init
 1055              	.LVL44:
 142:Src/main.c    ****   MX_TIM2_Init();
 1056              		.loc 1 142 0
 1057 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 1058              	.LVL45:
 143:Src/main.c    ****   MX_TIM3_Init();
 1059              		.loc 1 143 0
 1060 0016 FFF7FEFF 		bl	MX_TIM2_Init
 1061              	.LVL46:
 144:Src/main.c    ****   MX_TIM4_Init();
 1062              		.loc 1 144 0
 1063 001a FFF7FEFF 		bl	MX_TIM3_Init
 1064              	.LVL47:
 145:Src/main.c    ****   MX_TIM5_Init();
 1065              		.loc 1 145 0
 1066 001e FFF7FEFF 		bl	MX_TIM4_Init
 1067              	.LVL48:
 146:Src/main.c    ****   MX_TIM1_Init();
 1068              		.loc 1 146 0
 1069 0022 FFF7FEFF 		bl	MX_TIM5_Init
 1070              	.LVL49:
 147:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1071              		.loc 1 147 0
 1072 0026 FFF7FEFF 		bl	MX_TIM1_Init
 1073              	.LVL50:
 149:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 1074              		.loc 1 149 0
 1075 002a 8348     		ldr	r0, .L60+8
ARM GAS  /tmp/ccGrxFJK.s 			page 34


 1076 002c 0421     		movs	r1, #4
 1077 002e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1078              	.LVL51:
 150:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 1079              		.loc 1 150 0
 1080 0032 8248     		ldr	r0, .L60+12
 1081 0034 0021     		movs	r1, #0
 1082 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1083              	.LVL52:
 151:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1084              		.loc 1 151 0
 1085 003a 8148     		ldr	r0, .L60+16
 1086 003c 1821     		movs	r1, #24
 1087 003e FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1088              	.LVL53:
 152:Src/main.c    ****   HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_4);
 1089              		.loc 1 152 0
 1090 0042 8048     		ldr	r0, .L60+20
 1091 0044 1821     		movs	r1, #24
 1092 0046 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1093              	.LVL54:
 153:Src/main.c    ****   /* USER CODE END 2 */
 1094              		.loc 1 153 0
 1095 004a 7F48     		ldr	r0, .L60+24
 1096 004c 0C21     		movs	r1, #12
 1097 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1098              	.LVL55:
 158:Src/main.c    ****   servoPos(1500);
 1099              		.loc 1 158 0
 1100 0052 7E48     		ldr	r0, .L60+28
 1101 0054 0121     		movs	r1, #1
 1102 0056 0A46     		mov	r2, r1
 1103 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1104              	.LVL56:
 159:Src/main.c    ****   
 1105              		.loc 1 159 0
 1106 005c 40F2DC50 		movw	r0, #1500
 1107 0060 FFF7FEFF 		bl	servoPos
 1108              	.LVL57:
 161:Src/main.c    ****   while(HAL_GPIO_ReadPin(Tirette_GPIO_Port, Tirette_Pin))
 1109              		.loc 1 161 0
 1110 0064 7A48     		ldr	r0, .L60+32
 1111 0066 7B49     		ldr	r1, .L60+36
 1112 0068 2F22     		movs	r2, #47
 1113 006a 4FF0FF33 		mov	r3, #-1
 1114 006e FFF7FEFF 		bl	HAL_UART_Transmit
 1115              	.LVL58:
 1116              	.L53:
 162:Src/main.c    ****   {}
 1117              		.loc 1 162 0 discriminator 1
 1118 0072 7648     		ldr	r0, .L60+28
 1119 0074 4FF48051 		mov	r1, #4096
 1120 0078 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1121              	.LVL59:
 1122 007c 0028     		cmp	r0, #0
 1123 007e F8D1     		bne	.L53
 164:Src/main.c    ****     
ARM GAS  /tmp/ccGrxFJK.s 			page 35


 1124              		.loc 1 164 0
 1125 0080 FFF7FEFF 		bl	HAL_GetTick
 1126              	.LVL60:
 1127 0084 1190     		str	r0, [sp, #68]
 1128              	.LVL61:
 166:Src/main.c    ****   HAL_Delay(1000);
 1129              		.loc 1 166 0
 1130 0086 7248     		ldr	r0, .L60+32
 1131              	.LVL62:
 1132 0088 7349     		ldr	r1, .L60+40
 1133 008a 1A22     		movs	r2, #26
 1134 008c 4FF0FF33 		mov	r3, #-1
 1135 0090 FFF7FEFF 		bl	HAL_UART_Transmit
 1136              	.LVL63:
 167:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick(); //init the time tracking variable for the fixed frequency PID 
 1137              		.loc 1 167 0
 1138 0094 4FF47A70 		mov	r0, #1000
 1139 0098 FFF7FEFF 		bl	HAL_Delay
 1140              	.LVL64:
 168:Src/main.c    **** 
 1141              		.loc 1 168 0
 1142 009c FFF7FEFF 		bl	HAL_GetTick
 1143              	.LVL65:
 1144 00a0 0646     		mov	r6, r0
 1145              	.LVL66:
 173:Src/main.c    ****   TIM5->CNT = 30000;
 1146              		.loc 1 173 0
 1147 00a2 47F23053 		movw	r3, #30000
 1148 00a6 6D4A     		ldr	r2, .L60+44
 1149 00a8 5362     		str	r3, [r2, #36]
 1150              	.LVL67:
 174:Src/main.c    ****   
 1151              		.loc 1 174 0
 1152 00aa 02F58062 		add	r2, r2, #1024
 1153 00ae 5362     		str	r3, [r2, #36]
 1154 00b0 04E0     		b	.L54
 1155              	.LVL68:
 1156              	.L55:
 1157              	.LBB8:
 182:Src/main.c    ****     HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 1158              		.loc 1 182 0
 1159 00b2 6648     		ldr	r0, .L60+28
 1160 00b4 1021     		movs	r1, #16
 1161 00b6 0122     		movs	r2, #1
 1162 00b8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1163              	.LVL69:
 1164              	.L54:
 181:Src/main.c    ****     {HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_SET);}
 1165              		.loc 1 181 0
 1166 00bc FFF7FEFF 		bl	HAL_GetTick
 1167              	.LVL70:
 1168 00c0 801B     		subs	r0, r0, r6
 1169 00c2 674B     		ldr	r3, .L60+48
 1170 00c4 1B68     		ldr	r3, [r3]
 1171 00c6 9842     		cmp	r0, r3
 1172 00c8 F3D3     		bcc	.L55
 183:Src/main.c    ****     oldTicks = HAL_GetTick();
ARM GAS  /tmp/ccGrxFJK.s 			page 36


 1173              		.loc 1 183 0
 1174 00ca 6048     		ldr	r0, .L60+28
 1175 00cc 1021     		movs	r1, #16
 1176 00ce 0022     		movs	r2, #0
 1177 00d0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1178              	.LVL71:
 184:Src/main.c    ****     
 1179              		.loc 1 184 0
 1180 00d4 FFF7FEFF 		bl	HAL_GetTick
 1181              	.LVL72:
 1182 00d8 0646     		mov	r6, r0
 1183              	.LVL73:
 186:Src/main.c    ****     {
 1184              		.loc 1 186 0
 1185 00da FFF7FEFF 		bl	HAL_GetTick
 1186              	.LVL74:
 1187 00de 119B     		ldr	r3, [sp, #68]
 1188 00e0 C01A     		subs	r0, r0, r3
 1189 00e2 604B     		ldr	r3, .L60+52
 1190 00e4 9842     		cmp	r0, r3
 1191 00e6 0DD9     		bls	.L56
 188:Src/main.c    ****         moteurGauche(0);
 1192              		.loc 1 188 0
 1193 00e8 5948     		ldr	r0, .L60+32
 1194 00ea 5F49     		ldr	r1, .L60+56
 1195 00ec 1A22     		movs	r2, #26
 1196 00ee 4FF0FF33 		mov	r3, #-1
 1197 00f2 FFF7FEFF 		bl	HAL_UART_Transmit
 1198              	.LVL75:
 189:Src/main.c    **** 		moteurDroit(0);
 1199              		.loc 1 189 0
 1200 00f6 0020     		movs	r0, #0
 1201 00f8 FFF7FEFF 		bl	moteurGauche
 1202              	.LVL76:
 190:Src/main.c    ****         while(1){}
 1203              		.loc 1 190 0
 1204 00fc 0020     		movs	r0, #0
 1205 00fe FFF7FEFF 		bl	moteurDroit
 1206              	.LVL77:
 1207              	.L57:
 191:Src/main.c    ****     }
 1208              		.loc 1 191 0 discriminator 1
 1209 0102 FEE7     		b	.L57
 1210              	.L56:
 203:Src/main.c    ****     int tim5 = (-TIM5->CNT+30000);
 1211              		.loc 1 203 0
 1212 0104 5549     		ldr	r1, .L60+44
 1213 0106 4C6A     		ldr	r4, [r1, #36]
 1214 0108 A4F5EA44 		sub	r4, r4, #29952
 1215 010c 303C     		subs	r4, r4, #48
 1216              	.LVL78:
 204:Src/main.c    ****     TIM4->CNT = 30000;
 1217              		.loc 1 204 0
 1218 010e 574A     		ldr	r2, .L60+60
 1219 0110 506A     		ldr	r0, [r2, #36]
 1220 0112 47F23053 		movw	r3, #30000
 1221              	.LVL79:
ARM GAS  /tmp/ccGrxFJK.s 			page 37


 205:Src/main.c    ****     TIM5->CNT = 30000;
 1222              		.loc 1 205 0
 1223 0116 4B62     		str	r3, [r1, #36]
 206:Src/main.c    ****     
 1224              		.loc 1 206 0
 1225 0118 5362     		str	r3, [r2, #36]
 208:Src/main.c    ****     
 1226              		.loc 1 208 0
 1227 011a 181A     		subs	r0, r3, r0
 1228              	.LVL80:
 1229 011c FFF7FEFF 		bl	__aeabi_i2d
 1230              	.LVL81:
 1231 0120 43A3     		adr	r3, .L60
 1232 0122 D3E90023 		ldrd	r2, [r3]
 1233 0126 FFF7FEFF 		bl	__aeabi_dmul
 1234              	.LVL82:
 1235 012a FFF7FEFF 		bl	__aeabi_d2iz
 1236              	.LVL83:
 1237 012e 0546     		mov	r5, r0
 1238              	.LVL84:
 210:Src/main.c    ****     tim4Tot += tim4;//for debug
 1239              		.loc 1 210 0
 1240 0130 DFF86CB1 		ldr	fp, .L60+112
 1241 0134 DFF86CA1 		ldr	r10, .L60+116
 1242 0138 DFF84C91 		ldr	r9, .L60+88
 1243 013c CDF80090 		str	r9, [sp]
 1244 0140 2046     		mov	r0, r4
 1245              	.LVL85:
 1246 0142 2946     		mov	r1, r5
 1247 0144 5A46     		mov	r2, fp
 1248 0146 5346     		mov	r3, r10
 1249 0148 FFF7FEFF 		bl	updatePos
 1250              	.LVL86:
 211:Src/main.c    ****     tim5Tot += tim5;
 1251              		.loc 1 211 0
 1252 014c 484A     		ldr	r2, .L60+64
 1253 014e 1368     		ldr	r3, [r2]
 1254 0150 2344     		add	r3, r3, r4
 1255 0152 1360     		str	r3, [r2]
 212:Src/main.c    ****     
 1256              		.loc 1 212 0
 1257 0154 474A     		ldr	r2, .L60+68
 1258 0156 1368     		ldr	r3, [r2]
 1259 0158 2B44     		add	r3, r3, r5
 1260 015a 1360     		str	r3, [r2]
 214:Src/main.c    ****     
 1261              		.loc 1 214 0
 1262 015c 464F     		ldr	r7, .L60+72
 1263 015e DFF83881 		ldr	r8, .L60+104
 1264 0162 9BED000B 		fldd	d0, [fp]
 1265 0166 9AED001B 		fldd	d1, [r10]
 1266 016a 99ED002B 		fldd	d2, [r9]
 1267 016e EE46     		mov	lr, sp
 1268 0170 DFF8DCC0 		ldr	ip, .L60+32
 1269 0174 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1270 0178 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1271 017c BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccGrxFJK.s 			page 38


 1272 0180 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1273 0184 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1274 0188 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1275 018c 9CE80F00 		ldmia	ip, {r0, r1, r2, r3}
 1276 0190 8EE80F00 		stmia	lr, {r0, r1, r2, r3}
 1277 0194 3846     		mov	r0, r7
 1278 0196 4146     		mov	r1, r8
 1279 0198 2246     		mov	r2, r4
 1280 019a 2B46     		mov	r3, r5
 1281 019c FFF7FEFF 		bl	stateMachine
 1282              	.LVL87:
 216:Src/main.c    ****     moteurDroit(consigneDroit);
 1283              		.loc 1 216 0
 1284 01a0 D8F80000 		ldr	r0, [r8]
 1285 01a4 FFF7FEFF 		bl	moteurGauche
 1286              	.LVL88:
 217:Src/main.c    ****     
 1287              		.loc 1 217 0
 1288 01a8 3868     		ldr	r0, [r7]
 1289 01aa FFF7FEFF 		bl	moteurDroit
 1290              	.LVL89:
 220:Src/main.c    ****     if (_DEBUG == 1)
 1291              		.loc 1 220 0
 1292 01ae 334A     		ldr	r2, .L60+76
 1293 01b0 1368     		ldr	r3, [r2]
 1294 01b2 0133     		adds	r3, r3, #1
 1295 01b4 1360     		str	r3, [r2]
 223:Src/main.c    ****         {
 1296              		.loc 1 223 0
 1297 01b6 324A     		ldr	r2, .L60+80
 1298 01b8 1268     		ldr	r2, [r2]
 1299 01ba 9342     		cmp	r3, r2
 1300 01bc 7FF47EAF 		bne	.L54
 225:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 1301              		.loc 1 225 0
 1302 01c0 304C     		ldr	r4, .L60+84
 1303              	.LVL90:
 1304 01c2 DBE90089 		ldrd	r8, [fp]
 1305 01c6 DAE90023 		ldrd	r2, [r10]
 1306 01ca CDE90023 		strd	r2, [sp]
 1307 01ce 2E4B     		ldr	r3, .L60+88
 1308 01d0 D3E90001 		ldrd	r0, [r3]
 1309 01d4 0022     		movs	r2, #0
 1310 01d6 2D4B     		ldr	r3, .L60+92
 1311 01d8 FFF7FEFF 		bl	__aeabi_dmul
 1312              	.LVL91:
 1313 01dc CDE90201 		strd	r0, [sp, #8]
 1314 01e0 2046     		mov	r0, r4
 1315 01e2 2B49     		ldr	r1, .L60+96
 1316 01e4 4246     		mov	r2, r8
 1317 01e6 4B46     		mov	r3, r9
 1318 01e8 FFF7FEFF 		bl	sprintf
 1319              	.LVL92:
 226:Src/main.c    ****             sprintf(buffer2, "tot : %d / %d / %d / %d\n",tim4Tot, tim5Tot, consigneDroit, consigneG
 1320              		.loc 1 226 0
 1321 01ec 184D     		ldr	r5, .L60+32
 1322              	.LVL93:
ARM GAS  /tmp/ccGrxFJK.s 			page 39


 1323 01ee 2846     		mov	r0, r5
 1324 01f0 2146     		mov	r1, r4
 1325 01f2 3222     		movs	r2, #50
 1326 01f4 4FF0FF33 		mov	r3, #-1
 1327 01f8 FFF7FEFF 		bl	HAL_UART_Transmit
 1328              	.LVL94:
 227:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 1329              		.loc 1 227 0
 1330 01fc 254C     		ldr	r4, .L60+100
 1331 01fe 1C4B     		ldr	r3, .L60+64
 1332 0200 1A68     		ldr	r2, [r3]
 1333 0202 1C4B     		ldr	r3, .L60+68
 1334 0204 1B68     		ldr	r3, [r3]
 1335 0206 3968     		ldr	r1, [r7]
 1336 0208 0091     		str	r1, [sp]
 1337 020a 2349     		ldr	r1, .L60+104
 1338 020c 0968     		ldr	r1, [r1]
 1339 020e 0191     		str	r1, [sp, #4]
 1340 0210 2046     		mov	r0, r4
 1341 0212 2249     		ldr	r1, .L60+108
 1342 0214 FFF7FEFF 		bl	sprintf
 1343              	.LVL95:
 228:Src/main.c    ****             debugCounter = 0;
 1344              		.loc 1 228 0
 1345 0218 2846     		mov	r0, r5
 1346 021a 2146     		mov	r1, r4
 1347 021c 3222     		movs	r2, #50
 1348 021e 4FF0FF33 		mov	r3, #-1
 1349 0222 FFF7FEFF 		bl	HAL_UART_Transmit
 1350              	.LVL96:
 229:Src/main.c    ****         }
 1351              		.loc 1 229 0
 1352 0226 0022     		movs	r2, #0
 1353 0228 144B     		ldr	r3, .L60+76
 1354 022a 1A60     		str	r2, [r3]
 1355 022c 46E7     		b	.L54
 1356              	.L61:
 1357 022e 00BF     		.align	3
 1358              	.L60:
 1359 0230 5B423EE8 		.word	3896394331
 1360 0234 D9ACF03F 		.word	1072737497
 1361 0238 00000000 		.word	htim2
 1362 023c 00000000 		.word	htim3
 1363 0240 00000000 		.word	htim4
 1364 0244 00000000 		.word	htim5
 1365 0248 00000000 		.word	htim1
 1366 024c 00080240 		.word	1073874944
 1367 0250 00000000 		.word	huart2
 1368 0254 00000000 		.word	.LC0
 1369 0258 30000000 		.word	.LC1
 1370 025c 00080040 		.word	1073743872
 1371 0260 00000000 		.word	.LANCHOR0
 1372 0264 905F0100 		.word	90000
 1373 0268 4C000000 		.word	.LC2
 1374 026c 000C0040 		.word	1073744896
 1375 0270 00000000 		.word	.LANCHOR4
 1376 0274 00000000 		.word	.LANCHOR5
ARM GAS  /tmp/ccGrxFJK.s 			page 40


 1377 0278 00000000 		.word	.LANCHOR6
 1378 027c 00000000 		.word	.LANCHOR8
 1379 0280 00000000 		.word	.LANCHOR9
 1380 0284 00000000 		.word	.LANCHOR10
 1381 0288 00000000 		.word	.LANCHOR3
 1382 028c 00408F40 		.word	1083129856
 1383 0290 68000000 		.word	.LC3
 1384 0294 00000000 		.word	.LANCHOR11
 1385 0298 00000000 		.word	.LANCHOR7
 1386 029c 7C000000 		.word	.LC4
 1387 02a0 00000000 		.word	.LANCHOR1
 1388 02a4 00000000 		.word	.LANCHOR2
 1389              	.LBE8:
 1390              		.cfi_endproc
 1391              	.LFE123:
 1393              		.section	.text.resetPos,"ax",%progbits
 1394              		.align	2
 1395              		.global	resetPos
 1396              		.thumb
 1397              		.thumb_func
 1399              	resetPos:
 1400              	.LFB135:
 682:Src/main.c    **** }
 683:Src/main.c    **** 
 684:Src/main.c    **** void resetPos()
 685:Src/main.c    **** {
 1401              		.loc 1 685 0
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 1405              		@ link register save eliminated.
 686:Src/main.c    ****     positionX = 0.0;
 1406              		.loc 1 686 0
 1407 0000 0022     		movs	r2, #0
 1408 0002 0023     		movs	r3, #0
 1409 0004 0449     		ldr	r1, .L63
 1410 0006 C1E90023 		strd	r2, [r1]
 687:Src/main.c    ****     positionY = 0.0;
 1411              		.loc 1 687 0
 1412 000a 0449     		ldr	r1, .L63+4
 1413 000c C1E90023 		strd	r2, [r1]
 688:Src/main.c    ****     angle = 0.0;
 1414              		.loc 1 688 0
 1415 0010 0349     		ldr	r1, .L63+8
 1416 0012 C1E90023 		strd	r2, [r1]
 1417 0016 7047     		bx	lr
 1418              	.L64:
 1419              		.align	2
 1420              	.L63:
 1421 0018 00000000 		.word	.LANCHOR1
 1422 001c 00000000 		.word	.LANCHOR2
 1423 0020 00000000 		.word	.LANCHOR3
 1424              		.cfi_endproc
 1425              	.LFE135:
 1427              		.section	.text.Error_Handler,"ax",%progbits
 1428              		.align	2
 1429              		.global	Error_Handler
ARM GAS  /tmp/ccGrxFJK.s 			page 41


 1430              		.thumb
 1431              		.thumb_func
 1433              	Error_Handler:
 1434              	.LFB136:
 689:Src/main.c    **** }
 690:Src/main.c    **** 
 691:Src/main.c    **** 
 692:Src/main.c    **** /* USER CODE END 4 */
 693:Src/main.c    **** 
 694:Src/main.c    **** /**
 695:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 696:Src/main.c    ****   * @retval None
 697:Src/main.c    ****   */
 698:Src/main.c    **** void Error_Handler(void)
 699:Src/main.c    **** {
 1435              		.loc 1 699 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 0
 1438              		@ frame_needed = 0, uses_anonymous_args = 0
 1439              		@ link register save eliminated.
 1440 0000 7047     		bx	lr
 1441              		.cfi_endproc
 1442              	.LFE136:
 1444              		.global	debugMessageFrequency
 1445              		.global	fixedFrequency
 1446              		.global	buffer2
 1447              		.global	buffer
 1448              		.global	tim5Tot
 1449              		.global	tim4Tot
 1450              		.global	debugCounter
 1451              		.global	consigneGauche
 1452              		.global	consigneDroit
 1453              		.global	angle
 1454              		.global	positionY
 1455              		.global	positionX
 1456              		.comm	huart2,64,4
 1457              		.comm	htim5,60,4
 1458              		.comm	htim4,60,4
 1459              		.comm	htim3,60,4
 1460              		.comm	htim2,60,4
 1461              		.comm	htim1,60,4
 1462 0002 00BF     		.section	.bss.consigneDroit,"aw",%nobits
 1463              		.align	2
 1464              		.set	.LANCHOR6,. + 0
 1467              	consigneDroit:
 1468 0000 00000000 		.space	4
 1469              		.section	.bss.positionX,"aw",%nobits
 1470              		.align	3
 1471              		.set	.LANCHOR1,. + 0
 1474              	positionX:
 1475 0000 00000000 		.space	8
 1475      00000000 
 1476              		.section	.bss.positionY,"aw",%nobits
 1477              		.align	3
 1478              		.set	.LANCHOR2,. + 0
 1481              	positionY:
 1482 0000 00000000 		.space	8
ARM GAS  /tmp/ccGrxFJK.s 			page 42


 1482      00000000 
 1483              		.section	.data.debugMessageFrequency,"aw",%progbits
 1484              		.align	2
 1485              		.set	.LANCHOR9,. + 0
 1488              	debugMessageFrequency:
 1489 0000 0A000000 		.word	10
 1490              		.section	.bss.tim4Tot,"aw",%nobits
 1491              		.align	2
 1492              		.set	.LANCHOR4,. + 0
 1495              	tim4Tot:
 1496 0000 00000000 		.space	4
 1497              		.section	.bss.tim5Tot,"aw",%nobits
 1498              		.align	2
 1499              		.set	.LANCHOR5,. + 0
 1502              	tim5Tot:
 1503 0000 00000000 		.space	4
 1504              		.section	.data.fixedFrequency,"aw",%progbits
 1505              		.align	2
 1506              		.set	.LANCHOR0,. + 0
 1509              	fixedFrequency:
 1510 0000 28000000 		.word	40
 1511              		.section	.rodata.str1.4,"aMS",%progbits,1
 1512              		.align	2
 1513              	.LC0:
 1514 0000 54697265 		.ascii	"Tire moi la tirette, que ma bobinette choisse\012\000"
 1514      206D6F69 
 1514      206C6120 
 1514      74697265 
 1514      7474652C 
 1515 002f 00       		.space	1
 1516              	.LC1:
 1517 0030 41747474 		.ascii	"Atttenzion, zest barti !\012\000"
 1517      656E7A69 
 1517      6F6E2C20 
 1517      7A657374 
 1517      20626172 
 1518 004a 0000     		.space	2
 1519              	.LC2:
 1520 004c 46696E20 		.ascii	"Fin de match -- Timeout \012\000"
 1520      6465206D 
 1520      61746368 
 1520      202D2D20 
 1520      54696D65 
 1521 0066 0000     		.space	2
 1522              	.LC3:
 1523 0068 706F7320 		.ascii	"pos : %f / %f / %f\012\000"
 1523      3A202566 
 1523      202F2025 
 1523      66202F20 
 1523      25660A00 
 1524              	.LC4:
 1525 007c 746F7420 		.ascii	"tot : %d / %d / %d / %d\012\000"
 1525      3A202564 
 1525      202F2025 
 1525      64202F20 
 1525      2564202F 
 1526              		.section	.bss.buffer2,"aw",%nobits
ARM GAS  /tmp/ccGrxFJK.s 			page 43


 1527              		.align	2
 1528              		.set	.LANCHOR11,. + 0
 1531              	buffer2:
 1532 0000 00000000 		.space	50
 1532      00000000 
 1532      00000000 
 1532      00000000 
 1532      00000000 
 1533              		.section	.bss.debugCounter,"aw",%nobits
 1534              		.align	2
 1535              		.set	.LANCHOR8,. + 0
 1538              	debugCounter:
 1539 0000 00000000 		.space	4
 1540              		.section	.bss.buffer,"aw",%nobits
 1541              		.align	2
 1542              		.set	.LANCHOR10,. + 0
 1545              	buffer:
 1546 0000 00000000 		.space	50
 1546      00000000 
 1546      00000000 
 1546      00000000 
 1546      00000000 
 1547              		.section	.bss.angle,"aw",%nobits
 1548              		.align	3
 1549              		.set	.LANCHOR3,. + 0
 1552              	angle:
 1553 0000 00000000 		.space	8
 1553      00000000 
 1554              		.section	.bss.consigneGauche,"aw",%nobits
 1555              		.align	2
 1556              		.set	.LANCHOR7,. + 0
 1559              	consigneGauche:
 1560 0000 00000000 		.space	4
 1561              		.text
 1562              	.Letext0:
 1563              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1564              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1565              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1566              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1567              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1568              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1569              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1570              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1571              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1572              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1573              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1574              		.file 13 "<built-in>"
 1575              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 1576              		.file 15 "Inc/main.h"
 1577              		.file 16 "Inc/assert.h"
 1578              		.file 17 "/usr/include/newlib/stdio.h"
 1579              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccGrxFJK.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccGrxFJK.s:21     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccGrxFJK.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccGrxFJK.s:207    .text.MX_GPIO_Init:0000000000000104 $d
     /tmp/ccGrxFJK.s:216    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccGrxFJK.s:220    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccGrxFJK.s:259    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccGrxFJK.s:265    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccGrxFJK.s:269    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccGrxFJK.s:350    .text.MX_TIM2_Init:000000000000005c $d
                            *COM*:000000000000003c htim2
     /tmp/ccGrxFJK.s:355    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccGrxFJK.s:359    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccGrxFJK.s:440    .text.MX_TIM3_Init:000000000000005c $d
                            *COM*:000000000000003c htim3
     /tmp/ccGrxFJK.s:446    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccGrxFJK.s:450    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccGrxFJK.s:522    .text.MX_TIM4_Init:000000000000004c $d
                            *COM*:000000000000003c htim4
     /tmp/ccGrxFJK.s:528    .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccGrxFJK.s:532    .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccGrxFJK.s:604    .text.MX_TIM5_Init:000000000000004c $d
                            *COM*:000000000000003c htim5
     /tmp/ccGrxFJK.s:610    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccGrxFJK.s:614    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccGrxFJK.s:731    .text.MX_TIM1_Init:0000000000000090 $d
                            *COM*:000000000000003c htim1
     /tmp/ccGrxFJK.s:737    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccGrxFJK.s:742    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccGrxFJK.s:856    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccGrxFJK.s:862    .text.moteurDroit:0000000000000000 $t
     /tmp/ccGrxFJK.s:867    .text.moteurDroit:0000000000000000 moteurDroit
     /tmp/ccGrxFJK.s:921    .text.moteurDroit:0000000000000044 $d
     /tmp/ccGrxFJK.s:927    .text.moteurGauche:0000000000000000 $t
     /tmp/ccGrxFJK.s:932    .text.moteurGauche:0000000000000000 moteurGauche
     /tmp/ccGrxFJK.s:986    .text.moteurGauche:0000000000000040 $d
     /tmp/ccGrxFJK.s:992    .text.servoPos:0000000000000000 $t
     /tmp/ccGrxFJK.s:997    .text.servoPos:0000000000000000 servoPos
     /tmp/ccGrxFJK.s:1013   .text.servoPos:0000000000000008 $d
     /tmp/ccGrxFJK.s:1021   .text.main:0000000000000000 $t
     /tmp/ccGrxFJK.s:1026   .text.main:0000000000000000 main
     /tmp/ccGrxFJK.s:1359   .text.main:0000000000000230 $d
     /tmp/ccGrxFJK.s:1394   .text.resetPos:0000000000000000 $t
     /tmp/ccGrxFJK.s:1399   .text.resetPos:0000000000000000 resetPos
     /tmp/ccGrxFJK.s:1421   .text.resetPos:0000000000000018 $d
     /tmp/ccGrxFJK.s:1428   .text.Error_Handler:0000000000000000 $t
     /tmp/ccGrxFJK.s:1433   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccGrxFJK.s:1488   .data.debugMessageFrequency:0000000000000000 debugMessageFrequency
     /tmp/ccGrxFJK.s:1509   .data.fixedFrequency:0000000000000000 fixedFrequency
     /tmp/ccGrxFJK.s:1531   .bss.buffer2:0000000000000000 buffer2
     /tmp/ccGrxFJK.s:1545   .bss.buffer:0000000000000000 buffer
     /tmp/ccGrxFJK.s:1502   .bss.tim5Tot:0000000000000000 tim5Tot
     /tmp/ccGrxFJK.s:1495   .bss.tim4Tot:0000000000000000 tim4Tot
     /tmp/ccGrxFJK.s:1538   .bss.debugCounter:0000000000000000 debugCounter
     /tmp/ccGrxFJK.s:1559   .bss.consigneGauche:0000000000000000 consigneGauche
ARM GAS  /tmp/ccGrxFJK.s 			page 45


     /tmp/ccGrxFJK.s:1467   .bss.consigneDroit:0000000000000000 consigneDroit
     /tmp/ccGrxFJK.s:1552   .bss.angle:0000000000000000 angle
     /tmp/ccGrxFJK.s:1481   .bss.positionY:0000000000000000 positionY
     /tmp/ccGrxFJK.s:1474   .bss.positionX:0000000000000000 positionX
     /tmp/ccGrxFJK.s:1463   .bss.consigneDroit:0000000000000000 $d
     /tmp/ccGrxFJK.s:1470   .bss.positionX:0000000000000000 $d
     /tmp/ccGrxFJK.s:1477   .bss.positionY:0000000000000000 $d
     /tmp/ccGrxFJK.s:1484   .data.debugMessageFrequency:0000000000000000 $d
     /tmp/ccGrxFJK.s:1491   .bss.tim4Tot:0000000000000000 $d
     /tmp/ccGrxFJK.s:1498   .bss.tim5Tot:0000000000000000 $d
     /tmp/ccGrxFJK.s:1505   .data.fixedFrequency:0000000000000000 $d
     /tmp/ccGrxFJK.s:1512   .rodata.str1.4:0000000000000000 $d
     /tmp/ccGrxFJK.s:1527   .bss.buffer2:0000000000000000 $d
     /tmp/ccGrxFJK.s:1534   .bss.debugCounter:0000000000000000 $d
     /tmp/ccGrxFJK.s:1541   .bss.buffer:0000000000000000 $d
     /tmp/ccGrxFJK.s:1548   .bss.angle:0000000000000000 $d
     /tmp/ccGrxFJK.s:1555   .bss.consigneGauche:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_TIM_Encoder_Init
HAL_TIMEx_ConfigBreakDeadTime
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_i2d
__aeabi_dmul
__aeabi_d2iz
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_Encoder_Start
HAL_UART_Transmit
HAL_GPIO_ReadPin
HAL_GetTick
HAL_Delay
updatePos
stateMachine
sprintf
