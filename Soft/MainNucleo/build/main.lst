ARM GAS  /tmp/ccWnw4kM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB130:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccWnw4kM.s 			page 2


  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** #include "assert.h"
  47:Src/main.c    **** /* USER CODE END Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PTD */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PTD */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PD */
  56:Src/main.c    **** #define DEBUG 1
  57:Src/main.c    **** /* USER CODE END PD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PM */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** TIM_HandleTypeDef htim2;
  66:Src/main.c    **** TIM_HandleTypeDef htim3;
  67:Src/main.c    **** TIM_HandleTypeDef htim4;
  68:Src/main.c    **** TIM_HandleTypeDef htim5;
  69:Src/main.c    **** 
  70:Src/main.c    **** UART_HandleTypeDef huart2;
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE BEGIN PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE END PV */
  75:Src/main.c    **** 
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** void SystemClock_Config(void);
  78:Src/main.c    **** static void MX_GPIO_Init(void);
  79:Src/main.c    **** static void MX_USART2_UART_Init(void);
  80:Src/main.c    **** static void MX_TIM2_Init(void);
  81:Src/main.c    **** static void MX_TIM3_Init(void);
  82:Src/main.c    **** static void MX_TIM4_Init(void);
  83:Src/main.c    **** static void MX_TIM5_Init(void);
  84:Src/main.c    **** /* USER CODE BEGIN PFP */
  85:Src/main.c    **** void moteurDroit(int PWM);
  86:Src/main.c    **** void moteurGauche(int PWM);
  87:Src/main.c    **** /* USER CODE END PFP */
  88:Src/main.c    **** 
ARM GAS  /tmp/ccWnw4kM.s 			page 3


  89:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  90:Src/main.c    **** /* USER CODE BEGIN 0 */
  91:Src/main.c    **** double positionX = 0.0;
  92:Src/main.c    **** double positionY = 0.0;
  93:Src/main.c    **** double angle = 0.0;
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE END 0 */
  96:Src/main.c    **** 
  97:Src/main.c    **** /**
  98:Src/main.c    ****   * @brief  The application entry point.
  99:Src/main.c    ****   * @retval int
 100:Src/main.c    ****   */
 101:Src/main.c    **** int main(void)
 102:Src/main.c    **** {
 103:Src/main.c    ****   /* USER CODE BEGIN 1 */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE END 1 */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 110:Src/main.c    ****   HAL_Init();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN Init */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END Init */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Configure the system clock */
 117:Src/main.c    ****   SystemClock_Config();
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* USER CODE END SysInit */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Initialize all configured peripherals */
 124:Src/main.c    ****   MX_GPIO_Init();
 125:Src/main.c    ****   MX_USART2_UART_Init();
 126:Src/main.c    ****   MX_TIM2_Init();
 127:Src/main.c    ****   MX_TIM3_Init();
 128:Src/main.c    ****   MX_TIM4_Init();
 129:Src/main.c    ****   MX_TIM5_Init();
 130:Src/main.c    ****   /* USER CODE BEGIN 2 */
 131:Src/main.c    ****   HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_2);
 132:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 133:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 134:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 135:Src/main.c    ****   /* USER CODE END 2 */
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* Infinite loop */
 138:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 139:Src/main.c    **** 
 140:Src/main.c    ****   HAL_UART_Transmit(&huart2, "Atttenzion, zest barti !", sizeof("Atttenzion, zest barti !"), HAL_MA
 141:Src/main.c    ****   HAL_Delay(1000);
 142:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick();
 143:Src/main.c    ****   int debug = 0;
 144:Src/main.c    ****   char buffer[50] = "";
 145:Src/main.c    ****   char buffer2[50] = "";
ARM GAS  /tmp/ccWnw4kM.s 			page 4


 146:Src/main.c    ****   int tim4tot= 0;
 147:Src/main.c    ****   int tim5tot=0;
 148:Src/main.c    ****   int tim4 = 0;
 149:Src/main.c    ****   int tim5 = 0;
 150:Src/main.c    ****   int oldtim4err = 0;
 151:Src/main.c    ****   int tim4err = 0;
 152:Src/main.c    ****   TIM4->CNT = 30000;
 153:Src/main.c    ****   TIM5->CNT = 30000;
 154:Src/main.c    ****   int timeTracking = 0;
 155:Src/main.c    ****   float P, I, D, consigne;
 156:Src/main.c    ****   P=50;
 157:Src/main.c    ****   I=0;
 158:Src/main.c    ****   D=0;
 159:Src/main.c    ****   moteurDroit(2000);
 160:Src/main.c    ****   //moteurGauche(2000);
 161:Src/main.c    **** 
 162:Src/main.c    ****   while (1)
 163:Src/main.c    ****   {
 164:Src/main.c    ****     while(HAL_GetTick() - oldTicks < 5)
 165:Src/main.c    ****     {}
 166:Src/main.c    ****     oldTicks = HAL_GetTick();
 167:Src/main.c    ****     tim4 = (TIM4->CNT-30000);
 168:Src/main.c    ****     tim5 = -TIM5->CNT+30000;
 169:Src/main.c    ****     
 170:Src/main.c    ****     updatePos(tim4, tim5, &positionX, &positionY, &angle);
 171:Src/main.c    ****     tim4tot += tim4;
 172:Src/main.c    ****     tim5tot += tim5;
 173:Src/main.c    **** 
 174:Src/main.c    ****     consigne = 50;
 175:Src/main.c    ****     tim4err = consigne - tim5;
 176:Src/main.c    ****     float blable = P*tim4err + D*(tim4err - oldtim4err);
 177:Src/main.c    ****     moteurDroit(1500);
 178:Src/main.c    ****     oldtim4err = tim4err;
 179:Src/main.c    ****     
 180:Src/main.c    **** 
 181:Src/main.c    ****     
 182:Src/main.c    ****     debug += 1;
 183:Src/main.c    ****     if (DEBUG)
 184:Src/main.c    ****     {
 185:Src/main.c    ****         if (debug == 100)
 186:Src/main.c    ****         {
 187:Src/main.c    ****             //sprintf(buffer, "%d / %d / %d\n",(int)positionX, (int)positionY, (int)(angle*1000));
 188:Src/main.c    ****             //HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 189:Src/main.c    ****             sprintf(buffer2, "%d / %d / %d / %d\n",(int)tim4tot, (int)tim5tot, (int)blable, tim5);
 190:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 191:Src/main.c    ****             debug = 0;
 192:Src/main.c    ****         }
 193:Src/main.c    ****     }
 194:Src/main.c    ****     
 195:Src/main.c    ****     
 196:Src/main.c    ****     
 197:Src/main.c    ****     
 198:Src/main.c    ****     
 199:Src/main.c    ****     /*
 200:Src/main.c    ****     if(timeTracking < 1000)
 201:Src/main.c    ****     {	
 202:Src/main.c    **** 		sprintf(buffer2, "##############################################\n");
ARM GAS  /tmp/ccWnw4kM.s 			page 5


 203:Src/main.c    **** 		if (timeTracking ==1){ HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);}
 204:Src/main.c    ****         //moteurGauche(2000, 1);
 205:Src/main.c    ****         //moteurDroit(2000, 1);
 206:Src/main.c    ****     }
 207:Src/main.c    ****     else
 208:Src/main.c    ****     {
 209:Src/main.c    **** 		sprintf(buffer2, "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n");
 210:Src/main.c    ****         if(timeTracking == 1000 ){ HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DEL
 211:Src/main.c    ****         //moteurGauche(0, 1);
 212:Src/main.c    ****         //moteurDroit(0, 1);
 213:Src/main.c    ****     }
 214:Src/main.c    ****     if (timeTracking > 3000)
 215:Src/main.c    ****     {
 216:Src/main.c    ****         timeTracking = 0;
 217:Src/main.c    ****     }
 218:Src/main.c    ****     timeTracking += 1;*/
 219:Src/main.c    ****     /* USER CODE END WHILE */
 220:Src/main.c    **** 
 221:Src/main.c    ****     /* USER CODE BEGIN 3 */
 222:Src/main.c    ****   }
 223:Src/main.c    ****   /* USER CODE END 3 */
 224:Src/main.c    **** }
 225:Src/main.c    **** 
 226:Src/main.c    **** /**
 227:Src/main.c    ****   * @brief System Clock Configuration
 228:Src/main.c    ****   * @retval None
 229:Src/main.c    ****   */
 230:Src/main.c    **** void SystemClock_Config(void)
 231:Src/main.c    **** {
 232:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 233:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 234:Src/main.c    **** 
 235:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 236:Src/main.c    ****   */
 237:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 238:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 239:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 240:Src/main.c    ****   */
 241:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 242:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 243:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 244:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 245:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 246:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 247:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 248:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 249:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 250:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 251:Src/main.c    ****   {
 252:Src/main.c    ****     Error_Handler();
 253:Src/main.c    ****   }
 254:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 255:Src/main.c    ****   */
 256:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 257:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 258:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 259:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccWnw4kM.s 			page 6


 260:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 261:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 262:Src/main.c    **** 
 263:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 264:Src/main.c    ****   {
 265:Src/main.c    ****     Error_Handler();
 266:Src/main.c    ****   }
 267:Src/main.c    **** }
 268:Src/main.c    **** 
 269:Src/main.c    **** /**
 270:Src/main.c    ****   * @brief TIM2 Initialization Function
 271:Src/main.c    ****   * @param None
 272:Src/main.c    ****   * @retval None
 273:Src/main.c    ****   */
 274:Src/main.c    **** static void MX_TIM2_Init(void)
 275:Src/main.c    **** {
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 278:Src/main.c    **** 
 279:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 280:Src/main.c    **** 
 281:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 282:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 283:Src/main.c    **** 
 284:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 285:Src/main.c    **** 
 286:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 287:Src/main.c    ****   htim2.Instance = TIM2;
 288:Src/main.c    ****   htim2.Init.Prescaler = 0;
 289:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 290:Src/main.c    ****   htim2.Init.Period = 10000;
 291:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 292:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 293:Src/main.c    ****   {
 294:Src/main.c    ****     Error_Handler();
 295:Src/main.c    ****   }
 296:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 297:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 298:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 299:Src/main.c    ****   {
 300:Src/main.c    ****     Error_Handler();
 301:Src/main.c    ****   }
 302:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 303:Src/main.c    ****   sConfigOC.Pulse = 0;
 304:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 305:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 306:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 307:Src/main.c    ****   {
 308:Src/main.c    ****     Error_Handler();
 309:Src/main.c    ****   }
 310:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 311:Src/main.c    **** 
 312:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 313:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 314:Src/main.c    **** 
 315:Src/main.c    **** }
 316:Src/main.c    **** 
ARM GAS  /tmp/ccWnw4kM.s 			page 7


 317:Src/main.c    **** /**
 318:Src/main.c    ****   * @brief TIM3 Initialization Function
 319:Src/main.c    ****   * @param None
 320:Src/main.c    ****   * @retval None
 321:Src/main.c    ****   */
 322:Src/main.c    **** static void MX_TIM3_Init(void)
 323:Src/main.c    **** {
 324:Src/main.c    **** 
 325:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 326:Src/main.c    **** 
 327:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 328:Src/main.c    **** 
 329:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 330:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 331:Src/main.c    **** 
 332:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 333:Src/main.c    **** 
 334:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 335:Src/main.c    ****   htim3.Instance = TIM3;
 336:Src/main.c    ****   htim3.Init.Prescaler = 0;
 337:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 338:Src/main.c    ****   htim3.Init.Period = 10000;
 339:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 340:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 341:Src/main.c    ****   {
 342:Src/main.c    ****     Error_Handler();
 343:Src/main.c    ****   }
 344:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 345:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 346:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 347:Src/main.c    ****   {
 348:Src/main.c    ****     Error_Handler();
 349:Src/main.c    ****   }
 350:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 351:Src/main.c    ****   sConfigOC.Pulse = 0;
 352:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 353:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 354:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 355:Src/main.c    ****   {
 356:Src/main.c    ****     Error_Handler();
 357:Src/main.c    ****   }
 358:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 359:Src/main.c    **** 
 360:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 361:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 362:Src/main.c    **** 
 363:Src/main.c    **** }
 364:Src/main.c    **** 
 365:Src/main.c    **** /**
 366:Src/main.c    ****   * @brief TIM4 Initialization Function
 367:Src/main.c    ****   * @param None
 368:Src/main.c    ****   * @retval None
 369:Src/main.c    ****   */
 370:Src/main.c    **** static void MX_TIM4_Init(void)
 371:Src/main.c    **** {
 372:Src/main.c    **** 
 373:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
ARM GAS  /tmp/ccWnw4kM.s 			page 8


 374:Src/main.c    **** 
 375:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 376:Src/main.c    **** 
 377:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 378:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 379:Src/main.c    **** 
 380:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 383:Src/main.c    ****   htim4.Instance = TIM4;
 384:Src/main.c    ****   htim4.Init.Prescaler = 0;
 385:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 386:Src/main.c    ****   htim4.Init.Period = 0xffff;
 387:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 388:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 389:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 390:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 391:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 392:Src/main.c    ****   sConfig.IC1Filter = 5;
 393:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 394:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 395:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 396:Src/main.c    ****   sConfig.IC2Filter = 5;
 397:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 398:Src/main.c    ****   {
 399:Src/main.c    ****     Error_Handler();
 400:Src/main.c    ****   }
 401:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 402:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 403:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 404:Src/main.c    ****   {
 405:Src/main.c    ****     Error_Handler();
 406:Src/main.c    ****   }
 407:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 410:Src/main.c    **** 
 411:Src/main.c    **** }
 412:Src/main.c    **** 
 413:Src/main.c    **** /**
 414:Src/main.c    ****   * @brief TIM5 Initialization Function
 415:Src/main.c    ****   * @param None
 416:Src/main.c    ****   * @retval None
 417:Src/main.c    ****   */
 418:Src/main.c    **** static void MX_TIM5_Init(void)
 419:Src/main.c    **** {
 420:Src/main.c    **** 
 421:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 0 */
 422:Src/main.c    **** 
 423:Src/main.c    ****   /* USER CODE END TIM5_Init 0 */
 424:Src/main.c    **** 
 425:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 426:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 427:Src/main.c    **** 
 428:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 1 */
 429:Src/main.c    **** 
 430:Src/main.c    ****   /* USER CODE END TIM5_Init 1 */
ARM GAS  /tmp/ccWnw4kM.s 			page 9


 431:Src/main.c    ****   htim5.Instance = TIM5;
 432:Src/main.c    ****   htim5.Init.Prescaler = 0;
 433:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 434:Src/main.c    ****   htim5.Init.Period = 0xffff;
 435:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 436:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 437:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 438:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 439:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 440:Src/main.c    ****   sConfig.IC1Filter = 5;
 441:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 442:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 443:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 444:Src/main.c    ****   sConfig.IC2Filter = 5;
 445:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 446:Src/main.c    ****   {
 447:Src/main.c    ****     Error_Handler();
 448:Src/main.c    ****   }
 449:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 450:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 451:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 452:Src/main.c    ****   {
 453:Src/main.c    ****     Error_Handler();
 454:Src/main.c    ****   }
 455:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 2 */
 456:Src/main.c    **** 
 457:Src/main.c    ****   /* USER CODE END TIM5_Init 2 */
 458:Src/main.c    **** 
 459:Src/main.c    **** }
 460:Src/main.c    **** 
 461:Src/main.c    **** /**
 462:Src/main.c    ****   * @brief USART2 Initialization Function
 463:Src/main.c    ****   * @param None
 464:Src/main.c    ****   * @retval None
 465:Src/main.c    ****   */
 466:Src/main.c    **** static void MX_USART2_UART_Init(void)
 467:Src/main.c    **** {
 468:Src/main.c    **** 
 469:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 470:Src/main.c    **** 
 471:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 472:Src/main.c    **** 
 473:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 474:Src/main.c    **** 
 475:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 476:Src/main.c    ****   huart2.Instance = USART2;
 477:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 478:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 479:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 480:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 481:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 482:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 483:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 484:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 485:Src/main.c    ****   {
 486:Src/main.c    ****     Error_Handler();
 487:Src/main.c    ****   }
ARM GAS  /tmp/ccWnw4kM.s 			page 10


 488:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 489:Src/main.c    **** 
 490:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 491:Src/main.c    **** 
 492:Src/main.c    **** }
 493:Src/main.c    **** 
 494:Src/main.c    **** /**
 495:Src/main.c    ****   * @brief GPIO Initialization Function
 496:Src/main.c    ****   * @param None
 497:Src/main.c    ****   * @retval None
 498:Src/main.c    ****   */
 499:Src/main.c    **** static void MX_GPIO_Init(void)
 500:Src/main.c    **** {
  28              		.loc 1 500 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 8BB0     		sub	sp, sp, #44
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 501:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 501 0
  44 0004 0024     		movs	r4, #0
  45 0006 0594     		str	r4, [sp, #20]
  46 0008 0694     		str	r4, [sp, #24]
  47 000a 0794     		str	r4, [sp, #28]
  48 000c 0894     		str	r4, [sp, #32]
  49 000e 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 502:Src/main.c    **** 
 503:Src/main.c    ****   /* GPIO Ports Clock Enable */
 504:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  51              		.loc 1 504 0
  52 0010 0194     		str	r4, [sp, #4]
  53 0012 2A4B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57 001c 1A6B     		ldr	r2, [r3, #48]
  58 001e 02F00402 		and	r2, r2, #4
  59 0022 0192     		str	r2, [sp, #4]
  60 0024 019A     		ldr	r2, [sp, #4]
  61              	.LBE2:
  62              	.LBB3:
 505:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  63              		.loc 1 505 0
  64 0026 0294     		str	r4, [sp, #8]
  65 0028 1A6B     		ldr	r2, [r3, #48]
  66 002a 42F08002 		orr	r2, r2, #128
ARM GAS  /tmp/ccWnw4kM.s 			page 11


  67 002e 1A63     		str	r2, [r3, #48]
  68 0030 1A6B     		ldr	r2, [r3, #48]
  69 0032 02F08002 		and	r2, r2, #128
  70 0036 0292     		str	r2, [sp, #8]
  71 0038 029A     		ldr	r2, [sp, #8]
  72              	.LBE3:
  73              	.LBB4:
 506:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  74              		.loc 1 506 0
  75 003a 0394     		str	r4, [sp, #12]
  76 003c 1A6B     		ldr	r2, [r3, #48]
  77 003e 42F00102 		orr	r2, r2, #1
  78 0042 1A63     		str	r2, [r3, #48]
  79 0044 1A6B     		ldr	r2, [r3, #48]
  80 0046 02F00102 		and	r2, r2, #1
  81 004a 0392     		str	r2, [sp, #12]
  82 004c 039A     		ldr	r2, [sp, #12]
  83              	.LBE4:
  84              	.LBB5:
 507:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  85              		.loc 1 507 0
  86 004e 0494     		str	r4, [sp, #16]
  87 0050 1A6B     		ldr	r2, [r3, #48]
  88 0052 42F00202 		orr	r2, r2, #2
  89 0056 1A63     		str	r2, [r3, #48]
  90 0058 1B6B     		ldr	r3, [r3, #48]
  91 005a 03F00203 		and	r3, r3, #2
  92 005e 0493     		str	r3, [sp, #16]
  93 0060 049B     		ldr	r3, [sp, #16]
  94              	.LBE5:
 508:Src/main.c    **** 
 509:Src/main.c    ****   /*Configure GPIO pin Output Level */
 510:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR1_Pin, GPIO_PIN_RESET);
  95              		.loc 1 510 0
  96 0062 174F     		ldr	r7, .L3+4
  97 0064 3846     		mov	r0, r7
  98 0066 4FF48461 		mov	r1, #1056
  99 006a 2246     		mov	r2, r4
 100 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
 511:Src/main.c    **** 
 512:Src/main.c    ****   /*Configure GPIO pin Output Level */
 513:Src/main.c    ****   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 102              		.loc 1 513 0
 103 0070 144D     		ldr	r5, .L3+8
 104 0072 2846     		mov	r0, r5
 105 0074 2021     		movs	r1, #32
 106 0076 2246     		mov	r2, r4
 107 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL1:
 514:Src/main.c    **** 
 515:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 516:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 109              		.loc 1 516 0
 110 007c 4FF40053 		mov	r3, #8192
 111 0080 0593     		str	r3, [sp, #20]
 517:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
ARM GAS  /tmp/ccWnw4kM.s 			page 12


 112              		.loc 1 517 0
 113 0082 114B     		ldr	r3, .L3+12
 114 0084 0693     		str	r3, [sp, #24]
 518:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 115              		.loc 1 518 0
 116 0086 0794     		str	r4, [sp, #28]
 519:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 117              		.loc 1 519 0
 118 0088 1048     		ldr	r0, .L3+16
 119 008a 05A9     		add	r1, sp, #20
 120 008c FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL2:
 520:Src/main.c    **** 
 521:Src/main.c    ****   /*Configure GPIO pins : LD2_Pin DIR1_Pin */
 522:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin|DIR1_Pin;
 122              		.loc 1 522 0
 123 0090 4FF48463 		mov	r3, #1056
 124 0094 0593     		str	r3, [sp, #20]
 523:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 125              		.loc 1 523 0
 126 0096 0126     		movs	r6, #1
 127 0098 0696     		str	r6, [sp, #24]
 524:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 524 0
 129 009a 0794     		str	r4, [sp, #28]
 525:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 130              		.loc 1 525 0
 131 009c 0894     		str	r4, [sp, #32]
 526:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 132              		.loc 1 526 0
 133 009e 3846     		mov	r0, r7
 134 00a0 05A9     		add	r1, sp, #20
 135 00a2 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL3:
 527:Src/main.c    **** 
 528:Src/main.c    ****   /*Configure GPIO pin : DIR2_Pin */
 529:Src/main.c    ****   GPIO_InitStruct.Pin = DIR2_Pin;
 137              		.loc 1 529 0
 138 00a6 2023     		movs	r3, #32
 139 00a8 0593     		str	r3, [sp, #20]
 530:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 140              		.loc 1 530 0
 141 00aa 0696     		str	r6, [sp, #24]
 531:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 142              		.loc 1 531 0
 143 00ac 0794     		str	r4, [sp, #28]
 532:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 144              		.loc 1 532 0
 145 00ae 0894     		str	r4, [sp, #32]
 533:Src/main.c    ****   HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 146              		.loc 1 533 0
 147 00b0 2846     		mov	r0, r5
 148 00b2 05A9     		add	r1, sp, #20
 149 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
 150              	.LVL4:
 534:Src/main.c    **** 
 535:Src/main.c    **** }
ARM GAS  /tmp/ccWnw4kM.s 			page 13


 151              		.loc 1 535 0
 152 00b8 0BB0     		add	sp, sp, #44
 153              	.LCFI2:
 154              		.cfi_def_cfa_offset 20
 155              		@ sp needed
 156 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 157              	.L4:
 158              		.align	2
 159              	.L3:
 160 00bc 00380240 		.word	1073887232
 161 00c0 00000240 		.word	1073872896
 162 00c4 00040240 		.word	1073873920
 163 00c8 00002110 		.word	270598144
 164 00cc 00080240 		.word	1073874944
 165              		.cfi_endproc
 166              	.LFE130:
 168              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 169              		.align	2
 170              		.thumb
 171              		.thumb_func
 173              	MX_USART2_UART_Init:
 174              	.LFB129:
 467:Src/main.c    **** 
 175              		.loc 1 467 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179 0000 08B5     		push	{r3, lr}
 180              	.LCFI3:
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 3, -8
 183              		.cfi_offset 14, -4
 476:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 184              		.loc 1 476 0
 185 0002 0848     		ldr	r0, .L7
 186 0004 084B     		ldr	r3, .L7+4
 187 0006 0360     		str	r3, [r0]
 477:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 188              		.loc 1 477 0
 189 0008 4FF4E133 		mov	r3, #115200
 190 000c 4360     		str	r3, [r0, #4]
 478:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 191              		.loc 1 478 0
 192 000e 0023     		movs	r3, #0
 193 0010 8360     		str	r3, [r0, #8]
 479:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 194              		.loc 1 479 0
 195 0012 C360     		str	r3, [r0, #12]
 480:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 196              		.loc 1 480 0
 197 0014 0361     		str	r3, [r0, #16]
 481:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 198              		.loc 1 481 0
 199 0016 0C22     		movs	r2, #12
 200 0018 4261     		str	r2, [r0, #20]
 482:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 201              		.loc 1 482 0
ARM GAS  /tmp/ccWnw4kM.s 			page 14


 202 001a 8361     		str	r3, [r0, #24]
 483:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 203              		.loc 1 483 0
 204 001c C361     		str	r3, [r0, #28]
 484:Src/main.c    ****   {
 205              		.loc 1 484 0
 206 001e FFF7FEFF 		bl	HAL_UART_Init
 207              	.LVL5:
 208 0022 08BD     		pop	{r3, pc}
 209              	.L8:
 210              		.align	2
 211              	.L7:
 212 0024 00000000 		.word	huart2
 213 0028 00440040 		.word	1073759232
 214              		.cfi_endproc
 215              	.LFE129:
 217              		.section	.text.MX_TIM2_Init,"ax",%progbits
 218              		.align	2
 219              		.thumb
 220              		.thumb_func
 222              	MX_TIM2_Init:
 223              	.LFB125:
 275:Src/main.c    **** 
 224              		.loc 1 275 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 40
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228 0000 30B5     		push	{r4, r5, lr}
 229              	.LCFI4:
 230              		.cfi_def_cfa_offset 12
 231              		.cfi_offset 4, -12
 232              		.cfi_offset 5, -8
 233              		.cfi_offset 14, -4
 234 0002 8BB0     		sub	sp, sp, #44
 235              	.LCFI5:
 236              		.cfi_def_cfa_offset 56
 281:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 237              		.loc 1 281 0
 238 0004 0024     		movs	r4, #0
 239 0006 0894     		str	r4, [sp, #32]
 240 0008 0994     		str	r4, [sp, #36]
 282:Src/main.c    **** 
 241              		.loc 1 282 0
 242 000a 0194     		str	r4, [sp, #4]
 243 000c 0294     		str	r4, [sp, #8]
 244 000e 0394     		str	r4, [sp, #12]
 245 0010 0494     		str	r4, [sp, #16]
 246 0012 0594     		str	r4, [sp, #20]
 247 0014 0694     		str	r4, [sp, #24]
 248 0016 0794     		str	r4, [sp, #28]
 287:Src/main.c    ****   htim2.Init.Prescaler = 0;
 249              		.loc 1 287 0
 250 0018 104D     		ldr	r5, .L11
 251 001a 4FF08043 		mov	r3, #1073741824
 252 001e 2B60     		str	r3, [r5]
 288:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 253              		.loc 1 288 0
ARM GAS  /tmp/ccWnw4kM.s 			page 15


 254 0020 6C60     		str	r4, [r5, #4]
 289:Src/main.c    ****   htim2.Init.Period = 10000;
 255              		.loc 1 289 0
 256 0022 AC60     		str	r4, [r5, #8]
 290:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 257              		.loc 1 290 0
 258 0024 42F21073 		movw	r3, #10000
 259 0028 EB60     		str	r3, [r5, #12]
 291:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 260              		.loc 1 291 0
 261 002a 2C61     		str	r4, [r5, #16]
 292:Src/main.c    ****   {
 262              		.loc 1 292 0
 263 002c 2846     		mov	r0, r5
 264 002e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 265              	.LVL6:
 296:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 266              		.loc 1 296 0
 267 0032 0894     		str	r4, [sp, #32]
 297:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 268              		.loc 1 297 0
 269 0034 0994     		str	r4, [sp, #36]
 298:Src/main.c    ****   {
 270              		.loc 1 298 0
 271 0036 2846     		mov	r0, r5
 272 0038 08A9     		add	r1, sp, #32
 273 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 274              	.LVL7:
 302:Src/main.c    ****   sConfigOC.Pulse = 0;
 275              		.loc 1 302 0
 276 003e 6023     		movs	r3, #96
 277 0040 0193     		str	r3, [sp, #4]
 303:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 278              		.loc 1 303 0
 279 0042 0294     		str	r4, [sp, #8]
 304:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 280              		.loc 1 304 0
 281 0044 0394     		str	r4, [sp, #12]
 305:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 282              		.loc 1 305 0
 283 0046 0594     		str	r4, [sp, #20]
 306:Src/main.c    ****   {
 284              		.loc 1 306 0
 285 0048 2846     		mov	r0, r5
 286 004a 01A9     		add	r1, sp, #4
 287 004c 0422     		movs	r2, #4
 288 004e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 289              	.LVL8:
 313:Src/main.c    **** 
 290              		.loc 1 313 0
 291 0052 2846     		mov	r0, r5
 292 0054 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 293              	.LVL9:
 315:Src/main.c    **** 
 294              		.loc 1 315 0
 295 0058 0BB0     		add	sp, sp, #44
 296              	.LCFI6:
ARM GAS  /tmp/ccWnw4kM.s 			page 16


 297              		.cfi_def_cfa_offset 12
 298              		@ sp needed
 299 005a 30BD     		pop	{r4, r5, pc}
 300              	.L12:
 301              		.align	2
 302              	.L11:
 303 005c 00000000 		.word	htim2
 304              		.cfi_endproc
 305              	.LFE125:
 307              		.section	.text.MX_TIM3_Init,"ax",%progbits
 308              		.align	2
 309              		.thumb
 310              		.thumb_func
 312              	MX_TIM3_Init:
 313              	.LFB126:
 323:Src/main.c    **** 
 314              		.loc 1 323 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 40
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318 0000 30B5     		push	{r4, r5, lr}
 319              	.LCFI7:
 320              		.cfi_def_cfa_offset 12
 321              		.cfi_offset 4, -12
 322              		.cfi_offset 5, -8
 323              		.cfi_offset 14, -4
 324 0002 8BB0     		sub	sp, sp, #44
 325              	.LCFI8:
 326              		.cfi_def_cfa_offset 56
 329:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 327              		.loc 1 329 0
 328 0004 0024     		movs	r4, #0
 329 0006 0894     		str	r4, [sp, #32]
 330 0008 0994     		str	r4, [sp, #36]
 330:Src/main.c    **** 
 331              		.loc 1 330 0
 332 000a 0194     		str	r4, [sp, #4]
 333 000c 0294     		str	r4, [sp, #8]
 334 000e 0394     		str	r4, [sp, #12]
 335 0010 0494     		str	r4, [sp, #16]
 336 0012 0594     		str	r4, [sp, #20]
 337 0014 0694     		str	r4, [sp, #24]
 338 0016 0794     		str	r4, [sp, #28]
 335:Src/main.c    ****   htim3.Init.Prescaler = 0;
 339              		.loc 1 335 0
 340 0018 104D     		ldr	r5, .L15
 341 001a 114B     		ldr	r3, .L15+4
 342 001c 2B60     		str	r3, [r5]
 336:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 343              		.loc 1 336 0
 344 001e 6C60     		str	r4, [r5, #4]
 337:Src/main.c    ****   htim3.Init.Period = 10000;
 345              		.loc 1 337 0
 346 0020 AC60     		str	r4, [r5, #8]
 338:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 347              		.loc 1 338 0
 348 0022 42F21073 		movw	r3, #10000
ARM GAS  /tmp/ccWnw4kM.s 			page 17


 349 0026 EB60     		str	r3, [r5, #12]
 339:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 350              		.loc 1 339 0
 351 0028 2C61     		str	r4, [r5, #16]
 340:Src/main.c    ****   {
 352              		.loc 1 340 0
 353 002a 2846     		mov	r0, r5
 354 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 355              	.LVL10:
 344:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 356              		.loc 1 344 0
 357 0030 0894     		str	r4, [sp, #32]
 345:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 358              		.loc 1 345 0
 359 0032 0994     		str	r4, [sp, #36]
 346:Src/main.c    ****   {
 360              		.loc 1 346 0
 361 0034 2846     		mov	r0, r5
 362 0036 08A9     		add	r1, sp, #32
 363 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 364              	.LVL11:
 350:Src/main.c    ****   sConfigOC.Pulse = 0;
 365              		.loc 1 350 0
 366 003c 6023     		movs	r3, #96
 367 003e 0193     		str	r3, [sp, #4]
 351:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 368              		.loc 1 351 0
 369 0040 0294     		str	r4, [sp, #8]
 352:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 370              		.loc 1 352 0
 371 0042 0394     		str	r4, [sp, #12]
 353:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 372              		.loc 1 353 0
 373 0044 0594     		str	r4, [sp, #20]
 354:Src/main.c    ****   {
 374              		.loc 1 354 0
 375 0046 2846     		mov	r0, r5
 376 0048 01A9     		add	r1, sp, #4
 377 004a 2246     		mov	r2, r4
 378 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 379              	.LVL12:
 361:Src/main.c    **** 
 380              		.loc 1 361 0
 381 0050 2846     		mov	r0, r5
 382 0052 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 383              	.LVL13:
 363:Src/main.c    **** 
 384              		.loc 1 363 0
 385 0056 0BB0     		add	sp, sp, #44
 386              	.LCFI9:
 387              		.cfi_def_cfa_offset 12
 388              		@ sp needed
 389 0058 30BD     		pop	{r4, r5, pc}
 390              	.L16:
 391 005a 00BF     		.align	2
 392              	.L15:
 393 005c 00000000 		.word	htim3
ARM GAS  /tmp/ccWnw4kM.s 			page 18


 394 0060 00040040 		.word	1073742848
 395              		.cfi_endproc
 396              	.LFE126:
 398              		.section	.text.MX_TIM4_Init,"ax",%progbits
 399              		.align	2
 400              		.thumb
 401              		.thumb_func
 403              	MX_TIM4_Init:
 404              	.LFB127:
 371:Src/main.c    **** 
 405              		.loc 1 371 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 48
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409 0000 30B5     		push	{r4, r5, lr}
 410              	.LCFI10:
 411              		.cfi_def_cfa_offset 12
 412              		.cfi_offset 4, -12
 413              		.cfi_offset 5, -8
 414              		.cfi_offset 14, -4
 415 0002 8DB0     		sub	sp, sp, #52
 416              	.LCFI11:
 417              		.cfi_def_cfa_offset 64
 377:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 418              		.loc 1 377 0
 419 0004 0024     		movs	r4, #0
 420 0006 0494     		str	r4, [sp, #16]
 421 0008 0694     		str	r4, [sp, #24]
 422 000a 0894     		str	r4, [sp, #32]
 423 000c 0A94     		str	r4, [sp, #40]
 378:Src/main.c    **** 
 424              		.loc 1 378 0
 425 000e 0194     		str	r4, [sp, #4]
 426 0010 0294     		str	r4, [sp, #8]
 383:Src/main.c    ****   htim4.Init.Prescaler = 0;
 427              		.loc 1 383 0
 428 0012 0E4D     		ldr	r5, .L19
 429 0014 0E4B     		ldr	r3, .L19+4
 430 0016 2B60     		str	r3, [r5]
 384:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 431              		.loc 1 384 0
 432 0018 6C60     		str	r4, [r5, #4]
 385:Src/main.c    ****   htim4.Init.Period = 0xffff;
 433              		.loc 1 385 0
 434 001a AC60     		str	r4, [r5, #8]
 386:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 435              		.loc 1 386 0
 436 001c 4FF6FF73 		movw	r3, #65535
 437 0020 EB60     		str	r3, [r5, #12]
 387:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 438              		.loc 1 387 0
 439 0022 2C61     		str	r4, [r5, #16]
 388:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 440              		.loc 1 388 0
 441 0024 0123     		movs	r3, #1
 442 0026 0393     		str	r3, [sp, #12]
 390:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
ARM GAS  /tmp/ccWnw4kM.s 			page 19


 443              		.loc 1 390 0
 444 0028 0593     		str	r3, [sp, #20]
 392:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 445              		.loc 1 392 0
 446 002a 0522     		movs	r2, #5
 447 002c 0792     		str	r2, [sp, #28]
 394:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 448              		.loc 1 394 0
 449 002e 0993     		str	r3, [sp, #36]
 396:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 450              		.loc 1 396 0
 451 0030 0B92     		str	r2, [sp, #44]
 397:Src/main.c    ****   {
 452              		.loc 1 397 0
 453 0032 2846     		mov	r0, r5
 454 0034 03A9     		add	r1, sp, #12
 455 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 456              	.LVL14:
 401:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 457              		.loc 1 401 0
 458 003a 0194     		str	r4, [sp, #4]
 402:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 459              		.loc 1 402 0
 460 003c 0294     		str	r4, [sp, #8]
 403:Src/main.c    ****   {
 461              		.loc 1 403 0
 462 003e 2846     		mov	r0, r5
 463 0040 01A9     		add	r1, sp, #4
 464 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 465              	.LVL15:
 411:Src/main.c    **** 
 466              		.loc 1 411 0
 467 0046 0DB0     		add	sp, sp, #52
 468              	.LCFI12:
 469              		.cfi_def_cfa_offset 12
 470              		@ sp needed
 471 0048 30BD     		pop	{r4, r5, pc}
 472              	.L20:
 473 004a 00BF     		.align	2
 474              	.L19:
 475 004c 00000000 		.word	htim4
 476 0050 00080040 		.word	1073743872
 477              		.cfi_endproc
 478              	.LFE127:
 480              		.section	.text.MX_TIM5_Init,"ax",%progbits
 481              		.align	2
 482              		.thumb
 483              		.thumb_func
 485              	MX_TIM5_Init:
 486              	.LFB128:
 419:Src/main.c    **** 
 487              		.loc 1 419 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 48
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491 0000 30B5     		push	{r4, r5, lr}
 492              	.LCFI13:
ARM GAS  /tmp/ccWnw4kM.s 			page 20


 493              		.cfi_def_cfa_offset 12
 494              		.cfi_offset 4, -12
 495              		.cfi_offset 5, -8
 496              		.cfi_offset 14, -4
 497 0002 8DB0     		sub	sp, sp, #52
 498              	.LCFI14:
 499              		.cfi_def_cfa_offset 64
 425:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 500              		.loc 1 425 0
 501 0004 0024     		movs	r4, #0
 502 0006 0494     		str	r4, [sp, #16]
 503 0008 0694     		str	r4, [sp, #24]
 504 000a 0894     		str	r4, [sp, #32]
 505 000c 0A94     		str	r4, [sp, #40]
 426:Src/main.c    **** 
 506              		.loc 1 426 0
 507 000e 0194     		str	r4, [sp, #4]
 508 0010 0294     		str	r4, [sp, #8]
 431:Src/main.c    ****   htim5.Init.Prescaler = 0;
 509              		.loc 1 431 0
 510 0012 0E4D     		ldr	r5, .L23
 511 0014 0E4B     		ldr	r3, .L23+4
 512 0016 2B60     		str	r3, [r5]
 432:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 513              		.loc 1 432 0
 514 0018 6C60     		str	r4, [r5, #4]
 433:Src/main.c    ****   htim5.Init.Period = 0xffff;
 515              		.loc 1 433 0
 516 001a AC60     		str	r4, [r5, #8]
 434:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 517              		.loc 1 434 0
 518 001c 4FF6FF73 		movw	r3, #65535
 519 0020 EB60     		str	r3, [r5, #12]
 435:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 520              		.loc 1 435 0
 521 0022 2C61     		str	r4, [r5, #16]
 436:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 522              		.loc 1 436 0
 523 0024 0123     		movs	r3, #1
 524 0026 0393     		str	r3, [sp, #12]
 438:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 525              		.loc 1 438 0
 526 0028 0593     		str	r3, [sp, #20]
 440:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 527              		.loc 1 440 0
 528 002a 0522     		movs	r2, #5
 529 002c 0792     		str	r2, [sp, #28]
 442:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 530              		.loc 1 442 0
 531 002e 0993     		str	r3, [sp, #36]
 444:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 532              		.loc 1 444 0
 533 0030 0B92     		str	r2, [sp, #44]
 445:Src/main.c    ****   {
 534              		.loc 1 445 0
 535 0032 2846     		mov	r0, r5
 536 0034 03A9     		add	r1, sp, #12
ARM GAS  /tmp/ccWnw4kM.s 			page 21


 537 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 538              	.LVL16:
 449:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 539              		.loc 1 449 0
 540 003a 0194     		str	r4, [sp, #4]
 450:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 541              		.loc 1 450 0
 542 003c 0294     		str	r4, [sp, #8]
 451:Src/main.c    ****   {
 543              		.loc 1 451 0
 544 003e 2846     		mov	r0, r5
 545 0040 01A9     		add	r1, sp, #4
 546 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 547              	.LVL17:
 459:Src/main.c    **** 
 548              		.loc 1 459 0
 549 0046 0DB0     		add	sp, sp, #52
 550              	.LCFI15:
 551              		.cfi_def_cfa_offset 12
 552              		@ sp needed
 553 0048 30BD     		pop	{r4, r5, pc}
 554              	.L24:
 555 004a 00BF     		.align	2
 556              	.L23:
 557 004c 00000000 		.word	htim5
 558 0050 000C0040 		.word	1073744896
 559              		.cfi_endproc
 560              	.LFE128:
 562              		.section	.text.SystemClock_Config,"ax",%progbits
 563              		.align	2
 564              		.global	SystemClock_Config
 565              		.thumb
 566              		.thumb_func
 568              	SystemClock_Config:
 569              	.LFB124:
 231:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 570              		.loc 1 231 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 80
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574 0000 30B5     		push	{r4, r5, lr}
 575              	.LCFI16:
 576              		.cfi_def_cfa_offset 12
 577              		.cfi_offset 4, -12
 578              		.cfi_offset 5, -8
 579              		.cfi_offset 14, -4
 580 0002 95B0     		sub	sp, sp, #84
 581              	.LCFI17:
 582              		.cfi_def_cfa_offset 96
 232:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 583              		.loc 1 232 0
 584 0004 0024     		movs	r4, #0
 585 0006 0894     		str	r4, [sp, #32]
 586 0008 0994     		str	r4, [sp, #36]
 587 000a 0A94     		str	r4, [sp, #40]
 588 000c 0B94     		str	r4, [sp, #44]
 589 000e 0C94     		str	r4, [sp, #48]
ARM GAS  /tmp/ccWnw4kM.s 			page 22


 590 0010 0D94     		str	r4, [sp, #52]
 591 0012 0E94     		str	r4, [sp, #56]
 592 0014 0F94     		str	r4, [sp, #60]
 593 0016 1094     		str	r4, [sp, #64]
 594 0018 1194     		str	r4, [sp, #68]
 595 001a 1294     		str	r4, [sp, #72]
 596 001c 1394     		str	r4, [sp, #76]
 233:Src/main.c    **** 
 597              		.loc 1 233 0
 598 001e 0394     		str	r4, [sp, #12]
 599 0020 0494     		str	r4, [sp, #16]
 600 0022 0594     		str	r4, [sp, #20]
 601 0024 0694     		str	r4, [sp, #24]
 602 0026 0794     		str	r4, [sp, #28]
 603              	.LBB6:
 237:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 604              		.loc 1 237 0
 605 0028 0194     		str	r4, [sp, #4]
 606 002a 1C4B     		ldr	r3, .L27
 607 002c 1A6C     		ldr	r2, [r3, #64]
 608 002e 42F08052 		orr	r2, r2, #268435456
 609 0032 1A64     		str	r2, [r3, #64]
 610 0034 1B6C     		ldr	r3, [r3, #64]
 611 0036 03F08053 		and	r3, r3, #268435456
 612 003a 0193     		str	r3, [sp, #4]
 613 003c 019B     		ldr	r3, [sp, #4]
 614              	.LBE6:
 615              	.LBB7:
 238:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 616              		.loc 1 238 0
 617 003e 0294     		str	r4, [sp, #8]
 618 0040 174A     		ldr	r2, .L27+4
 619 0042 1368     		ldr	r3, [r2]
 620 0044 23F44043 		bic	r3, r3, #49152
 621 0048 43F40043 		orr	r3, r3, #32768
 622 004c 1360     		str	r3, [r2]
 623 004e 1368     		ldr	r3, [r2]
 624 0050 03F44043 		and	r3, r3, #49152
 625 0054 0293     		str	r3, [sp, #8]
 626 0056 029B     		ldr	r3, [sp, #8]
 627              	.LBE7:
 241:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 628              		.loc 1 241 0
 629 0058 0225     		movs	r5, #2
 630 005a 0895     		str	r5, [sp, #32]
 242:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 631              		.loc 1 242 0
 632 005c 0123     		movs	r3, #1
 633 005e 0B93     		str	r3, [sp, #44]
 243:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 634              		.loc 1 243 0
 635 0060 1023     		movs	r3, #16
 636 0062 0C93     		str	r3, [sp, #48]
 244:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 637              		.loc 1 244 0
 638 0064 0E95     		str	r5, [sp, #56]
 245:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
ARM GAS  /tmp/ccWnw4kM.s 			page 23


 639              		.loc 1 245 0
 640 0066 0F94     		str	r4, [sp, #60]
 246:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 641              		.loc 1 246 0
 642 0068 1093     		str	r3, [sp, #64]
 247:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 643              		.loc 1 247 0
 644 006a 4FF4A873 		mov	r3, #336
 645 006e 1193     		str	r3, [sp, #68]
 248:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 646              		.loc 1 248 0
 647 0070 0423     		movs	r3, #4
 648 0072 1293     		str	r3, [sp, #72]
 249:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 649              		.loc 1 249 0
 650 0074 0723     		movs	r3, #7
 651 0076 1393     		str	r3, [sp, #76]
 250:Src/main.c    ****   {
 652              		.loc 1 250 0
 653 0078 08A8     		add	r0, sp, #32
 654 007a FFF7FEFF 		bl	HAL_RCC_OscConfig
 655              	.LVL18:
 256:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 656              		.loc 1 256 0
 657 007e 0F23     		movs	r3, #15
 658 0080 0393     		str	r3, [sp, #12]
 258:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 659              		.loc 1 258 0
 660 0082 0495     		str	r5, [sp, #16]
 259:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 661              		.loc 1 259 0
 662 0084 0594     		str	r4, [sp, #20]
 260:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 663              		.loc 1 260 0
 664 0086 4FF48053 		mov	r3, #4096
 665 008a 0693     		str	r3, [sp, #24]
 261:Src/main.c    **** 
 666              		.loc 1 261 0
 667 008c 0794     		str	r4, [sp, #28]
 263:Src/main.c    ****   {
 668              		.loc 1 263 0
 669 008e 03A8     		add	r0, sp, #12
 670 0090 2946     		mov	r1, r5
 671 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 672              	.LVL19:
 267:Src/main.c    **** 
 673              		.loc 1 267 0
 674 0096 15B0     		add	sp, sp, #84
 675              	.LCFI18:
 676              		.cfi_def_cfa_offset 12
 677              		@ sp needed
 678 0098 30BD     		pop	{r4, r5, pc}
 679              	.L28:
 680 009a 00BF     		.align	2
 681              	.L27:
 682 009c 00380240 		.word	1073887232
 683 00a0 00700040 		.word	1073770496
ARM GAS  /tmp/ccWnw4kM.s 			page 24


 684              		.cfi_endproc
 685              	.LFE124:
 687              		.section	.text.moteurDroit,"ax",%progbits
 688              		.align	2
 689              		.global	moteurDroit
 690              		.thumb
 691              		.thumb_func
 693              	moteurDroit:
 694              	.LFB131:
 536:Src/main.c    **** 
 537:Src/main.c    **** /* USER CODE BEGIN 4 */
 538:Src/main.c    **** void moteurDroit(int PWM)
 539:Src/main.c    **** {
 695              		.loc 1 539 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              	.LVL20:
 700 0000 10B5     		push	{r4, lr}
 701              	.LCFI19:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 4, -8
 704              		.cfi_offset 14, -4
 540:Src/main.c    ****     if(PWM == abs(PWM))
 705              		.loc 1 540 0
 706 0002 80EAE074 		eor	r4, r0, r0, asr #31
 707 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 708 000a 8442     		cmp	r4, r0
 709 000c 06D1     		bne	.L30
 541:Src/main.c    ****     {
 542:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 710              		.loc 1 542 0
 711 000e 0D48     		ldr	r0, .L35
 712              	.LVL21:
 713 0010 4FF48061 		mov	r1, #1024
 714 0014 0022     		movs	r2, #0
 715 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 716              	.LVL22:
 717 001a 05E0     		b	.L31
 718              	.LVL23:
 719              	.L30:
 543:Src/main.c    ****     }
 544:Src/main.c    ****     else
 545:Src/main.c    ****     {
 546:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 720              		.loc 1 546 0
 721 001c 0948     		ldr	r0, .L35
 722              	.LVL24:
 723 001e 4FF48061 		mov	r1, #1024
 724 0022 0122     		movs	r2, #1
 725 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 726              	.LVL25:
 727              	.L31:
 547:Src/main.c    ****     }
 548:Src/main.c    ****     if (abs(PWM) > 5000)
 728              		.loc 1 548 0
 729 0028 41F28833 		movw	r3, #5000
ARM GAS  /tmp/ccWnw4kM.s 			page 25


 730 002c 9C42     		cmp	r4, r3
 731 002e 05DD     		ble	.L32
 549:Src/main.c    ****     {
 550:Src/main.c    **** 		htim2.Instance->CCR2 = 5000;
 732              		.loc 1 550 0
 733 0030 054B     		ldr	r3, .L35+4
 734 0032 1B68     		ldr	r3, [r3]
 735 0034 41F28832 		movw	r2, #5000
 736 0038 9A63     		str	r2, [r3, #56]
 737 003a 10BD     		pop	{r4, pc}
 738              	.L32:
 551:Src/main.c    ****     }
 552:Src/main.c    ****     else 
 553:Src/main.c    ****     {
 554:Src/main.c    **** 		htim2.Instance->CCR2 = abs(PWM);
 739              		.loc 1 554 0
 740 003c 024B     		ldr	r3, .L35+4
 741 003e 1B68     		ldr	r3, [r3]
 742 0040 9C63     		str	r4, [r3, #56]
 743 0042 10BD     		pop	{r4, pc}
 744              	.L36:
 745              		.align	2
 746              	.L35:
 747 0044 00000240 		.word	1073872896
 748 0048 00000000 		.word	htim2
 749              		.cfi_endproc
 750              	.LFE131:
 752              		.section	.text.main,"ax",%progbits
 753              		.align	2
 754              		.global	main
 755              		.thumb
 756              		.thumb_func
 758              	main:
 759              	.LFB123:
 102:Src/main.c    ****   /* USER CODE BEGIN 1 */
 760              		.loc 1 102 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 56
 763              		@ frame_needed = 0, uses_anonymous_args = 0
 764 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 765              	.LCFI20:
 766              		.cfi_def_cfa_offset 32
 767              		.cfi_offset 4, -32
 768              		.cfi_offset 5, -28
 769              		.cfi_offset 6, -24
 770              		.cfi_offset 7, -20
 771              		.cfi_offset 8, -16
 772              		.cfi_offset 9, -12
 773              		.cfi_offset 10, -8
 774              		.cfi_offset 14, -4
 775 0004 2DED028B 		fstmfdd	sp!, {d8}
 776              	.LCFI21:
 777              		.cfi_def_cfa_offset 40
 778              		.cfi_offset 80, -40
 779              		.cfi_offset 81, -36
 780 0008 90B0     		sub	sp, sp, #64
 781              	.LCFI22:
ARM GAS  /tmp/ccWnw4kM.s 			page 26


 782              		.cfi_def_cfa_offset 104
 110:Src/main.c    **** 
 783              		.loc 1 110 0
 784 000a FFF7FEFF 		bl	HAL_Init
 785              	.LVL26:
 117:Src/main.c    **** 
 786              		.loc 1 117 0
 787 000e FFF7FEFF 		bl	SystemClock_Config
 788              	.LVL27:
 124:Src/main.c    ****   MX_USART2_UART_Init();
 789              		.loc 1 124 0
 790 0012 FFF7FEFF 		bl	MX_GPIO_Init
 791              	.LVL28:
 125:Src/main.c    ****   MX_TIM2_Init();
 792              		.loc 1 125 0
 793 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 794              	.LVL29:
 126:Src/main.c    ****   MX_TIM3_Init();
 795              		.loc 1 126 0
 796 001a FFF7FEFF 		bl	MX_TIM2_Init
 797              	.LVL30:
 127:Src/main.c    ****   MX_TIM4_Init();
 798              		.loc 1 127 0
 799 001e FFF7FEFF 		bl	MX_TIM3_Init
 800              	.LVL31:
 128:Src/main.c    ****   MX_TIM5_Init();
 801              		.loc 1 128 0
 802 0022 FFF7FEFF 		bl	MX_TIM4_Init
 803              	.LVL32:
 129:Src/main.c    ****   /* USER CODE BEGIN 2 */
 804              		.loc 1 129 0
 805 0026 FFF7FEFF 		bl	MX_TIM5_Init
 806              	.LVL33:
 131:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 807              		.loc 1 131 0
 808 002a 4A48     		ldr	r0, .L42
 809 002c 0421     		movs	r1, #4
 810 002e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 811              	.LVL34:
 132:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 812              		.loc 1 132 0
 813 0032 4948     		ldr	r0, .L42+4
 814 0034 0021     		movs	r1, #0
 815 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 816              	.LVL35:
 133:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 817              		.loc 1 133 0
 818 003a 4848     		ldr	r0, .L42+8
 819 003c 1821     		movs	r1, #24
 820 003e FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 821              	.LVL36:
 134:Src/main.c    ****   /* USER CODE END 2 */
 822              		.loc 1 134 0
 823 0042 4748     		ldr	r0, .L42+12
 824 0044 1821     		movs	r1, #24
 825 0046 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 826              	.LVL37:
ARM GAS  /tmp/ccWnw4kM.s 			page 27


 140:Src/main.c    ****   HAL_Delay(1000);
 827              		.loc 1 140 0
 828 004a 4648     		ldr	r0, .L42+16
 829 004c 4649     		ldr	r1, .L42+20
 830 004e 1922     		movs	r2, #25
 831 0050 4FF0FF33 		mov	r3, #-1
 832 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 833              	.LVL38:
 141:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick();
 834              		.loc 1 141 0
 835 0058 4FF47A70 		mov	r0, #1000
 836 005c FFF7FEFF 		bl	HAL_Delay
 837              	.LVL39:
 142:Src/main.c    ****   int debug = 0;
 838              		.loc 1 142 0
 839 0060 FFF7FEFF 		bl	HAL_GetTick
 840              	.LVL40:
 841 0064 0446     		mov	r4, r0
 842              	.LVL41:
 145:Src/main.c    ****   int tim4tot= 0;
 843              		.loc 1 145 0
 844 0066 0025     		movs	r5, #0
 845 0068 0395     		str	r5, [sp, #12]
 846 006a 0495     		str	r5, [sp, #16]
 847 006c 0595     		str	r5, [sp, #20]
 848 006e 0695     		str	r5, [sp, #24]
 849 0070 0795     		str	r5, [sp, #28]
 850 0072 0895     		str	r5, [sp, #32]
 851 0074 0995     		str	r5, [sp, #36]
 852 0076 0A95     		str	r5, [sp, #40]
 853 0078 0B95     		str	r5, [sp, #44]
 854 007a 0C95     		str	r5, [sp, #48]
 855 007c 0D95     		str	r5, [sp, #52]
 856 007e 0E95     		str	r5, [sp, #56]
 857 0080 ADF83C50 		strh	r5, [sp, #60]	@ movhi
 858              	.LVL42:
 152:Src/main.c    ****   TIM5->CNT = 30000;
 859              		.loc 1 152 0
 860 0084 47F23053 		movw	r3, #30000
 861 0088 384A     		ldr	r2, .L42+24
 862 008a 5362     		str	r3, [r2, #36]
 153:Src/main.c    ****   int timeTracking = 0;
 863              		.loc 1 153 0
 864 008c 02F58062 		add	r2, r2, #1024
 865 0090 5362     		str	r3, [r2, #36]
 866              	.LVL43:
 159:Src/main.c    ****   //moteurGauche(2000);
 867              		.loc 1 159 0
 868 0092 4FF4FA60 		mov	r0, #2000
 869              	.LVL44:
 870 0096 FFF7FEFF 		bl	moteurDroit
 871              	.LVL45:
 150:Src/main.c    ****   int tim4err = 0;
 872              		.loc 1 150 0
 873 009a 2E46     		mov	r6, r5
 147:Src/main.c    ****   int tim4 = 0;
 874              		.loc 1 147 0
ARM GAS  /tmp/ccWnw4kM.s 			page 28


 875 009c AA46     		mov	r10, r5
 146:Src/main.c    ****   int tim5tot=0;
 876              		.loc 1 146 0
 877 009e A946     		mov	r9, r5
 143:Src/main.c    ****   char buffer[50] = "";
 878              		.loc 1 143 0
 879 00a0 A846     		mov	r8, r5
 880 00a2 01E0     		b	.L39
 881              	.LVL46:
 882              	.L40:
 883              	.LBB8:
 191:Src/main.c    ****         }
 884              		.loc 1 191 0 discriminator 1
 885 00a4 18EE106A 		fmrs	r6, s16	@ int
 886              	.LVL47:
 887              	.L39:
 164:Src/main.c    ****     {}
 888              		.loc 1 164 0 discriminator 1
 889 00a8 FFF7FEFF 		bl	HAL_GetTick
 890              	.LVL48:
 891 00ac 001B     		subs	r0, r0, r4
 892 00ae 0428     		cmp	r0, #4
 893 00b0 FAD9     		bls	.L39
 166:Src/main.c    ****     tim4 = (TIM4->CNT-30000);
 894              		.loc 1 166 0
 895 00b2 FFF7FEFF 		bl	HAL_GetTick
 896              	.LVL49:
 897 00b6 0446     		mov	r4, r0
 898              	.LVL50:
 167:Src/main.c    ****     tim5 = -TIM5->CNT+30000;
 899              		.loc 1 167 0
 900 00b8 2C4B     		ldr	r3, .L42+24
 901 00ba 5F6A     		ldr	r7, [r3, #36]
 902 00bc A7F5EA47 		sub	r7, r7, #29952
 903 00c0 303F     		subs	r7, r7, #48
 904              	.LVL51:
 168:Src/main.c    ****     
 905              		.loc 1 168 0
 906 00c2 03F58063 		add	r3, r3, #1024
 907 00c6 5D6A     		ldr	r5, [r3, #36]
 908 00c8 C5F5EA45 		rsb	r5, r5, #29952
 909 00cc 3035     		adds	r5, r5, #48
 910              	.LVL52:
 170:Src/main.c    ****     tim4tot += tim4;
 911              		.loc 1 170 0
 912 00ce 284B     		ldr	r3, .L42+28
 913 00d0 0093     		str	r3, [sp]
 914 00d2 3846     		mov	r0, r7
 915              	.LVL53:
 916 00d4 2946     		mov	r1, r5
 917 00d6 274A     		ldr	r2, .L42+32
 918 00d8 274B     		ldr	r3, .L42+36
 919 00da FFF7FEFF 		bl	updatePos
 920              	.LVL54:
 171:Src/main.c    ****     tim5tot += tim5;
 921              		.loc 1 171 0
 922 00de B944     		add	r9, r9, r7
ARM GAS  /tmp/ccWnw4kM.s 			page 29


 923              	.LVL55:
 172:Src/main.c    **** 
 924              		.loc 1 172 0
 925 00e0 AA44     		add	r10, r10, r5
 926              	.LVL56:
 175:Src/main.c    ****     float blable = P*tim4err + D*(tim4err - oldtim4err);
 927              		.loc 1 175 0
 928 00e2 07EE905A 		fmsr	s15, r5	@ int
 929 00e6 B8EEE78A 		fsitos	s16, s15
 930 00ea DFED246A 		flds	s13, .L42+40
 931 00ee 36EEC88A 		fsubs	s16, s13, s16
 932 00f2 BDEEC88A 		ftosizs	s16, s16
 933              	.LVL57:
 176:Src/main.c    ****     moteurDroit(1500);
 934              		.loc 1 176 0
 935 00f6 F8EEC87A 		fsitos	s15, s16
 936 00fa 67EEA66A 		fmuls	s13, s15, s13
 937 00fe 18EE103A 		fmrs	r3, s16	@ int
 938 0102 9B1B     		subs	r3, r3, r6
 939 0104 07EE903A 		fmsr	s15, r3	@ int
 940 0108 B8EEE77A 		fsitos	s14, s15
 941 010c DFED1C7A 		flds	s15, .L42+44
 942 0110 67EE277A 		fmuls	s15, s14, s15
 943 0114 76EEA78A 		fadds	s17, s13, s15
 944              	.LVL58:
 177:Src/main.c    ****     oldtim4err = tim4err;
 945              		.loc 1 177 0
 946 0118 40F2DC50 		movw	r0, #1500
 947 011c FFF7FEFF 		bl	moteurDroit
 948              	.LVL59:
 182:Src/main.c    ****     if (DEBUG)
 949              		.loc 1 182 0
 950 0120 08F10108 		add	r8, r8, #1
 951              	.LVL60:
 185:Src/main.c    ****         {
 952              		.loc 1 185 0
 953 0124 B8F1640F 		cmp	r8, #100
 954 0128 BCD1     		bne	.L40
 189:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 955              		.loc 1 189 0
 956 012a FDEEE87A 		ftosizs	s15, s17
 957 012e CDED007A 		fsts	s15, [sp]	@ int
 958 0132 0195     		str	r5, [sp, #4]
 959 0134 03A8     		add	r0, sp, #12
 960 0136 1349     		ldr	r1, .L42+48
 961 0138 4A46     		mov	r2, r9
 962 013a 5346     		mov	r3, r10
 963 013c FFF7FEFF 		bl	sprintf
 964              	.LVL61:
 190:Src/main.c    ****             debug = 0;
 965              		.loc 1 190 0
 966 0140 0848     		ldr	r0, .L42+16
 967 0142 03A9     		add	r1, sp, #12
 968 0144 3222     		movs	r2, #50
 969 0146 4FF0FF33 		mov	r3, #-1
 970 014a FFF7FEFF 		bl	HAL_UART_Transmit
 971              	.LVL62:
ARM GAS  /tmp/ccWnw4kM.s 			page 30


 191:Src/main.c    ****         }
 972              		.loc 1 191 0
 973 014e 4FF00008 		mov	r8, #0
 974 0152 A7E7     		b	.L40
 975              	.L43:
 976              		.align	2
 977              	.L42:
 978 0154 00000000 		.word	htim2
 979 0158 00000000 		.word	htim3
 980 015c 00000000 		.word	htim4
 981 0160 00000000 		.word	htim5
 982 0164 00000000 		.word	huart2
 983 0168 00000000 		.word	.LC0
 984 016c 00080040 		.word	1073743872
 985 0170 00000000 		.word	.LANCHOR2
 986 0174 00000000 		.word	.LANCHOR0
 987 0178 00000000 		.word	.LANCHOR1
 988 017c 00004842 		.word	1112014848
 989 0180 00000000 		.word	0
 990 0184 1C000000 		.word	.LC1
 991              	.LBE8:
 992              		.cfi_endproc
 993              	.LFE123:
 995              		.section	.text.moteurGauche,"ax",%progbits
 996              		.align	2
 997              		.global	moteurGauche
 998              		.thumb
 999              		.thumb_func
 1001              	moteurGauche:
 1002              	.LFB132:
 555:Src/main.c    **** 	}
 556:Src/main.c    **** }
 557:Src/main.c    **** 
 558:Src/main.c    **** 
 559:Src/main.c    **** void moteurGauche(int PWM)
 560:Src/main.c    **** {
 1003              		.loc 1 560 0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 1007              	.LVL63:
 1008 0000 10B5     		push	{r4, lr}
 1009              	.LCFI23:
 1010              		.cfi_def_cfa_offset 8
 1011              		.cfi_offset 4, -8
 1012              		.cfi_offset 14, -4
 561:Src/main.c    ****     if(PWM == abs(PWM))
 1013              		.loc 1 561 0
 1014 0002 80EAE074 		eor	r4, r0, r0, asr #31
 1015 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 1016 000a 8442     		cmp	r4, r0
 1017 000c 05D1     		bne	.L45
 562:Src/main.c    ****     {
 563:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_SET);
 1018              		.loc 1 563 0
 1019 000e 0C48     		ldr	r0, .L50
 1020              	.LVL64:
ARM GAS  /tmp/ccWnw4kM.s 			page 31


 1021 0010 2021     		movs	r1, #32
 1022 0012 0122     		movs	r2, #1
 1023 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1024              	.LVL65:
 1025 0018 04E0     		b	.L46
 1026              	.LVL66:
 1027              	.L45:
 564:Src/main.c    ****     }
 565:Src/main.c    ****     else
 566:Src/main.c    ****     {
 567:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 1028              		.loc 1 567 0
 1029 001a 0948     		ldr	r0, .L50
 1030              	.LVL67:
 1031 001c 2021     		movs	r1, #32
 1032 001e 0022     		movs	r2, #0
 1033 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1034              	.LVL68:
 1035              	.L46:
 568:Src/main.c    ****     }
 569:Src/main.c    ****     if (abs(PWM) > 5000)
 1036              		.loc 1 569 0
 1037 0024 41F28833 		movw	r3, #5000
 1038 0028 9C42     		cmp	r4, r3
 1039 002a 05DD     		ble	.L47
 570:Src/main.c    ****     {
 571:Src/main.c    **** 		htim3.Instance->CCR1 = 5000;
 1040              		.loc 1 571 0
 1041 002c 054B     		ldr	r3, .L50+4
 1042 002e 1B68     		ldr	r3, [r3]
 1043 0030 41F28832 		movw	r2, #5000
 1044 0034 5A63     		str	r2, [r3, #52]
 1045 0036 10BD     		pop	{r4, pc}
 1046              	.L47:
 572:Src/main.c    ****     }
 573:Src/main.c    ****     else 
 574:Src/main.c    ****     {
 575:Src/main.c    **** 		htim3.Instance->CCR1 = abs(PWM);
 1047              		.loc 1 575 0
 1048 0038 024B     		ldr	r3, .L50+4
 1049 003a 1B68     		ldr	r3, [r3]
 1050 003c 5C63     		str	r4, [r3, #52]
 1051 003e 10BD     		pop	{r4, pc}
 1052              	.L51:
 1053              		.align	2
 1054              	.L50:
 1055 0040 00040240 		.word	1073873920
 1056 0044 00000000 		.word	htim3
 1057              		.cfi_endproc
 1058              	.LFE132:
 1060              		.section	.text.Error_Handler,"ax",%progbits
 1061              		.align	2
 1062              		.global	Error_Handler
 1063              		.thumb
 1064              		.thumb_func
 1066              	Error_Handler:
 1067              	.LFB133:
ARM GAS  /tmp/ccWnw4kM.s 			page 32


 576:Src/main.c    **** 	}
 577:Src/main.c    **** }
 578:Src/main.c    **** 
 579:Src/main.c    **** 
 580:Src/main.c    **** /* USER CODE END 4 */
 581:Src/main.c    **** 
 582:Src/main.c    **** /**
 583:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 584:Src/main.c    ****   * @retval None
 585:Src/main.c    ****   */
 586:Src/main.c    **** void Error_Handler(void)
 587:Src/main.c    **** {
 1068              		.loc 1 587 0
 1069              		.cfi_startproc
 1070              		@ args = 0, pretend = 0, frame = 0
 1071              		@ frame_needed = 0, uses_anonymous_args = 0
 1072              		@ link register save eliminated.
 1073 0000 7047     		bx	lr
 1074              		.cfi_endproc
 1075              	.LFE133:
 1077              		.global	angle
 1078              		.global	positionY
 1079              		.global	positionX
 1080              		.comm	huart2,64,4
 1081              		.comm	htim5,60,4
 1082              		.comm	htim4,60,4
 1083              		.comm	htim3,60,4
 1084              		.comm	htim2,60,4
 1085 0002 00BF     		.section	.bss.positionX,"aw",%nobits
 1086              		.align	3
 1087              		.set	.LANCHOR0,. + 0
 1090              	positionX:
 1091 0000 00000000 		.space	8
 1091      00000000 
 1092              		.section	.bss.positionY,"aw",%nobits
 1093              		.align	3
 1094              		.set	.LANCHOR1,. + 0
 1097              	positionY:
 1098 0000 00000000 		.space	8
 1098      00000000 
 1099              		.section	.rodata.str1.4,"aMS",%progbits,1
 1100              		.align	2
 1101              	.LC0:
 1102 0000 41747474 		.ascii	"Atttenzion, zest barti !\000"
 1102      656E7A69 
 1102      6F6E2C20 
 1102      7A657374 
 1102      20626172 
 1103 0019 000000   		.space	3
 1104              	.LC1:
 1105 001c 2564202F 		.ascii	"%d / %d / %d / %d\012\000"
 1105      20256420 
 1105      2F202564 
 1105      202F2025 
 1105      640A00
 1106              		.section	.bss.angle,"aw",%nobits
 1107              		.align	3
ARM GAS  /tmp/ccWnw4kM.s 			page 33


 1108              		.set	.LANCHOR2,. + 0
 1111              	angle:
 1112 0000 00000000 		.space	8
 1112      00000000 
 1113              		.text
 1114              	.Letext0:
 1115              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1116              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1117              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1118              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1119              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1120              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1121              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1122              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1123              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1124              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1125              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1126              		.file 13 "<built-in>"
 1127              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 1128              		.file 15 "Inc/main.h"
 1129              		.file 16 "Inc/assert.h"
 1130              		.file 17 "/usr/include/newlib/stdio.h"
 1131              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccWnw4kM.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccWnw4kM.s:21     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccWnw4kM.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccWnw4kM.s:160    .text.MX_GPIO_Init:00000000000000bc $d
     /tmp/ccWnw4kM.s:169    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccWnw4kM.s:173    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccWnw4kM.s:212    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccWnw4kM.s:218    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccWnw4kM.s:222    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccWnw4kM.s:303    .text.MX_TIM2_Init:000000000000005c $d
                            *COM*:000000000000003c htim2
     /tmp/ccWnw4kM.s:308    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccWnw4kM.s:312    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccWnw4kM.s:393    .text.MX_TIM3_Init:000000000000005c $d
                            *COM*:000000000000003c htim3
     /tmp/ccWnw4kM.s:399    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccWnw4kM.s:403    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccWnw4kM.s:475    .text.MX_TIM4_Init:000000000000004c $d
                            *COM*:000000000000003c htim4
     /tmp/ccWnw4kM.s:481    .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccWnw4kM.s:485    .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccWnw4kM.s:557    .text.MX_TIM5_Init:000000000000004c $d
                            *COM*:000000000000003c htim5
     /tmp/ccWnw4kM.s:563    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccWnw4kM.s:568    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccWnw4kM.s:682    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccWnw4kM.s:688    .text.moteurDroit:0000000000000000 $t
     /tmp/ccWnw4kM.s:693    .text.moteurDroit:0000000000000000 moteurDroit
     /tmp/ccWnw4kM.s:747    .text.moteurDroit:0000000000000044 $d
     /tmp/ccWnw4kM.s:753    .text.main:0000000000000000 $t
     /tmp/ccWnw4kM.s:758    .text.main:0000000000000000 main
     /tmp/ccWnw4kM.s:978    .text.main:0000000000000154 $d
     /tmp/ccWnw4kM.s:996    .text.moteurGauche:0000000000000000 $t
     /tmp/ccWnw4kM.s:1001   .text.moteurGauche:0000000000000000 moteurGauche
     /tmp/ccWnw4kM.s:1055   .text.moteurGauche:0000000000000040 $d
     /tmp/ccWnw4kM.s:1061   .text.Error_Handler:0000000000000000 $t
     /tmp/ccWnw4kM.s:1066   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccWnw4kM.s:1111   .bss.angle:0000000000000000 angle
     /tmp/ccWnw4kM.s:1097   .bss.positionY:0000000000000000 positionY
     /tmp/ccWnw4kM.s:1090   .bss.positionX:0000000000000000 positionX
     /tmp/ccWnw4kM.s:1086   .bss.positionX:0000000000000000 $d
     /tmp/ccWnw4kM.s:1093   .bss.positionY:0000000000000000 $d
     /tmp/ccWnw4kM.s:1100   .rodata.str1.4:0000000000000000 $d
     /tmp/ccWnw4kM.s:1107   .bss.angle:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_TIM_Encoder_Init
ARM GAS  /tmp/ccWnw4kM.s 			page 35


HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_Encoder_Start
HAL_UART_Transmit
HAL_Delay
HAL_GetTick
updatePos
sprintf
