ARM GAS  /tmp/ccOoopxZ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB131:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccOoopxZ.s 			page 2


  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** #include "assert.h"
  47:Src/main.c    **** /* USER CODE END Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PTD */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PTD */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PD */
  56:Src/main.c    **** 
  57:Src/main.c    **** #define _DEBUG 1       //print all the debug info
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PD */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  62:Src/main.c    **** /* USER CODE BEGIN PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PM */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  67:Src/main.c    **** TIM_HandleTypeDef htim1;
  68:Src/main.c    **** TIM_HandleTypeDef htim2;
  69:Src/main.c    **** TIM_HandleTypeDef htim3;
  70:Src/main.c    **** TIM_HandleTypeDef htim4;
  71:Src/main.c    **** TIM_HandleTypeDef htim5;
  72:Src/main.c    **** 
  73:Src/main.c    **** UART_HandleTypeDef huart2;
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PV */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE END PV */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  80:Src/main.c    **** void SystemClock_Config(void);
  81:Src/main.c    **** static void MX_GPIO_Init(void);
  82:Src/main.c    **** static void MX_USART2_UART_Init(void);
  83:Src/main.c    **** static void MX_TIM2_Init(void);
  84:Src/main.c    **** static void MX_TIM3_Init(void);
  85:Src/main.c    **** static void MX_TIM4_Init(void);
  86:Src/main.c    **** static void MX_TIM5_Init(void);
  87:Src/main.c    **** static void MX_TIM1_Init(void);
  88:Src/main.c    **** /* USER CODE BEGIN PFP */
ARM GAS  /tmp/ccOoopxZ.s 			page 3


  89:Src/main.c    **** 
  90:Src/main.c    **** /* USER CODE END PFP */
  91:Src/main.c    **** 
  92:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  93:Src/main.c    **** /* USER CODE BEGIN 0 */
  94:Src/main.c    **** double positionX = 0.0;
  95:Src/main.c    **** double positionY = 0.0;
  96:Src/main.c    **** double angle = 0.0;
  97:Src/main.c    **** 
  98:Src/main.c    **** int consigneDroit = 0;
  99:Src/main.c    **** int consigneGauche = 0;
 100:Src/main.c    **** 
 101:Src/main.c    **** int debugCounter = 0;
 102:Src/main.c    **** 
 103:Src/main.c    **** int tim4Tot= 0;
 104:Src/main.c    **** int tim5Tot=0;
 105:Src/main.c    **** 
 106:Src/main.c    **** char buffer[50] = "";
 107:Src/main.c    **** char buffer2[50] = "";
 108:Src/main.c    **** 
 109:Src/main.c    **** int fixedFrequency = 40;//frequency of the loop in ms
 110:Src/main.c    **** int debugMessageFrequency = 10;//in number of loop
 111:Src/main.c    **** 
 112:Src/main.c    **** /* USER CODE END 0 */
 113:Src/main.c    **** 
 114:Src/main.c    **** /**
 115:Src/main.c    ****   * @brief  The application entry point.
 116:Src/main.c    ****   * @retval int
 117:Src/main.c    ****   */
 118:Src/main.c    **** int main(void)
 119:Src/main.c    **** {
 120:Src/main.c    ****   /* USER CODE BEGIN 1 */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END 1 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 127:Src/main.c    ****   HAL_Init();
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE BEGIN Init */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE END Init */
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* Configure the system clock */
 134:Src/main.c    ****   SystemClock_Config();
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE END SysInit */
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* Initialize all configured peripherals */
 141:Src/main.c    ****   MX_GPIO_Init();
 142:Src/main.c    ****   MX_USART2_UART_Init();
 143:Src/main.c    ****   MX_TIM2_Init();
 144:Src/main.c    ****   MX_TIM3_Init();
 145:Src/main.c    ****   MX_TIM4_Init();
ARM GAS  /tmp/ccOoopxZ.s 			page 4


 146:Src/main.c    ****   MX_TIM5_Init();
 147:Src/main.c    ****   MX_TIM1_Init();
 148:Src/main.c    ****   /* USER CODE BEGIN 2 */
 149:Src/main.c    ****   HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_2);
 150:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 151:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 152:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 153:Src/main.c    ****   HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_4);
 154:Src/main.c    ****   /* USER CODE END 2 */
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* Infinite loop */
 157:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 158:Src/main.c    ****   HAL_UART_Transmit(&huart2, "Tire moi la tirette, que ma bobinette choisse\n", sizeof("Tire moi la
 159:Src/main.c    ****   while(HAL_GPIO_ReadPin(Tirette_GPIO_Port, Tirette_Pin))
 160:Src/main.c    ****   {}
 161:Src/main.c    ****   uint32_t matchStartTicks = HAL_GetTick();
 162:Src/main.c    ****     
 163:Src/main.c    ****   HAL_UART_Transmit(&huart2, "Atttenzion, zest barti !\n", sizeof("Atttenzion, zest barti !\n"), HA
 164:Src/main.c    ****   HAL_Delay(1000);
 165:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick(); //init the time tracking variable for the fixed frequency PID 
 166:Src/main.c    **** 
 167:Src/main.c    **** 
 168:Src/main.c    **** 
 169:Src/main.c    ****   //center the encoder values
 170:Src/main.c    ****   TIM4->CNT = 30000;
 171:Src/main.c    ****   TIM5->CNT = 30000;
 172:Src/main.c    ****   
 173:Src/main.c    ****   htim1.Instance->CCR4 = 1500;//servo
 174:Src/main.c    **** 
 175:Src/main.c    **** 
 176:Src/main.c    ****   while (1)
 177:Src/main.c    ****   {
 178:Src/main.c    ****     while(HAL_GetTick() - oldTicks < fixedFrequency)
 179:Src/main.c    ****     {HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_SET);}
 180:Src/main.c    ****     HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 181:Src/main.c    ****     oldTicks = HAL_GetTick();
 182:Src/main.c    ****     
 183:Src/main.c    ****     if (HAL_GetTick() - matchStartTicks > 90000) //make sure the robot stops after 100seconds (actu
 184:Src/main.c    ****     {
 185:Src/main.c    ****         HAL_UART_Transmit(&huart2, "Fin de match -- Timeout \n", sizeof("Fin de match -- Timeout \n
 186:Src/main.c    ****         moteurGauche(0);
 187:Src/main.c    **** 		moteurDroit(0);
 188:Src/main.c    ****         while(1){}
 189:Src/main.c    ****     }
 190:Src/main.c    ****     
 191:Src/main.c    ****     if (HAL_GPIO_ReadPin(ObstacleDetection_GPIO_Port, ObstacleDetection_Pin))
 192:Src/main.c    ****     {
 193:Src/main.c    ****         HAL_UART_Transmit(&huart2, "Fin de match -- Obstacle \n", sizeof("Fin de match -- Obstacle 
 194:Src/main.c    ****         moteurGauche(0);
 195:Src/main.c    **** 		moteurDroit(0);
 196:Src/main.c    ****         while(1){}
 197:Src/main.c    ****     }
 198:Src/main.c    ****     
 199:Src/main.c    ****     
 200:Src/main.c    ****     int tim4 = (TIM4->CNT-30000);
 201:Src/main.c    ****     int tim5 = (-TIM5->CNT+30000);
 202:Src/main.c    ****     TIM4->CNT = 30000;
ARM GAS  /tmp/ccOoopxZ.s 			page 5


 203:Src/main.c    ****     TIM5->CNT = 30000;
 204:Src/main.c    ****     
 205:Src/main.c    ****     tim5 *= 1.0422;
 206:Src/main.c    ****     
 207:Src/main.c    ****     updatePos(tim4, tim5, &positionX, &positionY, &angle);
 208:Src/main.c    ****     tim4Tot += tim4;//for debug
 209:Src/main.c    ****     tim5Tot += tim5;
 210:Src/main.c    ****     
 211:Src/main.c    ****     stateMachine(&consigneDroit, &consigneGauche, positionX, positionY, angle, tim4, tim5, huart2);
 212:Src/main.c    ****     
 213:Src/main.c    ****     moteurGauche(consigneGauche);
 214:Src/main.c    ****     moteurDroit(consigneDroit);
 215:Src/main.c    ****     
 216:Src/main.c    ****     
 217:Src/main.c    ****     debugCounter += 1;
 218:Src/main.c    ****     if (_DEBUG == 1)
 219:Src/main.c    ****     {
 220:Src/main.c    ****         if (debugCounter == debugMessageFrequency)
 221:Src/main.c    ****         {
 222:Src/main.c    ****             sprintf(buffer, "pos : %f / %f / %f\n",positionX, positionY, (angle*1000));
 223:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 224:Src/main.c    ****             sprintf(buffer2, "tot : %d / %d / %d / %d\n",tim4Tot, tim5Tot, consigneDroit, consigneG
 225:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 226:Src/main.c    ****             debugCounter = 0;
 227:Src/main.c    ****         }
 228:Src/main.c    ****     }
 229:Src/main.c    **** 
 230:Src/main.c    ****     /* USER CODE END WHILE */
 231:Src/main.c    **** 
 232:Src/main.c    ****     /* USER CODE BEGIN 3 */
 233:Src/main.c    ****   }
 234:Src/main.c    ****   /* USER CODE END 3 */
 235:Src/main.c    **** }
 236:Src/main.c    **** 
 237:Src/main.c    **** /**
 238:Src/main.c    ****   * @brief System Clock Configuration
 239:Src/main.c    ****   * @retval None
 240:Src/main.c    ****   */
 241:Src/main.c    **** void SystemClock_Config(void)
 242:Src/main.c    **** {
 243:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 244:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 245:Src/main.c    **** 
 246:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 247:Src/main.c    ****   */
 248:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 249:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 250:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 251:Src/main.c    ****   */
 252:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 253:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 254:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 255:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 256:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 257:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
ARM GAS  /tmp/ccOoopxZ.s 			page 6


 260:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 261:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 262:Src/main.c    ****   {
 263:Src/main.c    ****     Error_Handler();
 264:Src/main.c    ****   }
 265:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 266:Src/main.c    ****   */
 267:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 268:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 269:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 270:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 271:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 272:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 273:Src/main.c    **** 
 274:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 275:Src/main.c    ****   {
 276:Src/main.c    ****     Error_Handler();
 277:Src/main.c    ****   }
 278:Src/main.c    **** }
 279:Src/main.c    **** 
 280:Src/main.c    **** /**
 281:Src/main.c    ****   * @brief TIM1 Initialization Function
 282:Src/main.c    ****   * @param None
 283:Src/main.c    ****   * @retval None
 284:Src/main.c    ****   */
 285:Src/main.c    **** static void MX_TIM1_Init(void)
 286:Src/main.c    **** {
 287:Src/main.c    **** 
 288:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 289:Src/main.c    **** 
 290:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 291:Src/main.c    **** 
 292:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 293:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 294:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 295:Src/main.c    **** 
 296:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 297:Src/main.c    **** 
 298:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 299:Src/main.c    ****   htim1.Instance = TIM1;
 300:Src/main.c    ****   htim1.Init.Prescaler = 72;
 301:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 302:Src/main.c    ****   htim1.Init.Period = 20000;
 303:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 304:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 305:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 306:Src/main.c    ****   {
 307:Src/main.c    ****     Error_Handler();
 308:Src/main.c    ****   }
 309:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 310:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 311:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 312:Src/main.c    ****   {
 313:Src/main.c    ****     Error_Handler();
 314:Src/main.c    ****   }
 315:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 316:Src/main.c    ****   sConfigOC.Pulse = 1500;
ARM GAS  /tmp/ccOoopxZ.s 			page 7


 317:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 318:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 319:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 320:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 321:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 322:Src/main.c    ****   {
 323:Src/main.c    ****     Error_Handler();
 324:Src/main.c    ****   }
 325:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 326:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 327:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 328:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 329:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 330:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 331:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 332:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 333:Src/main.c    ****   {
 334:Src/main.c    ****     Error_Handler();
 335:Src/main.c    ****   }
 336:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 337:Src/main.c    **** 
 338:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 339:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 340:Src/main.c    **** 
 341:Src/main.c    **** }
 342:Src/main.c    **** 
 343:Src/main.c    **** /**
 344:Src/main.c    ****   * @brief TIM2 Initialization Function
 345:Src/main.c    ****   * @param None
 346:Src/main.c    ****   * @retval None
 347:Src/main.c    ****   */
 348:Src/main.c    **** static void MX_TIM2_Init(void)
 349:Src/main.c    **** {
 350:Src/main.c    **** 
 351:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 352:Src/main.c    **** 
 353:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 354:Src/main.c    **** 
 355:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 356:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 357:Src/main.c    **** 
 358:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 359:Src/main.c    **** 
 360:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 361:Src/main.c    ****   htim2.Instance = TIM2;
 362:Src/main.c    ****   htim2.Init.Prescaler = 0;
 363:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 364:Src/main.c    ****   htim2.Init.Period = 10000;
 365:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 366:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 367:Src/main.c    ****   {
 368:Src/main.c    ****     Error_Handler();
 369:Src/main.c    ****   }
 370:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 371:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 372:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 373:Src/main.c    ****   {
ARM GAS  /tmp/ccOoopxZ.s 			page 8


 374:Src/main.c    ****     Error_Handler();
 375:Src/main.c    ****   }
 376:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 377:Src/main.c    ****   sConfigOC.Pulse = 0;
 378:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 379:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 380:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 381:Src/main.c    ****   {
 382:Src/main.c    ****     Error_Handler();
 383:Src/main.c    ****   }
 384:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 385:Src/main.c    **** 
 386:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 387:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 388:Src/main.c    **** 
 389:Src/main.c    **** }
 390:Src/main.c    **** 
 391:Src/main.c    **** /**
 392:Src/main.c    ****   * @brief TIM3 Initialization Function
 393:Src/main.c    ****   * @param None
 394:Src/main.c    ****   * @retval None
 395:Src/main.c    ****   */
 396:Src/main.c    **** static void MX_TIM3_Init(void)
 397:Src/main.c    **** {
 398:Src/main.c    **** 
 399:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 400:Src/main.c    **** 
 401:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 402:Src/main.c    **** 
 403:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 404:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 405:Src/main.c    **** 
 406:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 407:Src/main.c    **** 
 408:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 409:Src/main.c    ****   htim3.Instance = TIM3;
 410:Src/main.c    ****   htim3.Init.Prescaler = 0;
 411:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 412:Src/main.c    ****   htim3.Init.Period = 10000;
 413:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 414:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 415:Src/main.c    ****   {
 416:Src/main.c    ****     Error_Handler();
 417:Src/main.c    ****   }
 418:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 419:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 420:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 421:Src/main.c    ****   {
 422:Src/main.c    ****     Error_Handler();
 423:Src/main.c    ****   }
 424:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 425:Src/main.c    ****   sConfigOC.Pulse = 0;
 426:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 427:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 428:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 429:Src/main.c    ****   {
 430:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccOoopxZ.s 			page 9


 431:Src/main.c    ****   }
 432:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 433:Src/main.c    **** 
 434:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 435:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 436:Src/main.c    **** 
 437:Src/main.c    **** }
 438:Src/main.c    **** 
 439:Src/main.c    **** /**
 440:Src/main.c    ****   * @brief TIM4 Initialization Function
 441:Src/main.c    ****   * @param None
 442:Src/main.c    ****   * @retval None
 443:Src/main.c    ****   */
 444:Src/main.c    **** static void MX_TIM4_Init(void)
 445:Src/main.c    **** {
 446:Src/main.c    **** 
 447:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 448:Src/main.c    **** 
 449:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 450:Src/main.c    **** 
 451:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 452:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 453:Src/main.c    **** 
 454:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 455:Src/main.c    **** 
 456:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 457:Src/main.c    ****   htim4.Instance = TIM4;
 458:Src/main.c    ****   htim4.Init.Prescaler = 0;
 459:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 460:Src/main.c    ****   htim4.Init.Period = 0xffff;
 461:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 462:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 463:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 464:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 465:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 466:Src/main.c    ****   sConfig.IC1Filter = 5;
 467:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 468:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 469:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 470:Src/main.c    ****   sConfig.IC2Filter = 5;
 471:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 472:Src/main.c    ****   {
 473:Src/main.c    ****     Error_Handler();
 474:Src/main.c    ****   }
 475:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 476:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 477:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 478:Src/main.c    ****   {
 479:Src/main.c    ****     Error_Handler();
 480:Src/main.c    ****   }
 481:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 482:Src/main.c    **** 
 483:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 484:Src/main.c    **** 
 485:Src/main.c    **** }
 486:Src/main.c    **** 
 487:Src/main.c    **** /**
ARM GAS  /tmp/ccOoopxZ.s 			page 10


 488:Src/main.c    ****   * @brief TIM5 Initialization Function
 489:Src/main.c    ****   * @param None
 490:Src/main.c    ****   * @retval None
 491:Src/main.c    ****   */
 492:Src/main.c    **** static void MX_TIM5_Init(void)
 493:Src/main.c    **** {
 494:Src/main.c    **** 
 495:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 0 */
 496:Src/main.c    **** 
 497:Src/main.c    ****   /* USER CODE END TIM5_Init 0 */
 498:Src/main.c    **** 
 499:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 500:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 501:Src/main.c    **** 
 502:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 1 */
 503:Src/main.c    **** 
 504:Src/main.c    ****   /* USER CODE END TIM5_Init 1 */
 505:Src/main.c    ****   htim5.Instance = TIM5;
 506:Src/main.c    ****   htim5.Init.Prescaler = 0;
 507:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 508:Src/main.c    ****   htim5.Init.Period = 0xffff;
 509:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 510:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 511:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 512:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 513:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 514:Src/main.c    ****   sConfig.IC1Filter = 5;
 515:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 516:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 517:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 518:Src/main.c    ****   sConfig.IC2Filter = 5;
 519:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 520:Src/main.c    ****   {
 521:Src/main.c    ****     Error_Handler();
 522:Src/main.c    ****   }
 523:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 524:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 525:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 526:Src/main.c    ****   {
 527:Src/main.c    ****     Error_Handler();
 528:Src/main.c    ****   }
 529:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 2 */
 530:Src/main.c    **** 
 531:Src/main.c    ****   /* USER CODE END TIM5_Init 2 */
 532:Src/main.c    **** 
 533:Src/main.c    **** }
 534:Src/main.c    **** 
 535:Src/main.c    **** /**
 536:Src/main.c    ****   * @brief USART2 Initialization Function
 537:Src/main.c    ****   * @param None
 538:Src/main.c    ****   * @retval None
 539:Src/main.c    ****   */
 540:Src/main.c    **** static void MX_USART2_UART_Init(void)
 541:Src/main.c    **** {
 542:Src/main.c    **** 
 543:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 544:Src/main.c    **** 
ARM GAS  /tmp/ccOoopxZ.s 			page 11


 545:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 546:Src/main.c    **** 
 547:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 548:Src/main.c    **** 
 549:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 550:Src/main.c    ****   huart2.Instance = USART2;
 551:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 552:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 553:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 554:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 555:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 556:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 557:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 558:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 559:Src/main.c    ****   {
 560:Src/main.c    ****     Error_Handler();
 561:Src/main.c    ****   }
 562:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 563:Src/main.c    **** 
 564:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 565:Src/main.c    **** 
 566:Src/main.c    **** }
 567:Src/main.c    **** 
 568:Src/main.c    **** /**
 569:Src/main.c    ****   * @brief GPIO Initialization Function
 570:Src/main.c    ****   * @param None
 571:Src/main.c    ****   * @retval None
 572:Src/main.c    ****   */
 573:Src/main.c    **** static void MX_GPIO_Init(void)
 574:Src/main.c    **** {
  28              		.loc 1 574 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 28
  35              		.cfi_offset 4, -28
  36              		.cfi_offset 5, -24
  37              		.cfi_offset 6, -20
  38              		.cfi_offset 7, -16
  39              		.cfi_offset 8, -12
  40              		.cfi_offset 9, -8
  41              		.cfi_offset 14, -4
  42 0004 8BB0     		sub	sp, sp, #44
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 72
 575:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  45              		.loc 1 575 0
  46 0006 0024     		movs	r4, #0
  47 0008 0594     		str	r4, [sp, #20]
  48 000a 0694     		str	r4, [sp, #24]
  49 000c 0794     		str	r4, [sp, #28]
  50 000e 0894     		str	r4, [sp, #32]
  51 0010 0994     		str	r4, [sp, #36]
  52              	.LBB2:
 576:Src/main.c    **** 
ARM GAS  /tmp/ccOoopxZ.s 			page 12


 577:Src/main.c    ****   /* GPIO Ports Clock Enable */
 578:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  53              		.loc 1 578 0
  54 0012 0194     		str	r4, [sp, #4]
  55 0014 3C4B     		ldr	r3, .L3
  56 0016 1A6B     		ldr	r2, [r3, #48]
  57 0018 42F00402 		orr	r2, r2, #4
  58 001c 1A63     		str	r2, [r3, #48]
  59 001e 1A6B     		ldr	r2, [r3, #48]
  60 0020 02F00402 		and	r2, r2, #4
  61 0024 0192     		str	r2, [sp, #4]
  62 0026 019A     		ldr	r2, [sp, #4]
  63              	.LBE2:
  64              	.LBB3:
 579:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 579 0
  66 0028 0294     		str	r4, [sp, #8]
  67 002a 1A6B     		ldr	r2, [r3, #48]
  68 002c 42F08002 		orr	r2, r2, #128
  69 0030 1A63     		str	r2, [r3, #48]
  70 0032 1A6B     		ldr	r2, [r3, #48]
  71 0034 02F08002 		and	r2, r2, #128
  72 0038 0292     		str	r2, [sp, #8]
  73 003a 029A     		ldr	r2, [sp, #8]
  74              	.LBE3:
  75              	.LBB4:
 580:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  76              		.loc 1 580 0
  77 003c 0394     		str	r4, [sp, #12]
  78 003e 1A6B     		ldr	r2, [r3, #48]
  79 0040 42F00102 		orr	r2, r2, #1
  80 0044 1A63     		str	r2, [r3, #48]
  81 0046 1A6B     		ldr	r2, [r3, #48]
  82 0048 02F00102 		and	r2, r2, #1
  83 004c 0392     		str	r2, [sp, #12]
  84 004e 039A     		ldr	r2, [sp, #12]
  85              	.LBE4:
  86              	.LBB5:
 581:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  87              		.loc 1 581 0
  88 0050 0494     		str	r4, [sp, #16]
  89 0052 1A6B     		ldr	r2, [r3, #48]
  90 0054 42F00202 		orr	r2, r2, #2
  91 0058 1A63     		str	r2, [r3, #48]
  92 005a 1B6B     		ldr	r3, [r3, #48]
  93 005c 03F00203 		and	r3, r3, #2
  94 0060 0493     		str	r3, [sp, #16]
  95 0062 049B     		ldr	r3, [sp, #16]
  96              	.LBE5:
 582:Src/main.c    **** 
 583:Src/main.c    ****   /*Configure GPIO pin Output Level */
 584:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR1_Pin, GPIO_PIN_RESET);
  97              		.loc 1 584 0
  98 0064 294F     		ldr	r7, .L3+4
  99 0066 3846     		mov	r0, r7
 100 0068 4FF48461 		mov	r1, #1056
 101 006c 2246     		mov	r2, r4
ARM GAS  /tmp/ccOoopxZ.s 			page 13


 102 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 103              	.LVL0:
 585:Src/main.c    **** 
 586:Src/main.c    ****   /*Configure GPIO pin Output Level */
 587:Src/main.c    ****   HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 104              		.loc 1 587 0
 105 0072 274D     		ldr	r5, .L3+8
 106 0074 2846     		mov	r0, r5
 107 0076 1021     		movs	r1, #16
 108 0078 2246     		mov	r2, r4
 109 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 110              	.LVL1:
 588:Src/main.c    **** 
 589:Src/main.c    ****   /*Configure GPIO pin Output Level */
 590:Src/main.c    ****   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 111              		.loc 1 590 0
 112 007e DFF89880 		ldr	r8, .L3+16
 113 0082 4046     		mov	r0, r8
 114 0084 2021     		movs	r1, #32
 115 0086 2246     		mov	r2, r4
 116 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 117              	.LVL2:
 591:Src/main.c    **** 
 592:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 593:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 118              		.loc 1 593 0
 119 008c 4FF40053 		mov	r3, #8192
 120 0090 0593     		str	r3, [sp, #20]
 594:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 121              		.loc 1 594 0
 122 0092 204B     		ldr	r3, .L3+12
 123 0094 0693     		str	r3, [sp, #24]
 595:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 124              		.loc 1 595 0
 125 0096 0794     		str	r4, [sp, #28]
 596:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 126              		.loc 1 596 0
 127 0098 2846     		mov	r0, r5
 128 009a 05A9     		add	r1, sp, #20
 129 009c FFF7FEFF 		bl	HAL_GPIO_Init
 130              	.LVL3:
 597:Src/main.c    **** 
 598:Src/main.c    ****   /*Configure GPIO pin : ObstacleDetection_Pin */
 599:Src/main.c    ****   GPIO_InitStruct.Pin = ObstacleDetection_Pin;
 131              		.loc 1 599 0
 132 00a0 4FF01009 		mov	r9, #16
 133 00a4 CDF81490 		str	r9, [sp, #20]
 600:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 134              		.loc 1 600 0
 135 00a8 0694     		str	r4, [sp, #24]
 601:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 601 0
 137 00aa 0794     		str	r4, [sp, #28]
 602:Src/main.c    ****   HAL_GPIO_Init(ObstacleDetection_GPIO_Port, &GPIO_InitStruct);
 138              		.loc 1 602 0
 139 00ac 3846     		mov	r0, r7
 140 00ae 05A9     		add	r1, sp, #20
ARM GAS  /tmp/ccOoopxZ.s 			page 14


 141 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 142              	.LVL4:
 603:Src/main.c    **** 
 604:Src/main.c    ****   /*Configure GPIO pins : LD2_Pin DIR1_Pin */
 605:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin|DIR1_Pin;
 143              		.loc 1 605 0
 144 00b4 4FF48463 		mov	r3, #1056
 145 00b8 0593     		str	r3, [sp, #20]
 606:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 146              		.loc 1 606 0
 147 00ba 0126     		movs	r6, #1
 148 00bc 0696     		str	r6, [sp, #24]
 607:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 149              		.loc 1 607 0
 150 00be 0794     		str	r4, [sp, #28]
 608:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 151              		.loc 1 608 0
 152 00c0 0894     		str	r4, [sp, #32]
 609:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 153              		.loc 1 609 0
 154 00c2 3846     		mov	r0, r7
 155 00c4 05A9     		add	r1, sp, #20
 156 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 157              	.LVL5:
 610:Src/main.c    **** 
 611:Src/main.c    ****   /*Configure GPIO pin : DebugTiming_Pin */
 612:Src/main.c    ****   GPIO_InitStruct.Pin = DebugTiming_Pin;
 158              		.loc 1 612 0
 159 00ca CDF81490 		str	r9, [sp, #20]
 613:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 160              		.loc 1 613 0
 161 00ce 0696     		str	r6, [sp, #24]
 614:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 162              		.loc 1 614 0
 163 00d0 0794     		str	r4, [sp, #28]
 615:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 164              		.loc 1 615 0
 165 00d2 0894     		str	r4, [sp, #32]
 616:Src/main.c    ****   HAL_GPIO_Init(DebugTiming_GPIO_Port, &GPIO_InitStruct);
 166              		.loc 1 616 0
 167 00d4 2846     		mov	r0, r5
 168 00d6 05A9     		add	r1, sp, #20
 169 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 170              	.LVL6:
 617:Src/main.c    **** 
 618:Src/main.c    ****   /*Configure GPIO pin : Tirette_Pin */
 619:Src/main.c    ****   GPIO_InitStruct.Pin = Tirette_Pin;
 171              		.loc 1 619 0
 172 00dc 4FF48053 		mov	r3, #4096
 173 00e0 0593     		str	r3, [sp, #20]
 620:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 174              		.loc 1 620 0
 175 00e2 0694     		str	r4, [sp, #24]
 621:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 176              		.loc 1 621 0
 177 00e4 0794     		str	r4, [sp, #28]
 622:Src/main.c    ****   HAL_GPIO_Init(Tirette_GPIO_Port, &GPIO_InitStruct);
ARM GAS  /tmp/ccOoopxZ.s 			page 15


 178              		.loc 1 622 0
 179 00e6 2846     		mov	r0, r5
 180 00e8 05A9     		add	r1, sp, #20
 181 00ea FFF7FEFF 		bl	HAL_GPIO_Init
 182              	.LVL7:
 623:Src/main.c    **** 
 624:Src/main.c    ****   /*Configure GPIO pin : DIR2_Pin */
 625:Src/main.c    ****   GPIO_InitStruct.Pin = DIR2_Pin;
 183              		.loc 1 625 0
 184 00ee 2023     		movs	r3, #32
 185 00f0 0593     		str	r3, [sp, #20]
 626:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 186              		.loc 1 626 0
 187 00f2 0696     		str	r6, [sp, #24]
 627:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 188              		.loc 1 627 0
 189 00f4 0794     		str	r4, [sp, #28]
 628:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 190              		.loc 1 628 0
 191 00f6 0894     		str	r4, [sp, #32]
 629:Src/main.c    ****   HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 192              		.loc 1 629 0
 193 00f8 4046     		mov	r0, r8
 194 00fa 05A9     		add	r1, sp, #20
 195 00fc FFF7FEFF 		bl	HAL_GPIO_Init
 196              	.LVL8:
 630:Src/main.c    **** 
 631:Src/main.c    **** }
 197              		.loc 1 631 0
 198 0100 0BB0     		add	sp, sp, #44
 199              	.LCFI2:
 200              		.cfi_def_cfa_offset 28
 201              		@ sp needed
 202 0102 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 203              	.L4:
 204 0106 00BF     		.align	2
 205              	.L3:
 206 0108 00380240 		.word	1073887232
 207 010c 00000240 		.word	1073872896
 208 0110 00080240 		.word	1073874944
 209 0114 00002110 		.word	270598144
 210 0118 00040240 		.word	1073873920
 211              		.cfi_endproc
 212              	.LFE131:
 214              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 215              		.align	2
 216              		.thumb
 217              		.thumb_func
 219              	MX_USART2_UART_Init:
 220              	.LFB130:
 541:Src/main.c    **** 
 221              		.loc 1 541 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225 0000 08B5     		push	{r3, lr}
 226              	.LCFI3:
ARM GAS  /tmp/ccOoopxZ.s 			page 16


 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 3, -8
 229              		.cfi_offset 14, -4
 550:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 230              		.loc 1 550 0
 231 0002 0848     		ldr	r0, .L7
 232 0004 084B     		ldr	r3, .L7+4
 233 0006 0360     		str	r3, [r0]
 551:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 234              		.loc 1 551 0
 235 0008 4FF4E133 		mov	r3, #115200
 236 000c 4360     		str	r3, [r0, #4]
 552:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 237              		.loc 1 552 0
 238 000e 0023     		movs	r3, #0
 239 0010 8360     		str	r3, [r0, #8]
 553:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 240              		.loc 1 553 0
 241 0012 C360     		str	r3, [r0, #12]
 554:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 242              		.loc 1 554 0
 243 0014 0361     		str	r3, [r0, #16]
 555:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 244              		.loc 1 555 0
 245 0016 0C22     		movs	r2, #12
 246 0018 4261     		str	r2, [r0, #20]
 556:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 247              		.loc 1 556 0
 248 001a 8361     		str	r3, [r0, #24]
 557:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 249              		.loc 1 557 0
 250 001c C361     		str	r3, [r0, #28]
 558:Src/main.c    ****   {
 251              		.loc 1 558 0
 252 001e FFF7FEFF 		bl	HAL_UART_Init
 253              	.LVL9:
 254 0022 08BD     		pop	{r3, pc}
 255              	.L8:
 256              		.align	2
 257              	.L7:
 258 0024 00000000 		.word	huart2
 259 0028 00440040 		.word	1073759232
 260              		.cfi_endproc
 261              	.LFE130:
 263              		.section	.text.MX_TIM2_Init,"ax",%progbits
 264              		.align	2
 265              		.thumb
 266              		.thumb_func
 268              	MX_TIM2_Init:
 269              	.LFB126:
 349:Src/main.c    **** 
 270              		.loc 1 349 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 40
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274 0000 30B5     		push	{r4, r5, lr}
 275              	.LCFI4:
ARM GAS  /tmp/ccOoopxZ.s 			page 17


 276              		.cfi_def_cfa_offset 12
 277              		.cfi_offset 4, -12
 278              		.cfi_offset 5, -8
 279              		.cfi_offset 14, -4
 280 0002 8BB0     		sub	sp, sp, #44
 281              	.LCFI5:
 282              		.cfi_def_cfa_offset 56
 355:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 283              		.loc 1 355 0
 284 0004 0024     		movs	r4, #0
 285 0006 0894     		str	r4, [sp, #32]
 286 0008 0994     		str	r4, [sp, #36]
 356:Src/main.c    **** 
 287              		.loc 1 356 0
 288 000a 0194     		str	r4, [sp, #4]
 289 000c 0294     		str	r4, [sp, #8]
 290 000e 0394     		str	r4, [sp, #12]
 291 0010 0494     		str	r4, [sp, #16]
 292 0012 0594     		str	r4, [sp, #20]
 293 0014 0694     		str	r4, [sp, #24]
 294 0016 0794     		str	r4, [sp, #28]
 361:Src/main.c    ****   htim2.Init.Prescaler = 0;
 295              		.loc 1 361 0
 296 0018 104D     		ldr	r5, .L11
 297 001a 4FF08043 		mov	r3, #1073741824
 298 001e 2B60     		str	r3, [r5]
 362:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 299              		.loc 1 362 0
 300 0020 6C60     		str	r4, [r5, #4]
 363:Src/main.c    ****   htim2.Init.Period = 10000;
 301              		.loc 1 363 0
 302 0022 AC60     		str	r4, [r5, #8]
 364:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 303              		.loc 1 364 0
 304 0024 42F21073 		movw	r3, #10000
 305 0028 EB60     		str	r3, [r5, #12]
 365:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 306              		.loc 1 365 0
 307 002a 2C61     		str	r4, [r5, #16]
 366:Src/main.c    ****   {
 308              		.loc 1 366 0
 309 002c 2846     		mov	r0, r5
 310 002e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 311              	.LVL10:
 370:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 312              		.loc 1 370 0
 313 0032 0894     		str	r4, [sp, #32]
 371:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 314              		.loc 1 371 0
 315 0034 0994     		str	r4, [sp, #36]
 372:Src/main.c    ****   {
 316              		.loc 1 372 0
 317 0036 2846     		mov	r0, r5
 318 0038 08A9     		add	r1, sp, #32
 319 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 320              	.LVL11:
 376:Src/main.c    ****   sConfigOC.Pulse = 0;
ARM GAS  /tmp/ccOoopxZ.s 			page 18


 321              		.loc 1 376 0
 322 003e 6023     		movs	r3, #96
 323 0040 0193     		str	r3, [sp, #4]
 377:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 324              		.loc 1 377 0
 325 0042 0294     		str	r4, [sp, #8]
 378:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 326              		.loc 1 378 0
 327 0044 0394     		str	r4, [sp, #12]
 379:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 328              		.loc 1 379 0
 329 0046 0594     		str	r4, [sp, #20]
 380:Src/main.c    ****   {
 330              		.loc 1 380 0
 331 0048 2846     		mov	r0, r5
 332 004a 01A9     		add	r1, sp, #4
 333 004c 0422     		movs	r2, #4
 334 004e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 335              	.LVL12:
 387:Src/main.c    **** 
 336              		.loc 1 387 0
 337 0052 2846     		mov	r0, r5
 338 0054 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 339              	.LVL13:
 389:Src/main.c    **** 
 340              		.loc 1 389 0
 341 0058 0BB0     		add	sp, sp, #44
 342              	.LCFI6:
 343              		.cfi_def_cfa_offset 12
 344              		@ sp needed
 345 005a 30BD     		pop	{r4, r5, pc}
 346              	.L12:
 347              		.align	2
 348              	.L11:
 349 005c 00000000 		.word	htim2
 350              		.cfi_endproc
 351              	.LFE126:
 353              		.section	.text.MX_TIM3_Init,"ax",%progbits
 354              		.align	2
 355              		.thumb
 356              		.thumb_func
 358              	MX_TIM3_Init:
 359              	.LFB127:
 397:Src/main.c    **** 
 360              		.loc 1 397 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 40
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 30B5     		push	{r4, r5, lr}
 365              	.LCFI7:
 366              		.cfi_def_cfa_offset 12
 367              		.cfi_offset 4, -12
 368              		.cfi_offset 5, -8
 369              		.cfi_offset 14, -4
 370 0002 8BB0     		sub	sp, sp, #44
 371              	.LCFI8:
 372              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccOoopxZ.s 			page 19


 403:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 373              		.loc 1 403 0
 374 0004 0024     		movs	r4, #0
 375 0006 0894     		str	r4, [sp, #32]
 376 0008 0994     		str	r4, [sp, #36]
 404:Src/main.c    **** 
 377              		.loc 1 404 0
 378 000a 0194     		str	r4, [sp, #4]
 379 000c 0294     		str	r4, [sp, #8]
 380 000e 0394     		str	r4, [sp, #12]
 381 0010 0494     		str	r4, [sp, #16]
 382 0012 0594     		str	r4, [sp, #20]
 383 0014 0694     		str	r4, [sp, #24]
 384 0016 0794     		str	r4, [sp, #28]
 409:Src/main.c    ****   htim3.Init.Prescaler = 0;
 385              		.loc 1 409 0
 386 0018 104D     		ldr	r5, .L15
 387 001a 114B     		ldr	r3, .L15+4
 388 001c 2B60     		str	r3, [r5]
 410:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 389              		.loc 1 410 0
 390 001e 6C60     		str	r4, [r5, #4]
 411:Src/main.c    ****   htim3.Init.Period = 10000;
 391              		.loc 1 411 0
 392 0020 AC60     		str	r4, [r5, #8]
 412:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 393              		.loc 1 412 0
 394 0022 42F21073 		movw	r3, #10000
 395 0026 EB60     		str	r3, [r5, #12]
 413:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 396              		.loc 1 413 0
 397 0028 2C61     		str	r4, [r5, #16]
 414:Src/main.c    ****   {
 398              		.loc 1 414 0
 399 002a 2846     		mov	r0, r5
 400 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 401              	.LVL14:
 418:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 402              		.loc 1 418 0
 403 0030 0894     		str	r4, [sp, #32]
 419:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 404              		.loc 1 419 0
 405 0032 0994     		str	r4, [sp, #36]
 420:Src/main.c    ****   {
 406              		.loc 1 420 0
 407 0034 2846     		mov	r0, r5
 408 0036 08A9     		add	r1, sp, #32
 409 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 410              	.LVL15:
 424:Src/main.c    ****   sConfigOC.Pulse = 0;
 411              		.loc 1 424 0
 412 003c 6023     		movs	r3, #96
 413 003e 0193     		str	r3, [sp, #4]
 425:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 414              		.loc 1 425 0
 415 0040 0294     		str	r4, [sp, #8]
 426:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
ARM GAS  /tmp/ccOoopxZ.s 			page 20


 416              		.loc 1 426 0
 417 0042 0394     		str	r4, [sp, #12]
 427:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 418              		.loc 1 427 0
 419 0044 0594     		str	r4, [sp, #20]
 428:Src/main.c    ****   {
 420              		.loc 1 428 0
 421 0046 2846     		mov	r0, r5
 422 0048 01A9     		add	r1, sp, #4
 423 004a 2246     		mov	r2, r4
 424 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 425              	.LVL16:
 435:Src/main.c    **** 
 426              		.loc 1 435 0
 427 0050 2846     		mov	r0, r5
 428 0052 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 429              	.LVL17:
 437:Src/main.c    **** 
 430              		.loc 1 437 0
 431 0056 0BB0     		add	sp, sp, #44
 432              	.LCFI9:
 433              		.cfi_def_cfa_offset 12
 434              		@ sp needed
 435 0058 30BD     		pop	{r4, r5, pc}
 436              	.L16:
 437 005a 00BF     		.align	2
 438              	.L15:
 439 005c 00000000 		.word	htim3
 440 0060 00040040 		.word	1073742848
 441              		.cfi_endproc
 442              	.LFE127:
 444              		.section	.text.MX_TIM4_Init,"ax",%progbits
 445              		.align	2
 446              		.thumb
 447              		.thumb_func
 449              	MX_TIM4_Init:
 450              	.LFB128:
 445:Src/main.c    **** 
 451              		.loc 1 445 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 48
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455 0000 30B5     		push	{r4, r5, lr}
 456              	.LCFI10:
 457              		.cfi_def_cfa_offset 12
 458              		.cfi_offset 4, -12
 459              		.cfi_offset 5, -8
 460              		.cfi_offset 14, -4
 461 0002 8DB0     		sub	sp, sp, #52
 462              	.LCFI11:
 463              		.cfi_def_cfa_offset 64
 451:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 464              		.loc 1 451 0
 465 0004 0024     		movs	r4, #0
 466 0006 0494     		str	r4, [sp, #16]
 467 0008 0694     		str	r4, [sp, #24]
 468 000a 0894     		str	r4, [sp, #32]
ARM GAS  /tmp/ccOoopxZ.s 			page 21


 469 000c 0A94     		str	r4, [sp, #40]
 452:Src/main.c    **** 
 470              		.loc 1 452 0
 471 000e 0194     		str	r4, [sp, #4]
 472 0010 0294     		str	r4, [sp, #8]
 457:Src/main.c    ****   htim4.Init.Prescaler = 0;
 473              		.loc 1 457 0
 474 0012 0E4D     		ldr	r5, .L19
 475 0014 0E4B     		ldr	r3, .L19+4
 476 0016 2B60     		str	r3, [r5]
 458:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 477              		.loc 1 458 0
 478 0018 6C60     		str	r4, [r5, #4]
 459:Src/main.c    ****   htim4.Init.Period = 0xffff;
 479              		.loc 1 459 0
 480 001a AC60     		str	r4, [r5, #8]
 460:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 481              		.loc 1 460 0
 482 001c 4FF6FF73 		movw	r3, #65535
 483 0020 EB60     		str	r3, [r5, #12]
 461:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 484              		.loc 1 461 0
 485 0022 2C61     		str	r4, [r5, #16]
 462:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 486              		.loc 1 462 0
 487 0024 0123     		movs	r3, #1
 488 0026 0393     		str	r3, [sp, #12]
 464:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 489              		.loc 1 464 0
 490 0028 0593     		str	r3, [sp, #20]
 466:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 491              		.loc 1 466 0
 492 002a 0522     		movs	r2, #5
 493 002c 0792     		str	r2, [sp, #28]
 468:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 494              		.loc 1 468 0
 495 002e 0993     		str	r3, [sp, #36]
 470:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 496              		.loc 1 470 0
 497 0030 0B92     		str	r2, [sp, #44]
 471:Src/main.c    ****   {
 498              		.loc 1 471 0
 499 0032 2846     		mov	r0, r5
 500 0034 03A9     		add	r1, sp, #12
 501 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 502              	.LVL18:
 475:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 503              		.loc 1 475 0
 504 003a 0194     		str	r4, [sp, #4]
 476:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 505              		.loc 1 476 0
 506 003c 0294     		str	r4, [sp, #8]
 477:Src/main.c    ****   {
 507              		.loc 1 477 0
 508 003e 2846     		mov	r0, r5
 509 0040 01A9     		add	r1, sp, #4
 510 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccOoopxZ.s 			page 22


 511              	.LVL19:
 485:Src/main.c    **** 
 512              		.loc 1 485 0
 513 0046 0DB0     		add	sp, sp, #52
 514              	.LCFI12:
 515              		.cfi_def_cfa_offset 12
 516              		@ sp needed
 517 0048 30BD     		pop	{r4, r5, pc}
 518              	.L20:
 519 004a 00BF     		.align	2
 520              	.L19:
 521 004c 00000000 		.word	htim4
 522 0050 00080040 		.word	1073743872
 523              		.cfi_endproc
 524              	.LFE128:
 526              		.section	.text.MX_TIM5_Init,"ax",%progbits
 527              		.align	2
 528              		.thumb
 529              		.thumb_func
 531              	MX_TIM5_Init:
 532              	.LFB129:
 493:Src/main.c    **** 
 533              		.loc 1 493 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 48
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537 0000 30B5     		push	{r4, r5, lr}
 538              	.LCFI13:
 539              		.cfi_def_cfa_offset 12
 540              		.cfi_offset 4, -12
 541              		.cfi_offset 5, -8
 542              		.cfi_offset 14, -4
 543 0002 8DB0     		sub	sp, sp, #52
 544              	.LCFI14:
 545              		.cfi_def_cfa_offset 64
 499:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 546              		.loc 1 499 0
 547 0004 0024     		movs	r4, #0
 548 0006 0494     		str	r4, [sp, #16]
 549 0008 0694     		str	r4, [sp, #24]
 550 000a 0894     		str	r4, [sp, #32]
 551 000c 0A94     		str	r4, [sp, #40]
 500:Src/main.c    **** 
 552              		.loc 1 500 0
 553 000e 0194     		str	r4, [sp, #4]
 554 0010 0294     		str	r4, [sp, #8]
 505:Src/main.c    ****   htim5.Init.Prescaler = 0;
 555              		.loc 1 505 0
 556 0012 0E4D     		ldr	r5, .L23
 557 0014 0E4B     		ldr	r3, .L23+4
 558 0016 2B60     		str	r3, [r5]
 506:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 559              		.loc 1 506 0
 560 0018 6C60     		str	r4, [r5, #4]
 507:Src/main.c    ****   htim5.Init.Period = 0xffff;
 561              		.loc 1 507 0
 562 001a AC60     		str	r4, [r5, #8]
ARM GAS  /tmp/ccOoopxZ.s 			page 23


 508:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 563              		.loc 1 508 0
 564 001c 4FF6FF73 		movw	r3, #65535
 565 0020 EB60     		str	r3, [r5, #12]
 509:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 566              		.loc 1 509 0
 567 0022 2C61     		str	r4, [r5, #16]
 510:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 568              		.loc 1 510 0
 569 0024 0123     		movs	r3, #1
 570 0026 0393     		str	r3, [sp, #12]
 512:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 571              		.loc 1 512 0
 572 0028 0593     		str	r3, [sp, #20]
 514:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 573              		.loc 1 514 0
 574 002a 0522     		movs	r2, #5
 575 002c 0792     		str	r2, [sp, #28]
 516:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 576              		.loc 1 516 0
 577 002e 0993     		str	r3, [sp, #36]
 518:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 578              		.loc 1 518 0
 579 0030 0B92     		str	r2, [sp, #44]
 519:Src/main.c    ****   {
 580              		.loc 1 519 0
 581 0032 2846     		mov	r0, r5
 582 0034 03A9     		add	r1, sp, #12
 583 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 584              	.LVL20:
 523:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 585              		.loc 1 523 0
 586 003a 0194     		str	r4, [sp, #4]
 524:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 587              		.loc 1 524 0
 588 003c 0294     		str	r4, [sp, #8]
 525:Src/main.c    ****   {
 589              		.loc 1 525 0
 590 003e 2846     		mov	r0, r5
 591 0040 01A9     		add	r1, sp, #4
 592 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 593              	.LVL21:
 533:Src/main.c    **** 
 594              		.loc 1 533 0
 595 0046 0DB0     		add	sp, sp, #52
 596              	.LCFI15:
 597              		.cfi_def_cfa_offset 12
 598              		@ sp needed
 599 0048 30BD     		pop	{r4, r5, pc}
 600              	.L24:
 601 004a 00BF     		.align	2
 602              	.L23:
 603 004c 00000000 		.word	htim5
 604 0050 000C0040 		.word	1073744896
 605              		.cfi_endproc
 606              	.LFE129:
 608              		.section	.text.MX_TIM1_Init,"ax",%progbits
ARM GAS  /tmp/ccOoopxZ.s 			page 24


 609              		.align	2
 610              		.thumb
 611              		.thumb_func
 613              	MX_TIM1_Init:
 614              	.LFB125:
 286:Src/main.c    **** 
 615              		.loc 1 286 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 64
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619 0000 30B5     		push	{r4, r5, lr}
 620              	.LCFI16:
 621              		.cfi_def_cfa_offset 12
 622              		.cfi_offset 4, -12
 623              		.cfi_offset 5, -8
 624              		.cfi_offset 14, -4
 625 0002 91B0     		sub	sp, sp, #68
 626              	.LCFI17:
 627              		.cfi_def_cfa_offset 80
 292:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 628              		.loc 1 292 0
 629 0004 0024     		movs	r4, #0
 630 0006 0E94     		str	r4, [sp, #56]
 631 0008 0F94     		str	r4, [sp, #60]
 293:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 632              		.loc 1 293 0
 633 000a 0794     		str	r4, [sp, #28]
 634 000c 0894     		str	r4, [sp, #32]
 635 000e 0994     		str	r4, [sp, #36]
 636 0010 0A94     		str	r4, [sp, #40]
 637 0012 0B94     		str	r4, [sp, #44]
 638 0014 0C94     		str	r4, [sp, #48]
 639 0016 0D94     		str	r4, [sp, #52]
 294:Src/main.c    **** 
 640              		.loc 1 294 0
 641 0018 0094     		str	r4, [sp]
 642 001a 0194     		str	r4, [sp, #4]
 643 001c 0294     		str	r4, [sp, #8]
 644 001e 0394     		str	r4, [sp, #12]
 645 0020 0494     		str	r4, [sp, #16]
 646 0022 0594     		str	r4, [sp, #20]
 647 0024 0694     		str	r4, [sp, #24]
 299:Src/main.c    ****   htim1.Init.Prescaler = 72;
 648              		.loc 1 299 0
 649 0026 1A4D     		ldr	r5, .L27
 650 0028 1A4B     		ldr	r3, .L27+4
 651 002a 2B60     		str	r3, [r5]
 300:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 652              		.loc 1 300 0
 653 002c 4823     		movs	r3, #72
 654 002e 6B60     		str	r3, [r5, #4]
 301:Src/main.c    ****   htim1.Init.Period = 20000;
 655              		.loc 1 301 0
 656 0030 AC60     		str	r4, [r5, #8]
 302:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 657              		.loc 1 302 0
 658 0032 44F62063 		movw	r3, #20000
ARM GAS  /tmp/ccOoopxZ.s 			page 25


 659 0036 EB60     		str	r3, [r5, #12]
 303:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 660              		.loc 1 303 0
 661 0038 2C61     		str	r4, [r5, #16]
 304:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 662              		.loc 1 304 0
 663 003a 6C61     		str	r4, [r5, #20]
 305:Src/main.c    ****   {
 664              		.loc 1 305 0
 665 003c 2846     		mov	r0, r5
 666 003e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 667              	.LVL22:
 309:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 668              		.loc 1 309 0
 669 0042 0E94     		str	r4, [sp, #56]
 310:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 670              		.loc 1 310 0
 671 0044 0F94     		str	r4, [sp, #60]
 311:Src/main.c    ****   {
 672              		.loc 1 311 0
 673 0046 2846     		mov	r0, r5
 674 0048 0EA9     		add	r1, sp, #56
 675 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 676              	.LVL23:
 315:Src/main.c    ****   sConfigOC.Pulse = 1500;
 677              		.loc 1 315 0
 678 004e 6023     		movs	r3, #96
 679 0050 0793     		str	r3, [sp, #28]
 316:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 680              		.loc 1 316 0
 681 0052 40F2DC53 		movw	r3, #1500
 682 0056 0893     		str	r3, [sp, #32]
 317:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 683              		.loc 1 317 0
 684 0058 0994     		str	r4, [sp, #36]
 318:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 685              		.loc 1 318 0
 686 005a 0B94     		str	r4, [sp, #44]
 319:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 687              		.loc 1 319 0
 688 005c 0C94     		str	r4, [sp, #48]
 320:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 689              		.loc 1 320 0
 690 005e 0D94     		str	r4, [sp, #52]
 321:Src/main.c    ****   {
 691              		.loc 1 321 0
 692 0060 2846     		mov	r0, r5
 693 0062 07A9     		add	r1, sp, #28
 694 0064 0C22     		movs	r2, #12
 695 0066 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 696              	.LVL24:
 325:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 697              		.loc 1 325 0
 698 006a 0094     		str	r4, [sp]
 326:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 699              		.loc 1 326 0
 700 006c 0194     		str	r4, [sp, #4]
ARM GAS  /tmp/ccOoopxZ.s 			page 26


 327:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 701              		.loc 1 327 0
 702 006e 0294     		str	r4, [sp, #8]
 328:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 703              		.loc 1 328 0
 704 0070 0394     		str	r4, [sp, #12]
 329:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 705              		.loc 1 329 0
 706 0072 0494     		str	r4, [sp, #16]
 330:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 707              		.loc 1 330 0
 708 0074 4FF40053 		mov	r3, #8192
 709 0078 0593     		str	r3, [sp, #20]
 331:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 710              		.loc 1 331 0
 711 007a 0694     		str	r4, [sp, #24]
 332:Src/main.c    ****   {
 712              		.loc 1 332 0
 713 007c 2846     		mov	r0, r5
 714 007e 6946     		mov	r1, sp
 715 0080 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 716              	.LVL25:
 339:Src/main.c    **** 
 717              		.loc 1 339 0
 718 0084 2846     		mov	r0, r5
 719 0086 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 720              	.LVL26:
 341:Src/main.c    **** 
 721              		.loc 1 341 0
 722 008a 11B0     		add	sp, sp, #68
 723              	.LCFI18:
 724              		.cfi_def_cfa_offset 12
 725              		@ sp needed
 726 008c 30BD     		pop	{r4, r5, pc}
 727              	.L28:
 728 008e 00BF     		.align	2
 729              	.L27:
 730 0090 00000000 		.word	htim1
 731 0094 00000140 		.word	1073807360
 732              		.cfi_endproc
 733              	.LFE125:
 735              		.section	.text.SystemClock_Config,"ax",%progbits
 736              		.align	2
 737              		.global	SystemClock_Config
 738              		.thumb
 739              		.thumb_func
 741              	SystemClock_Config:
 742              	.LFB124:
 242:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 743              		.loc 1 242 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 80
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747 0000 30B5     		push	{r4, r5, lr}
 748              	.LCFI19:
 749              		.cfi_def_cfa_offset 12
 750              		.cfi_offset 4, -12
ARM GAS  /tmp/ccOoopxZ.s 			page 27


 751              		.cfi_offset 5, -8
 752              		.cfi_offset 14, -4
 753 0002 95B0     		sub	sp, sp, #84
 754              	.LCFI20:
 755              		.cfi_def_cfa_offset 96
 243:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 756              		.loc 1 243 0
 757 0004 0024     		movs	r4, #0
 758 0006 0894     		str	r4, [sp, #32]
 759 0008 0994     		str	r4, [sp, #36]
 760 000a 0A94     		str	r4, [sp, #40]
 761 000c 0B94     		str	r4, [sp, #44]
 762 000e 0C94     		str	r4, [sp, #48]
 763 0010 0D94     		str	r4, [sp, #52]
 764 0012 0E94     		str	r4, [sp, #56]
 765 0014 0F94     		str	r4, [sp, #60]
 766 0016 1094     		str	r4, [sp, #64]
 767 0018 1194     		str	r4, [sp, #68]
 768 001a 1294     		str	r4, [sp, #72]
 769 001c 1394     		str	r4, [sp, #76]
 244:Src/main.c    **** 
 770              		.loc 1 244 0
 771 001e 0394     		str	r4, [sp, #12]
 772 0020 0494     		str	r4, [sp, #16]
 773 0022 0594     		str	r4, [sp, #20]
 774 0024 0694     		str	r4, [sp, #24]
 775 0026 0794     		str	r4, [sp, #28]
 776              	.LBB6:
 248:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 777              		.loc 1 248 0
 778 0028 0194     		str	r4, [sp, #4]
 779 002a 1C4B     		ldr	r3, .L31
 780 002c 1A6C     		ldr	r2, [r3, #64]
 781 002e 42F08052 		orr	r2, r2, #268435456
 782 0032 1A64     		str	r2, [r3, #64]
 783 0034 1B6C     		ldr	r3, [r3, #64]
 784 0036 03F08053 		and	r3, r3, #268435456
 785 003a 0193     		str	r3, [sp, #4]
 786 003c 019B     		ldr	r3, [sp, #4]
 787              	.LBE6:
 788              	.LBB7:
 249:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 789              		.loc 1 249 0
 790 003e 0294     		str	r4, [sp, #8]
 791 0040 174A     		ldr	r2, .L31+4
 792 0042 1368     		ldr	r3, [r2]
 793 0044 23F44043 		bic	r3, r3, #49152
 794 0048 43F40043 		orr	r3, r3, #32768
 795 004c 1360     		str	r3, [r2]
 796 004e 1368     		ldr	r3, [r2]
 797 0050 03F44043 		and	r3, r3, #49152
 798 0054 0293     		str	r3, [sp, #8]
 799 0056 029B     		ldr	r3, [sp, #8]
 800              	.LBE7:
 252:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801              		.loc 1 252 0
 802 0058 0225     		movs	r5, #2
ARM GAS  /tmp/ccOoopxZ.s 			page 28


 803 005a 0895     		str	r5, [sp, #32]
 253:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 804              		.loc 1 253 0
 805 005c 0123     		movs	r3, #1
 806 005e 0B93     		str	r3, [sp, #44]
 254:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 807              		.loc 1 254 0
 808 0060 1023     		movs	r3, #16
 809 0062 0C93     		str	r3, [sp, #48]
 255:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 810              		.loc 1 255 0
 811 0064 0E95     		str	r5, [sp, #56]
 256:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 812              		.loc 1 256 0
 813 0066 0F94     		str	r4, [sp, #60]
 257:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 814              		.loc 1 257 0
 815 0068 1093     		str	r3, [sp, #64]
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 816              		.loc 1 258 0
 817 006a 4FF4A873 		mov	r3, #336
 818 006e 1193     		str	r3, [sp, #68]
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 819              		.loc 1 259 0
 820 0070 0423     		movs	r3, #4
 821 0072 1293     		str	r3, [sp, #72]
 260:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 822              		.loc 1 260 0
 823 0074 0723     		movs	r3, #7
 824 0076 1393     		str	r3, [sp, #76]
 261:Src/main.c    ****   {
 825              		.loc 1 261 0
 826 0078 08A8     		add	r0, sp, #32
 827 007a FFF7FEFF 		bl	HAL_RCC_OscConfig
 828              	.LVL27:
 267:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 829              		.loc 1 267 0
 830 007e 0F23     		movs	r3, #15
 831 0080 0393     		str	r3, [sp, #12]
 269:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 832              		.loc 1 269 0
 833 0082 0495     		str	r5, [sp, #16]
 270:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 834              		.loc 1 270 0
 835 0084 0594     		str	r4, [sp, #20]
 271:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 836              		.loc 1 271 0
 837 0086 4FF48053 		mov	r3, #4096
 838 008a 0693     		str	r3, [sp, #24]
 272:Src/main.c    **** 
 839              		.loc 1 272 0
 840 008c 0794     		str	r4, [sp, #28]
 274:Src/main.c    ****   {
 841              		.loc 1 274 0
 842 008e 03A8     		add	r0, sp, #12
 843 0090 2946     		mov	r1, r5
 844 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
ARM GAS  /tmp/ccOoopxZ.s 			page 29


 845              	.LVL28:
 278:Src/main.c    **** 
 846              		.loc 1 278 0
 847 0096 15B0     		add	sp, sp, #84
 848              	.LCFI21:
 849              		.cfi_def_cfa_offset 12
 850              		@ sp needed
 851 0098 30BD     		pop	{r4, r5, pc}
 852              	.L32:
 853 009a 00BF     		.align	2
 854              	.L31:
 855 009c 00380240 		.word	1073887232
 856 00a0 00700040 		.word	1073770496
 857              		.cfi_endproc
 858              	.LFE124:
 860              		.section	.text.moteurDroit,"ax",%progbits
 861              		.align	2
 862              		.global	moteurDroit
 863              		.thumb
 864              		.thumb_func
 866              	moteurDroit:
 867              	.LFB132:
 632:Src/main.c    **** 
 633:Src/main.c    **** /* USER CODE BEGIN 4 */
 634:Src/main.c    **** void moteurDroit(int PWM)
 635:Src/main.c    **** {
 868              		.loc 1 635 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              	.LVL29:
 873 0000 10B5     		push	{r4, lr}
 874              	.LCFI22:
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 4, -8
 877              		.cfi_offset 14, -4
 636:Src/main.c    ****     if(PWM == abs(PWM))
 878              		.loc 1 636 0
 879 0002 80EAE074 		eor	r4, r0, r0, asr #31
 880 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 881 000a 8442     		cmp	r4, r0
 882 000c 06D1     		bne	.L34
 637:Src/main.c    ****     {
 638:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 883              		.loc 1 638 0
 884 000e 0D48     		ldr	r0, .L39
 885              	.LVL30:
 886 0010 4FF48061 		mov	r1, #1024
 887 0014 0022     		movs	r2, #0
 888 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 889              	.LVL31:
 890 001a 05E0     		b	.L35
 891              	.LVL32:
 892              	.L34:
 639:Src/main.c    ****     }
 640:Src/main.c    ****     else
 641:Src/main.c    ****     {
ARM GAS  /tmp/ccOoopxZ.s 			page 30


 642:Src/main.c    ****         HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 893              		.loc 1 642 0
 894 001c 0948     		ldr	r0, .L39
 895              	.LVL33:
 896 001e 4FF48061 		mov	r1, #1024
 897 0022 0122     		movs	r2, #1
 898 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 899              	.LVL34:
 900              	.L35:
 643:Src/main.c    ****     }
 644:Src/main.c    ****     if (abs(PWM) > 10000)
 901              		.loc 1 644 0
 902 0028 42F21073 		movw	r3, #10000
 903 002c 9C42     		cmp	r4, r3
 904 002e 05DD     		ble	.L36
 645:Src/main.c    ****     {
 646:Src/main.c    **** 		htim2.Instance->CCR2 = 10000;
 905              		.loc 1 646 0
 906 0030 054B     		ldr	r3, .L39+4
 907 0032 1B68     		ldr	r3, [r3]
 908 0034 42F21072 		movw	r2, #10000
 909 0038 9A63     		str	r2, [r3, #56]
 910 003a 10BD     		pop	{r4, pc}
 911              	.L36:
 647:Src/main.c    ****     }
 648:Src/main.c    ****     else 
 649:Src/main.c    ****     {
 650:Src/main.c    **** 		htim2.Instance->CCR2 = abs(PWM);
 912              		.loc 1 650 0
 913 003c 024B     		ldr	r3, .L39+4
 914 003e 1B68     		ldr	r3, [r3]
 915 0040 9C63     		str	r4, [r3, #56]
 916 0042 10BD     		pop	{r4, pc}
 917              	.L40:
 918              		.align	2
 919              	.L39:
 920 0044 00000240 		.word	1073872896
 921 0048 00000000 		.word	htim2
 922              		.cfi_endproc
 923              	.LFE132:
 925              		.section	.text.moteurGauche,"ax",%progbits
 926              		.align	2
 927              		.global	moteurGauche
 928              		.thumb
 929              		.thumb_func
 931              	moteurGauche:
 932              	.LFB133:
 651:Src/main.c    **** 	}
 652:Src/main.c    **** }
 653:Src/main.c    **** 
 654:Src/main.c    **** 
 655:Src/main.c    **** void moteurGauche(int PWM)
 656:Src/main.c    **** {
 933              		.loc 1 656 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccOoopxZ.s 			page 31


 937              	.LVL35:
 938 0000 10B5     		push	{r4, lr}
 939              	.LCFI23:
 940              		.cfi_def_cfa_offset 8
 941              		.cfi_offset 4, -8
 942              		.cfi_offset 14, -4
 657:Src/main.c    ****     if(PWM == abs(PWM))
 943              		.loc 1 657 0
 944 0002 80EAE074 		eor	r4, r0, r0, asr #31
 945 0006 A4EBE074 		sub	r4, r4, r0, asr #31
 946 000a 8442     		cmp	r4, r0
 947 000c 05D1     		bne	.L42
 658:Src/main.c    ****     {
 659:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_SET);
 948              		.loc 1 659 0
 949 000e 0C48     		ldr	r0, .L47
 950              	.LVL36:
 951 0010 2021     		movs	r1, #32
 952 0012 0122     		movs	r2, #1
 953 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 954              	.LVL37:
 955 0018 04E0     		b	.L43
 956              	.LVL38:
 957              	.L42:
 660:Src/main.c    ****     }
 661:Src/main.c    ****     else
 662:Src/main.c    ****     {
 663:Src/main.c    ****         HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 958              		.loc 1 663 0
 959 001a 0948     		ldr	r0, .L47
 960              	.LVL39:
 961 001c 2021     		movs	r1, #32
 962 001e 0022     		movs	r2, #0
 963 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 964              	.LVL40:
 965              	.L43:
 664:Src/main.c    ****     }
 665:Src/main.c    ****     if (abs(PWM) > 10000)
 966              		.loc 1 665 0
 967 0024 42F21073 		movw	r3, #10000
 968 0028 9C42     		cmp	r4, r3
 969 002a 05DD     		ble	.L44
 666:Src/main.c    ****     {
 667:Src/main.c    **** 		htim3.Instance->CCR1 = 10000;
 970              		.loc 1 667 0
 971 002c 054B     		ldr	r3, .L47+4
 972 002e 1B68     		ldr	r3, [r3]
 973 0030 42F21072 		movw	r2, #10000
 974 0034 5A63     		str	r2, [r3, #52]
 975 0036 10BD     		pop	{r4, pc}
 976              	.L44:
 668:Src/main.c    ****     }
 669:Src/main.c    ****     else 
 670:Src/main.c    ****     {
 671:Src/main.c    **** 		htim3.Instance->CCR1 = abs(PWM);
 977              		.loc 1 671 0
 978 0038 024B     		ldr	r3, .L47+4
ARM GAS  /tmp/ccOoopxZ.s 			page 32


 979 003a 1B68     		ldr	r3, [r3]
 980 003c 5C63     		str	r4, [r3, #52]
 981 003e 10BD     		pop	{r4, pc}
 982              	.L48:
 983              		.align	2
 984              	.L47:
 985 0040 00040240 		.word	1073873920
 986 0044 00000000 		.word	htim3
 987              		.cfi_endproc
 988              	.LFE133:
 990              		.global	__aeabi_i2d
 991              		.global	__aeabi_dmul
 992              		.global	__aeabi_d2iz
 993              		.section	.text.main,"ax",%progbits
 994              		.align	2
 995              		.global	main
 996              		.thumb
 997              		.thumb_func
 999              	main:
 1000              	.LFB123:
 119:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1001              		.loc 1 119 0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 8
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1006              	.LCFI24:
 1007              		.cfi_def_cfa_offset 36
 1008              		.cfi_offset 4, -36
 1009              		.cfi_offset 5, -32
 1010              		.cfi_offset 6, -28
 1011              		.cfi_offset 7, -24
 1012              		.cfi_offset 8, -20
 1013              		.cfi_offset 9, -16
 1014              		.cfi_offset 10, -12
 1015              		.cfi_offset 11, -8
 1016              		.cfi_offset 14, -4
 1017 0004 93B0     		sub	sp, sp, #76
 1018              	.LCFI25:
 1019              		.cfi_def_cfa_offset 112
 127:Src/main.c    **** 
 1020              		.loc 1 127 0
 1021 0006 FFF7FEFF 		bl	HAL_Init
 1022              	.LVL41:
 134:Src/main.c    **** 
 1023              		.loc 1 134 0
 1024 000a FFF7FEFF 		bl	SystemClock_Config
 1025              	.LVL42:
 141:Src/main.c    ****   MX_USART2_UART_Init();
 1026              		.loc 1 141 0
 1027 000e FFF7FEFF 		bl	MX_GPIO_Init
 1028              	.LVL43:
 142:Src/main.c    ****   MX_TIM2_Init();
 1029              		.loc 1 142 0
 1030 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 1031              	.LVL44:
 143:Src/main.c    ****   MX_TIM3_Init();
ARM GAS  /tmp/ccOoopxZ.s 			page 33


 1032              		.loc 1 143 0
 1033 0016 FFF7FEFF 		bl	MX_TIM2_Init
 1034              	.LVL45:
 144:Src/main.c    ****   MX_TIM4_Init();
 1035              		.loc 1 144 0
 1036 001a FFF7FEFF 		bl	MX_TIM3_Init
 1037              	.LVL46:
 145:Src/main.c    ****   MX_TIM5_Init();
 1038              		.loc 1 145 0
 1039 001e FFF7FEFF 		bl	MX_TIM4_Init
 1040              	.LVL47:
 146:Src/main.c    ****   MX_TIM1_Init();
 1041              		.loc 1 146 0
 1042 0022 FFF7FEFF 		bl	MX_TIM5_Init
 1043              	.LVL48:
 147:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1044              		.loc 1 147 0
 1045 0026 FFF7FEFF 		bl	MX_TIM1_Init
 1046              	.LVL49:
 149:Src/main.c    ****   HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 1047              		.loc 1 149 0
 1048 002a 8B48     		ldr	r0, .L59+8
 1049 002c 0421     		movs	r1, #4
 1050 002e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1051              	.LVL50:
 150:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 1052              		.loc 1 150 0
 1053 0032 8A48     		ldr	r0, .L59+12
 1054 0034 0021     		movs	r1, #0
 1055 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1056              	.LVL51:
 151:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 1057              		.loc 1 151 0
 1058 003a 8948     		ldr	r0, .L59+16
 1059 003c 1821     		movs	r1, #24
 1060 003e FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1061              	.LVL52:
 152:Src/main.c    ****   HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_4);
 1062              		.loc 1 152 0
 1063 0042 8848     		ldr	r0, .L59+20
 1064 0044 1821     		movs	r1, #24
 1065 0046 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1066              	.LVL53:
 153:Src/main.c    ****   /* USER CODE END 2 */
 1067              		.loc 1 153 0
 1068 004a 8748     		ldr	r0, .L59+24
 1069 004c 0C21     		movs	r1, #12
 1070 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1071              	.LVL54:
 158:Src/main.c    ****   while(HAL_GPIO_ReadPin(Tirette_GPIO_Port, Tirette_Pin))
 1072              		.loc 1 158 0
 1073 0052 8648     		ldr	r0, .L59+28
 1074 0054 8649     		ldr	r1, .L59+32
 1075 0056 2F22     		movs	r2, #47
 1076 0058 4FF0FF33 		mov	r3, #-1
 1077 005c FFF7FEFF 		bl	HAL_UART_Transmit
 1078              	.LVL55:
ARM GAS  /tmp/ccOoopxZ.s 			page 34


 1079              	.L50:
 159:Src/main.c    ****   {}
 1080              		.loc 1 159 0 discriminator 1
 1081 0060 8448     		ldr	r0, .L59+36
 1082 0062 4FF48051 		mov	r1, #4096
 1083 0066 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1084              	.LVL56:
 1085 006a 0028     		cmp	r0, #0
 1086 006c F8D1     		bne	.L50
 161:Src/main.c    ****     
 1087              		.loc 1 161 0
 1088 006e FFF7FEFF 		bl	HAL_GetTick
 1089              	.LVL57:
 1090 0072 1190     		str	r0, [sp, #68]
 1091              	.LVL58:
 163:Src/main.c    ****   HAL_Delay(1000);
 1092              		.loc 1 163 0
 1093 0074 7D48     		ldr	r0, .L59+28
 1094              	.LVL59:
 1095 0076 8049     		ldr	r1, .L59+40
 1096 0078 1A22     		movs	r2, #26
 1097 007a 4FF0FF33 		mov	r3, #-1
 1098 007e FFF7FEFF 		bl	HAL_UART_Transmit
 1099              	.LVL60:
 164:Src/main.c    ****   uint32_t oldTicks = HAL_GetTick(); //init the time tracking variable for the fixed frequency PID 
 1100              		.loc 1 164 0
 1101 0082 4FF47A70 		mov	r0, #1000
 1102 0086 FFF7FEFF 		bl	HAL_Delay
 1103              	.LVL61:
 165:Src/main.c    **** 
 1104              		.loc 1 165 0
 1105 008a FFF7FEFF 		bl	HAL_GetTick
 1106              	.LVL62:
 1107 008e 0646     		mov	r6, r0
 1108              	.LVL63:
 170:Src/main.c    ****   TIM5->CNT = 30000;
 1109              		.loc 1 170 0
 1110 0090 47F23053 		movw	r3, #30000
 1111 0094 794A     		ldr	r2, .L59+44
 1112 0096 5362     		str	r3, [r2, #36]
 1113              	.LVL64:
 171:Src/main.c    ****   
 1114              		.loc 1 171 0
 1115 0098 02F58062 		add	r2, r2, #1024
 1116 009c 5362     		str	r3, [r2, #36]
 173:Src/main.c    **** 
 1117              		.loc 1 173 0
 1118 009e 724B     		ldr	r3, .L59+24
 1119 00a0 1B68     		ldr	r3, [r3]
 1120 00a2 40F2DC52 		movw	r2, #1500
 1121 00a6 1A64     		str	r2, [r3, #64]
 1122 00a8 04E0     		b	.L51
 1123              	.LVL65:
 1124              	.L52:
 1125              	.LBB8:
 179:Src/main.c    ****     HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_RESET);
 1126              		.loc 1 179 0
ARM GAS  /tmp/ccOoopxZ.s 			page 35


 1127 00aa 7248     		ldr	r0, .L59+36
 1128 00ac 1021     		movs	r1, #16
 1129 00ae 0122     		movs	r2, #1
 1130 00b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1131              	.LVL66:
 1132              	.L51:
 178:Src/main.c    ****     {HAL_GPIO_WritePin(DebugTiming_GPIO_Port, DebugTiming_Pin, GPIO_PIN_SET);}
 1133              		.loc 1 178 0
 1134 00b4 FFF7FEFF 		bl	HAL_GetTick
 1135              	.LVL67:
 1136 00b8 801B     		subs	r0, r0, r6
 1137 00ba 714B     		ldr	r3, .L59+48
 1138 00bc 1B68     		ldr	r3, [r3]
 1139 00be 9842     		cmp	r0, r3
 1140 00c0 F3D3     		bcc	.L52
 180:Src/main.c    ****     oldTicks = HAL_GetTick();
 1141              		.loc 1 180 0
 1142 00c2 6C48     		ldr	r0, .L59+36
 1143 00c4 1021     		movs	r1, #16
 1144 00c6 0022     		movs	r2, #0
 1145 00c8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1146              	.LVL68:
 181:Src/main.c    ****     
 1147              		.loc 1 181 0
 1148 00cc FFF7FEFF 		bl	HAL_GetTick
 1149              	.LVL69:
 1150 00d0 0646     		mov	r6, r0
 1151              	.LVL70:
 183:Src/main.c    ****     {
 1152              		.loc 1 183 0
 1153 00d2 FFF7FEFF 		bl	HAL_GetTick
 1154              	.LVL71:
 1155 00d6 119B     		ldr	r3, [sp, #68]
 1156 00d8 C01A     		subs	r0, r0, r3
 1157 00da 6A4B     		ldr	r3, .L59+52
 1158 00dc 9842     		cmp	r0, r3
 1159 00de 0DD9     		bls	.L53
 185:Src/main.c    ****         moteurGauche(0);
 1160              		.loc 1 185 0
 1161 00e0 6248     		ldr	r0, .L59+28
 1162 00e2 6949     		ldr	r1, .L59+56
 1163 00e4 1A22     		movs	r2, #26
 1164 00e6 4FF0FF33 		mov	r3, #-1
 1165 00ea FFF7FEFF 		bl	HAL_UART_Transmit
 1166              	.LVL72:
 186:Src/main.c    **** 		moteurDroit(0);
 1167              		.loc 1 186 0
 1168 00ee 0020     		movs	r0, #0
 1169 00f0 FFF7FEFF 		bl	moteurGauche
 1170              	.LVL73:
 187:Src/main.c    ****         while(1){}
 1171              		.loc 1 187 0
 1172 00f4 0020     		movs	r0, #0
 1173 00f6 FFF7FEFF 		bl	moteurDroit
 1174              	.LVL74:
 1175              	.L54:
 188:Src/main.c    ****     }
ARM GAS  /tmp/ccOoopxZ.s 			page 36


 1176              		.loc 1 188 0 discriminator 1
 1177 00fa FEE7     		b	.L54
 1178              	.L53:
 191:Src/main.c    ****     {
 1179              		.loc 1 191 0
 1180 00fc 6348     		ldr	r0, .L59+60
 1181 00fe 1021     		movs	r1, #16
 1182 0100 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1183              	.LVL75:
 1184 0104 68B1     		cbz	r0, .L55
 193:Src/main.c    ****         moteurGauche(0);
 1185              		.loc 1 193 0
 1186 0106 5948     		ldr	r0, .L59+28
 1187 0108 6149     		ldr	r1, .L59+64
 1188 010a 1B22     		movs	r2, #27
 1189 010c 4FF0FF33 		mov	r3, #-1
 1190 0110 FFF7FEFF 		bl	HAL_UART_Transmit
 1191              	.LVL76:
 194:Src/main.c    **** 		moteurDroit(0);
 1192              		.loc 1 194 0
 1193 0114 0020     		movs	r0, #0
 1194 0116 FFF7FEFF 		bl	moteurGauche
 1195              	.LVL77:
 195:Src/main.c    ****         while(1){}
 1196              		.loc 1 195 0
 1197 011a 0020     		movs	r0, #0
 1198 011c FFF7FEFF 		bl	moteurDroit
 1199              	.LVL78:
 1200              	.L56:
 196:Src/main.c    ****     }
 1201              		.loc 1 196 0 discriminator 2
 1202 0120 FEE7     		b	.L56
 1203              	.L55:
 200:Src/main.c    ****     int tim5 = (-TIM5->CNT+30000);
 1204              		.loc 1 200 0
 1205 0122 5649     		ldr	r1, .L59+44
 1206 0124 4C6A     		ldr	r4, [r1, #36]
 1207 0126 A4F5EA44 		sub	r4, r4, #29952
 1208 012a 303C     		subs	r4, r4, #48
 1209              	.LVL79:
 201:Src/main.c    ****     TIM4->CNT = 30000;
 1210              		.loc 1 201 0
 1211 012c 594A     		ldr	r2, .L59+68
 1212 012e 506A     		ldr	r0, [r2, #36]
 1213 0130 47F23053 		movw	r3, #30000
 1214              	.LVL80:
 202:Src/main.c    ****     TIM5->CNT = 30000;
 1215              		.loc 1 202 0
 1216 0134 4B62     		str	r3, [r1, #36]
 203:Src/main.c    ****     
 1217              		.loc 1 203 0
 1218 0136 5362     		str	r3, [r2, #36]
 205:Src/main.c    ****     
 1219              		.loc 1 205 0
 1220 0138 181A     		subs	r0, r3, r0
 1221              	.LVL81:
 1222 013a FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  /tmp/ccOoopxZ.s 			page 37


 1223              	.LVL82:
 1224 013e 44A3     		adr	r3, .L59
 1225 0140 D3E90023 		ldrd	r2, [r3]
 1226 0144 FFF7FEFF 		bl	__aeabi_dmul
 1227              	.LVL83:
 1228 0148 FFF7FEFF 		bl	__aeabi_d2iz
 1229              	.LVL84:
 1230 014c 0546     		mov	r5, r0
 1231              	.LVL85:
 207:Src/main.c    ****     tim4Tot += tim4;//for debug
 1232              		.loc 1 207 0
 1233 014e DFF878B1 		ldr	fp, .L59+120
 1234 0152 DFF878A1 		ldr	r10, .L59+124
 1235 0156 DFF85891 		ldr	r9, .L59+96
 1236 015a CDF80090 		str	r9, [sp]
 1237 015e 2046     		mov	r0, r4
 1238              	.LVL86:
 1239 0160 2946     		mov	r1, r5
 1240 0162 5A46     		mov	r2, fp
 1241 0164 5346     		mov	r3, r10
 1242 0166 FFF7FEFF 		bl	updatePos
 1243              	.LVL87:
 208:Src/main.c    ****     tim5Tot += tim5;
 1244              		.loc 1 208 0
 1245 016a 4B4A     		ldr	r2, .L59+72
 1246 016c 1368     		ldr	r3, [r2]
 1247 016e 2344     		add	r3, r3, r4
 1248 0170 1360     		str	r3, [r2]
 209:Src/main.c    ****     
 1249              		.loc 1 209 0
 1250 0172 4A4A     		ldr	r2, .L59+76
 1251 0174 1368     		ldr	r3, [r2]
 1252 0176 2B44     		add	r3, r3, r5
 1253 0178 1360     		str	r3, [r2]
 211:Src/main.c    ****     
 1254              		.loc 1 211 0
 1255 017a 494F     		ldr	r7, .L59+80
 1256 017c DFF84081 		ldr	r8, .L59+112
 1257 0180 9BED000B 		fldd	d0, [fp]
 1258 0184 9AED001B 		fldd	d1, [r10]
 1259 0188 99ED002B 		fldd	d2, [r9]
 1260 018c EE46     		mov	lr, sp
 1261 018e DFF8DCC0 		ldr	ip, .L59+28
 1262 0192 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1263 0196 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1264 019a BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1265 019e AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1266 01a2 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1267 01a6 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1268 01aa 9CE80F00 		ldmia	ip, {r0, r1, r2, r3}
 1269 01ae 8EE80F00 		stmia	lr, {r0, r1, r2, r3}
 1270 01b2 3846     		mov	r0, r7
 1271 01b4 4146     		mov	r1, r8
 1272 01b6 2246     		mov	r2, r4
 1273 01b8 2B46     		mov	r3, r5
 1274 01ba FFF7FEFF 		bl	stateMachine
 1275              	.LVL88:
ARM GAS  /tmp/ccOoopxZ.s 			page 38


 213:Src/main.c    ****     moteurDroit(consigneDroit);
 1276              		.loc 1 213 0
 1277 01be D8F80000 		ldr	r0, [r8]
 1278 01c2 FFF7FEFF 		bl	moteurGauche
 1279              	.LVL89:
 214:Src/main.c    ****     
 1280              		.loc 1 214 0
 1281 01c6 3868     		ldr	r0, [r7]
 1282 01c8 FFF7FEFF 		bl	moteurDroit
 1283              	.LVL90:
 217:Src/main.c    ****     if (_DEBUG == 1)
 1284              		.loc 1 217 0
 1285 01cc 354A     		ldr	r2, .L59+84
 1286 01ce 1368     		ldr	r3, [r2]
 1287 01d0 0133     		adds	r3, r3, #1
 1288 01d2 1360     		str	r3, [r2]
 220:Src/main.c    ****         {
 1289              		.loc 1 220 0
 1290 01d4 344A     		ldr	r2, .L59+88
 1291 01d6 1268     		ldr	r2, [r2]
 1292 01d8 9342     		cmp	r3, r2
 1293 01da 7FF46BAF 		bne	.L51
 222:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 1294              		.loc 1 222 0
 1295 01de 334C     		ldr	r4, .L59+92
 1296              	.LVL91:
 1297 01e0 DBE90089 		ldrd	r8, [fp]
 1298 01e4 DAE90023 		ldrd	r2, [r10]
 1299 01e8 CDE90023 		strd	r2, [sp]
 1300 01ec 304B     		ldr	r3, .L59+96
 1301 01ee D3E90001 		ldrd	r0, [r3]
 1302 01f2 0022     		movs	r2, #0
 1303 01f4 2F4B     		ldr	r3, .L59+100
 1304 01f6 FFF7FEFF 		bl	__aeabi_dmul
 1305              	.LVL92:
 1306 01fa CDE90201 		strd	r0, [sp, #8]
 1307 01fe 2046     		mov	r0, r4
 1308 0200 2D49     		ldr	r1, .L59+104
 1309 0202 4246     		mov	r2, r8
 1310 0204 4B46     		mov	r3, r9
 1311 0206 FFF7FEFF 		bl	sprintf
 1312              	.LVL93:
 223:Src/main.c    ****             sprintf(buffer2, "tot : %d / %d / %d / %d\n",tim4Tot, tim5Tot, consigneDroit, consigneG
 1313              		.loc 1 223 0
 1314 020a 184D     		ldr	r5, .L59+28
 1315              	.LVL94:
 1316 020c 2846     		mov	r0, r5
 1317 020e 2146     		mov	r1, r4
 1318 0210 3222     		movs	r2, #50
 1319 0212 4FF0FF33 		mov	r3, #-1
 1320 0216 FFF7FEFF 		bl	HAL_UART_Transmit
 1321              	.LVL95:
 224:Src/main.c    ****             HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), HAL_MAX_DELAY);
 1322              		.loc 1 224 0
 1323 021a 284C     		ldr	r4, .L59+108
 1324 021c 1E4B     		ldr	r3, .L59+72
 1325 021e 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccOoopxZ.s 			page 39


 1326 0220 1E4B     		ldr	r3, .L59+76
 1327 0222 1B68     		ldr	r3, [r3]
 1328 0224 3968     		ldr	r1, [r7]
 1329 0226 0091     		str	r1, [sp]
 1330 0228 2549     		ldr	r1, .L59+112
 1331 022a 0968     		ldr	r1, [r1]
 1332 022c 0191     		str	r1, [sp, #4]
 1333 022e 2046     		mov	r0, r4
 1334 0230 2449     		ldr	r1, .L59+116
 1335 0232 FFF7FEFF 		bl	sprintf
 1336              	.LVL96:
 225:Src/main.c    ****             debugCounter = 0;
 1337              		.loc 1 225 0
 1338 0236 2846     		mov	r0, r5
 1339 0238 2146     		mov	r1, r4
 1340 023a 3222     		movs	r2, #50
 1341 023c 4FF0FF33 		mov	r3, #-1
 1342 0240 FFF7FEFF 		bl	HAL_UART_Transmit
 1343              	.LVL97:
 226:Src/main.c    ****         }
 1344              		.loc 1 226 0
 1345 0244 0022     		movs	r2, #0
 1346 0246 174B     		ldr	r3, .L59+84
 1347 0248 1A60     		str	r2, [r3]
 1348 024a 33E7     		b	.L51
 1349              	.L60:
 1350 024c AFF30080 		.align	3
 1351              	.L59:
 1352 0250 5B423EE8 		.word	3896394331
 1353 0254 D9ACF03F 		.word	1072737497
 1354 0258 00000000 		.word	htim2
 1355 025c 00000000 		.word	htim3
 1356 0260 00000000 		.word	htim4
 1357 0264 00000000 		.word	htim5
 1358 0268 00000000 		.word	htim1
 1359 026c 00000000 		.word	huart2
 1360 0270 00000000 		.word	.LC0
 1361 0274 00080240 		.word	1073874944
 1362 0278 30000000 		.word	.LC1
 1363 027c 00080040 		.word	1073743872
 1364 0280 00000000 		.word	.LANCHOR0
 1365 0284 905F0100 		.word	90000
 1366 0288 4C000000 		.word	.LC2
 1367 028c 00000240 		.word	1073872896
 1368 0290 68000000 		.word	.LC3
 1369 0294 000C0040 		.word	1073744896
 1370 0298 00000000 		.word	.LANCHOR4
 1371 029c 00000000 		.word	.LANCHOR5
 1372 02a0 00000000 		.word	.LANCHOR6
 1373 02a4 00000000 		.word	.LANCHOR8
 1374 02a8 00000000 		.word	.LANCHOR9
 1375 02ac 00000000 		.word	.LANCHOR10
 1376 02b0 00000000 		.word	.LANCHOR3
 1377 02b4 00408F40 		.word	1083129856
 1378 02b8 84000000 		.word	.LC4
 1379 02bc 00000000 		.word	.LANCHOR11
 1380 02c0 00000000 		.word	.LANCHOR7
ARM GAS  /tmp/ccOoopxZ.s 			page 40


 1381 02c4 98000000 		.word	.LC5
 1382 02c8 00000000 		.word	.LANCHOR1
 1383 02cc 00000000 		.word	.LANCHOR2
 1384              	.LBE8:
 1385              		.cfi_endproc
 1386              	.LFE123:
 1388              		.section	.text.Error_Handler,"ax",%progbits
 1389              		.align	2
 1390              		.global	Error_Handler
 1391              		.thumb
 1392              		.thumb_func
 1394              	Error_Handler:
 1395              	.LFB134:
 672:Src/main.c    **** 	}
 673:Src/main.c    **** }
 674:Src/main.c    **** 
 675:Src/main.c    **** 
 676:Src/main.c    **** /* USER CODE END 4 */
 677:Src/main.c    **** 
 678:Src/main.c    **** /**
 679:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 680:Src/main.c    ****   * @retval None
 681:Src/main.c    ****   */
 682:Src/main.c    **** void Error_Handler(void)
 683:Src/main.c    **** {
 1396              		.loc 1 683 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 0
 1399              		@ frame_needed = 0, uses_anonymous_args = 0
 1400              		@ link register save eliminated.
 1401 0000 7047     		bx	lr
 1402              		.cfi_endproc
 1403              	.LFE134:
 1405              		.global	debugMessageFrequency
 1406              		.global	fixedFrequency
 1407              		.global	buffer2
 1408              		.global	buffer
 1409              		.global	tim5Tot
 1410              		.global	tim4Tot
 1411              		.global	debugCounter
 1412              		.global	consigneGauche
 1413              		.global	consigneDroit
 1414              		.global	angle
 1415              		.global	positionY
 1416              		.global	positionX
 1417              		.comm	huart2,64,4
 1418              		.comm	htim5,60,4
 1419              		.comm	htim4,60,4
 1420              		.comm	htim3,60,4
 1421              		.comm	htim2,60,4
 1422              		.comm	htim1,60,4
 1423 0002 00BF     		.section	.bss.consigneDroit,"aw",%nobits
 1424              		.align	2
 1425              		.set	.LANCHOR6,. + 0
 1428              	consigneDroit:
 1429 0000 00000000 		.space	4
 1430              		.section	.bss.positionX,"aw",%nobits
ARM GAS  /tmp/ccOoopxZ.s 			page 41


 1431              		.align	3
 1432              		.set	.LANCHOR1,. + 0
 1435              	positionX:
 1436 0000 00000000 		.space	8
 1436      00000000 
 1437              		.section	.bss.positionY,"aw",%nobits
 1438              		.align	3
 1439              		.set	.LANCHOR2,. + 0
 1442              	positionY:
 1443 0000 00000000 		.space	8
 1443      00000000 
 1444              		.section	.data.debugMessageFrequency,"aw",%progbits
 1445              		.align	2
 1446              		.set	.LANCHOR9,. + 0
 1449              	debugMessageFrequency:
 1450 0000 0A000000 		.word	10
 1451              		.section	.bss.tim4Tot,"aw",%nobits
 1452              		.align	2
 1453              		.set	.LANCHOR4,. + 0
 1456              	tim4Tot:
 1457 0000 00000000 		.space	4
 1458              		.section	.bss.tim5Tot,"aw",%nobits
 1459              		.align	2
 1460              		.set	.LANCHOR5,. + 0
 1463              	tim5Tot:
 1464 0000 00000000 		.space	4
 1465              		.section	.data.fixedFrequency,"aw",%progbits
 1466              		.align	2
 1467              		.set	.LANCHOR0,. + 0
 1470              	fixedFrequency:
 1471 0000 28000000 		.word	40
 1472              		.section	.rodata.str1.4,"aMS",%progbits,1
 1473              		.align	2
 1474              	.LC0:
 1475 0000 54697265 		.ascii	"Tire moi la tirette, que ma bobinette choisse\012\000"
 1475      206D6F69 
 1475      206C6120 
 1475      74697265 
 1475      7474652C 
 1476 002f 00       		.space	1
 1477              	.LC1:
 1478 0030 41747474 		.ascii	"Atttenzion, zest barti !\012\000"
 1478      656E7A69 
 1478      6F6E2C20 
 1478      7A657374 
 1478      20626172 
 1479 004a 0000     		.space	2
 1480              	.LC2:
 1481 004c 46696E20 		.ascii	"Fin de match -- Timeout \012\000"
 1481      6465206D 
 1481      61746368 
 1481      202D2D20 
 1481      54696D65 
 1482 0066 0000     		.space	2
 1483              	.LC3:
 1484 0068 46696E20 		.ascii	"Fin de match -- Obstacle \012\000"
 1484      6465206D 
ARM GAS  /tmp/ccOoopxZ.s 			page 42


 1484      61746368 
 1484      202D2D20 
 1484      4F627374 
 1485 0083 00       		.space	1
 1486              	.LC4:
 1487 0084 706F7320 		.ascii	"pos : %f / %f / %f\012\000"
 1487      3A202566 
 1487      202F2025 
 1487      66202F20 
 1487      25660A00 
 1488              	.LC5:
 1489 0098 746F7420 		.ascii	"tot : %d / %d / %d / %d\012\000"
 1489      3A202564 
 1489      202F2025 
 1489      64202F20 
 1489      2564202F 
 1490              		.section	.bss.buffer2,"aw",%nobits
 1491              		.align	2
 1492              		.set	.LANCHOR11,. + 0
 1495              	buffer2:
 1496 0000 00000000 		.space	50
 1496      00000000 
 1496      00000000 
 1496      00000000 
 1496      00000000 
 1497              		.section	.bss.debugCounter,"aw",%nobits
 1498              		.align	2
 1499              		.set	.LANCHOR8,. + 0
 1502              	debugCounter:
 1503 0000 00000000 		.space	4
 1504              		.section	.bss.buffer,"aw",%nobits
 1505              		.align	2
 1506              		.set	.LANCHOR10,. + 0
 1509              	buffer:
 1510 0000 00000000 		.space	50
 1510      00000000 
 1510      00000000 
 1510      00000000 
 1510      00000000 
 1511              		.section	.bss.angle,"aw",%nobits
 1512              		.align	3
 1513              		.set	.LANCHOR3,. + 0
 1516              	angle:
 1517 0000 00000000 		.space	8
 1517      00000000 
 1518              		.section	.bss.consigneGauche,"aw",%nobits
 1519              		.align	2
 1520              		.set	.LANCHOR7,. + 0
 1523              	consigneGauche:
 1524 0000 00000000 		.space	4
 1525              		.text
 1526              	.Letext0:
 1527              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1528              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1529              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1530              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1531              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
ARM GAS  /tmp/ccOoopxZ.s 			page 43


 1532              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1533              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1534              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1535              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1536              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1537              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1538              		.file 13 "<built-in>"
 1539              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 1540              		.file 15 "Inc/main.h"
 1541              		.file 16 "Inc/assert.h"
 1542              		.file 17 "/usr/include/newlib/stdio.h"
 1543              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccOoopxZ.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccOoopxZ.s:21     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccOoopxZ.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccOoopxZ.s:206    .text.MX_GPIO_Init:0000000000000108 $d
     /tmp/ccOoopxZ.s:215    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccOoopxZ.s:219    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccOoopxZ.s:258    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccOoopxZ.s:264    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccOoopxZ.s:268    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccOoopxZ.s:349    .text.MX_TIM2_Init:000000000000005c $d
                            *COM*:000000000000003c htim2
     /tmp/ccOoopxZ.s:354    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccOoopxZ.s:358    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccOoopxZ.s:439    .text.MX_TIM3_Init:000000000000005c $d
                            *COM*:000000000000003c htim3
     /tmp/ccOoopxZ.s:445    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccOoopxZ.s:449    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccOoopxZ.s:521    .text.MX_TIM4_Init:000000000000004c $d
                            *COM*:000000000000003c htim4
     /tmp/ccOoopxZ.s:527    .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccOoopxZ.s:531    .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccOoopxZ.s:603    .text.MX_TIM5_Init:000000000000004c $d
                            *COM*:000000000000003c htim5
     /tmp/ccOoopxZ.s:609    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccOoopxZ.s:613    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccOoopxZ.s:730    .text.MX_TIM1_Init:0000000000000090 $d
                            *COM*:000000000000003c htim1
     /tmp/ccOoopxZ.s:736    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccOoopxZ.s:741    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccOoopxZ.s:855    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccOoopxZ.s:861    .text.moteurDroit:0000000000000000 $t
     /tmp/ccOoopxZ.s:866    .text.moteurDroit:0000000000000000 moteurDroit
     /tmp/ccOoopxZ.s:920    .text.moteurDroit:0000000000000044 $d
     /tmp/ccOoopxZ.s:926    .text.moteurGauche:0000000000000000 $t
     /tmp/ccOoopxZ.s:931    .text.moteurGauche:0000000000000000 moteurGauche
     /tmp/ccOoopxZ.s:985    .text.moteurGauche:0000000000000040 $d
     /tmp/ccOoopxZ.s:994    .text.main:0000000000000000 $t
     /tmp/ccOoopxZ.s:999    .text.main:0000000000000000 main
     /tmp/ccOoopxZ.s:1352   .text.main:0000000000000250 $d
     /tmp/ccOoopxZ.s:1389   .text.Error_Handler:0000000000000000 $t
     /tmp/ccOoopxZ.s:1394   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccOoopxZ.s:1449   .data.debugMessageFrequency:0000000000000000 debugMessageFrequency
     /tmp/ccOoopxZ.s:1470   .data.fixedFrequency:0000000000000000 fixedFrequency
     /tmp/ccOoopxZ.s:1495   .bss.buffer2:0000000000000000 buffer2
     /tmp/ccOoopxZ.s:1509   .bss.buffer:0000000000000000 buffer
     /tmp/ccOoopxZ.s:1463   .bss.tim5Tot:0000000000000000 tim5Tot
     /tmp/ccOoopxZ.s:1456   .bss.tim4Tot:0000000000000000 tim4Tot
     /tmp/ccOoopxZ.s:1502   .bss.debugCounter:0000000000000000 debugCounter
     /tmp/ccOoopxZ.s:1523   .bss.consigneGauche:0000000000000000 consigneGauche
     /tmp/ccOoopxZ.s:1428   .bss.consigneDroit:0000000000000000 consigneDroit
     /tmp/ccOoopxZ.s:1516   .bss.angle:0000000000000000 angle
     /tmp/ccOoopxZ.s:1442   .bss.positionY:0000000000000000 positionY
     /tmp/ccOoopxZ.s:1435   .bss.positionX:0000000000000000 positionX
     /tmp/ccOoopxZ.s:1424   .bss.consigneDroit:0000000000000000 $d
     /tmp/ccOoopxZ.s:1431   .bss.positionX:0000000000000000 $d
ARM GAS  /tmp/ccOoopxZ.s 			page 45


     /tmp/ccOoopxZ.s:1438   .bss.positionY:0000000000000000 $d
     /tmp/ccOoopxZ.s:1445   .data.debugMessageFrequency:0000000000000000 $d
     /tmp/ccOoopxZ.s:1452   .bss.tim4Tot:0000000000000000 $d
     /tmp/ccOoopxZ.s:1459   .bss.tim5Tot:0000000000000000 $d
     /tmp/ccOoopxZ.s:1466   .data.fixedFrequency:0000000000000000 $d
     /tmp/ccOoopxZ.s:1473   .rodata.str1.4:0000000000000000 $d
     /tmp/ccOoopxZ.s:1491   .bss.buffer2:0000000000000000 $d
     /tmp/ccOoopxZ.s:1498   .bss.debugCounter:0000000000000000 $d
     /tmp/ccOoopxZ.s:1505   .bss.buffer:0000000000000000 $d
     /tmp/ccOoopxZ.s:1512   .bss.angle:0000000000000000 $d
     /tmp/ccOoopxZ.s:1519   .bss.consigneGauche:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_TIM_Encoder_Init
HAL_TIMEx_ConfigBreakDeadTime
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_i2d
__aeabi_dmul
__aeabi_d2iz
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_Encoder_Start
HAL_UART_Transmit
HAL_GPIO_ReadPin
HAL_GetTick
HAL_Delay
updatePos
stateMachine
sprintf
